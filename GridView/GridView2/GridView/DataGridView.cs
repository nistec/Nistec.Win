namespace MControl.GridView
{
    using Microsoft.Win32;
    using System;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.Drawing;
    using System.Drawing.Design;
    using System.Globalization;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Security;
    using System.Security.Permissions;
    using System.Text;
    using System.Windows.Forms.Layout;
    using System.Windows.Forms.VisualStyles;
    using System.Windows.Forms;

    /// <summary>Displays data in a customizable grid.</summary>
    /// <filterpriority>1</filterpriority>
    [ClassInterface(ClassInterfaceType.AutoDispatch), Description("DescriptionGrid"), Docking(DockingBehavior.Ask), Editor("System.Windows.Forms.Design.GridComponentEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(ComponentEditor)), ComVisible(true), Designer("System.Windows.Forms.Design.GridDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), DefaultEvent("CellContentClick"), ComplexBindingProperties("DataSource", "DataMember")]
    public class Grid : Control, ISupportInitialize
    {
        private GridAdvancedBorderStyle advancedCellBorderStyle;
        private GridAdvancedBorderStyle advancedColumnHeadersBorderStyle;
        private GridAdvancedBorderStyle advancedRowHeadersBorderStyle;
        private GridCellStyle alternatingRowsDefaultCellStyle;
        private GridAutoSizeColumnsMode autoSizeColumnsMode;
        private GridAutoSizeRowsMode autoSizeRowsMode;
        private int availableWidthForFillColumns;
        private SolidBrush backgroundBrush = DefaultBackgroundBrush;
        private System.Windows.Forms.BorderStyle borderStyle;
        private Hashtable brushes;
        private int cachedColumnHeadersHeight;
        private Control cachedEditingControl;
        private Graphics cachedGraphics;
        private int cachedRowHeadersWidth;
        private MControl.Util.NativeMethods.RECT[] cachedScrollableRegion;
        private GridClipboardCopyMode clipboardCopyMode;
        private GridCellStyle columnHeadersDefaultCellStyle;
        private int columnHeadersHeight = 0x17;
        private GridColumnHeadersHeightSizeMode columnHeadersHeightSizeMode;
        private Hashtable converters;
        private int cumulativeHorizontalWheelDelta;
        private int cumulativeVerticalWheelDelta;
        private int currentColSplitBar = -1;
        private int currentRowSplitBar = -1;
        private GridDataConnection dataConnection;
        private const byte grid_bulkPaintThreshold = 8;
        private const byte grid_columnSizingHotZone = 6;
        private const string grid_htmlEndFragment = "\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>";
        private const string grid_htmlPrefix = "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n";
        private const string grid_htmlStartFragment = "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
        private const byte grid_insertionBarWidth = 3;
        private const byte grid_rowSizingHotZone = 5;
        private GridColumnCollection gridColumns;
        private BitVector32 gridOper;
        private const int gridOPER_inAdjustFillingColumn = 0x80000;
        private const int gridOPER_inAdjustFillingColumns = 0x40000;
        private const int gridOPER_inBeginEdit = 0x200000;
        private const int gridOPER_inBorderStyleChange = 0x10000;
        private const int gridOPER_inCellValidating = 0x8000;
        private const int gridOPER_inCurrentCellChange = 0x20000;
        private const int gridOPER_inDisplayIndexAdjustments = 0x800;
        private const int gridOPER_inDispose = 0x100000;
        private const int gridOPER_inEndEdit = 0x400000;
        private const int gridOPER_inMouseDown = 0x2000;
        private const int gridOPER_inReadOnlyChange = 0x4000;
        private const int gridOPER_inRefreshColumns = 0x400;
        private const int gridOPER_inSort = 0x40;
        private const int gridOPER_lastEditCtrlClickDoubled = 0x1000;
        private const int gridOPER_resizingOperationAboutToStart = 0x800000;
        private const int gridOPER_trackCellSelect = 0x10;
        private const int gridOPER_trackColHeadersResize = 0x80;
        private const int gridOPER_trackColRelocation = 0x20;
        private const int gridOPER_trackColResize = 1;
        private const int gridOPER_trackColSelect = 4;
        private const int gridOPER_trackMouseMoves = 0x200;
        private const int gridOPER_trackRowHeadersResize = 0x100;
        private const int gridOPER_trackRowResize = 2;
        private const int gridOPER_trackRowSelect = 8;
        private GridRowCollection gridRows;
        private BitVector32 gridState1;
        private const int gridSTATE1_allowUserToAddRows = 1;
        private const int gridSTATE1_allowUserToDeleteRows = 2;
        private const int gridSTATE1_allowUserToOrderColumns = 4;
        private const int gridSTATE1_ambientColumnHeadersFont = 0x4000000;
        private const int gridSTATE1_ambientFont = 0x2000000;
        private const int gridSTATE1_ambientForeColor = 0x400;
        private const int gridSTATE1_ambientRowHeadersFont = 0x8000000;
        private const int gridSTATE1_autoGenerateColumns = 0x800000;
        private const int gridSTATE1_columnHeadersVisible = 8;
        private const int gridSTATE1_currentCellInEditMode = 0x8000;
        private const int gridSTATE1_customCursorSet = 0x1000000;
        private const int gridSTATE1_editedCellChanged = 0x20000;
        private const int gridSTATE1_editedRowChanged = 0x40000;
        private const int gridSTATE1_editingControlChanging = 0x4000;
        private const int gridSTATE1_editingControlHidden = 0x1000;
        private const int gridSTATE1_forwardCharMessage = 0x20;
        private const int gridSTATE1_ignoringEditingChanges = 0x200;
        private const int gridSTATE1_isAutoSized = 0x40000000;
        private const int gridSTATE1_isRestricted = 0x20000000;
        private const int gridSTATE1_isRestrictedChecked = 0x10000000;
        private const int gridSTATE1_leavingWithTabKey = 0x40;
        private const int gridSTATE1_multiSelect = 0x80;
        private const int gridSTATE1_newRowCreatedByEditing = 0x200000;
        private const int gridSTATE1_newRowEdited = 0x80000;
        private const int gridSTATE1_readOnly = 0x100000;
        private const int gridSTATE1_rowHeadersVisible = 0x10;
        private const int gridSTATE1_scrolledSinceMouseDown = 0x800;
        private const int gridSTATE1_standardTab = 0x2000;
        private const int gridSTATE1_temporarilyResetCurrentCell = 0x400000;
        private const int gridSTATE1_virtualMode = 0x10000;
        private BitVector32 gridState2;
        private const int gridSTATE2_allowHorizontalScrollbar = 0x2000000;
        private const int gridSTATE2_allowUserToResizeColumns = 2;
        private const int gridSTATE2_allowUserToResizeRows = 4;
        private const int gridSTATE2_autoSizedWithoutHandle = 0x100000;
        private const int gridSTATE2_cellMouseDownInContentBounds = 0x10000000;
        private const int gridSTATE2_currentCellWantsInputKey = 0x2000;
        private const int gridSTATE2_discardEditingControl = 0x20000000;
        private const int gridSTATE2_enableHeadersVisualStyles = 0x40;
        private const int gridSTATE2_ignoreCursorChange = 0x200000;
        private const int gridSTATE2_inBindingContextChanged = 0x1000000;
        private const int gridSTATE2_initializing = 0x80000;
        private const int gridSTATE2_messageFromEditingCtrls = 0x8000000;
        private const int gridSTATE2_mouseEnterExpected = 0x20;
        private const int gridSTATE2_mouseOverRemovedEditingCtrl = 8;
        private const int gridSTATE2_mouseOverRemovedEditingPanel = 0x10;
        private const int gridSTATE2_nextMouseUpIsDouble = 0x800000;
        private const int gridSTATE2_raiseSelectionChanged = 0x40000;
        private const int gridSTATE2_replacedCellReadOnly = 0x20000;
        private const int gridSTATE2_replacedCellSelected = 0x10000;
        private const int gridSTATE2_rightToLeftMode = 0x800;
        private const int gridSTATE2_rightToLeftValid = 0x1000;
        private const int gridSTATE2_rowsCollectionClearedInSetCell = 0x400000;
        private const int gridSTATE2_showCellErrors = 0x80;
        private const int gridSTATE2_showCellToolTips = 0x100;
        private const int gridSTATE2_showColumnRelocationInsertion = 0x400;
        private const int gridSTATE2_showEditingIcon = 1;
        private const int gridSTATE2_showRowErrors = 0x200;
        private const int gridSTATE2_stopRaisingHorizontalScroll = 0x8000;
        private const int gridSTATE2_stopRaisingVerticalScroll = 0x4000;
        private const int gridSTATE2_usedFillWeightsDirty = 0x4000000;
        private const GridAdvancedCellBorderStyle defaultAdvancedCellBorderStyle = GridAdvancedCellBorderStyle.Single;
        private const GridAdvancedCellBorderStyle defaultAdvancedColumnHeadersBorderStyle = GridAdvancedCellBorderStyle.OutsetPartial;
        private const GridAdvancedCellBorderStyle defaultAdvancedRowHeadersBorderStyle = GridAdvancedCellBorderStyle.OutsetPartial;
        private const System.Windows.Forms.BorderStyle defaultBorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
        private GridCellStyle defaultCellStyle;
        private const int defaultColumnHeadersHeight = 0x17;
        private const GridEditMode defaultEditMode = GridEditMode.EditOnKeystrokeOrF2;
        private const int defaultRowHeadersWidth = 0x29;
        private const GridSelectionMode defaultSelectionMode = GridSelectionMode.RowHeaderSelect;
        private GridCellPaintingEventArgs dgvcpe;
        private GridCellStyleChangedEventArgs dgvcsce;
        private GridCellValueEventArgs dgvcve;
        private GridRowHeightInfoNeededEventArgs dgvrhine;
        private GridRowPostPaintEventArgs dgvrpope;
        private GridRowPrePaintEventArgs dgvrprpe;
        private DisplayedBandsData displayedBandsInfo;
        private static Size DragSize = SystemInformation.DragSize;
        private Control editingControl;
        private Panel editingPanel;
        private GridEditMode editMode;
        private static readonly object EVENT_gridALLOWUSERTOADDROWSCHANGED = new object();
        private static readonly object EVENT_gridALLOWUSERTODELETEROWSCHANGED = new object();
        private static readonly object EVENT_gridALLOWUSERTOORDERCOLUMNSCHANGED = new object();
        private static readonly object EVENT_gridALLOWUSERTORESIZECOLUMNSCHANGED = new object();
        private static readonly object EVENT_gridALLOWUSERTORESIZEROWSCHANGED = new object();
        private static readonly object EVENT_gridALTERNATINGROWSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridAUTOGENERATECOLUMNSCHANGED = new object();
        private static readonly object EVENT_gridAUTOSIZECOLUMNMODECHANGED = new object();
        private static readonly object EVENT_gridAUTOSIZECOLUMNSMODECHANGED = new object();
        private static readonly object EVENT_gridAUTOSIZEROWSMODECHANGED = new object();
        private static readonly object EVENT_gridBACKGROUNDCOLORCHANGED = new object();
        private static readonly object EVENT_gridBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_gridCANCELROWEDIT = new object();
        private static readonly object EVENT_gridCELLBEGINEDIT = new object();
        private static readonly object EVENT_gridCELLBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_gridCELLCLICK = new object();
        private static readonly object EVENT_gridCELLCONTENTCLICK = new object();
        private static readonly object EVENT_gridCELLCONTENTDOUBLECLICK = new object();
        private static readonly object EVENT_gridCELLCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_gridCELLCONTEXTMENUSTRIPNEEDED = new object();
        private static readonly object EVENT_gridCELLDOUBLECLICK = new object();
        private static readonly object EVENT_gridCELLENDEDIT = new object();
        private static readonly object EVENT_gridCELLENTER = new object();
        private static readonly object EVENT_gridCELLERRORTEXTCHANGED = new object();
        private static readonly object EVENT_gridCELLERRORTEXTNEEDED = new object();
        private static readonly object EVENT_gridCELLFORMATTING = new object();
        private static readonly object EVENT_gridCELLLEAVE = new object();
        private static readonly object EVENT_gridCELLMOUSECLICK = new object();
        private static readonly object EVENT_gridCELLMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_gridCELLMOUSEDOWN = new object();
        private static readonly object EVENT_gridCELLMOUSEENTER = new object();
        private static readonly object EVENT_gridCELLMOUSELEAVE = new object();
        private static readonly object EVENT_gridCELLMOUSEMOVE = new object();
        private static readonly object EVENT_gridCELLMOUSEUP = new object();
        private static readonly object EVENT_gridCELLPAINTING = new object();
        private static readonly object EVENT_gridCELLPARSING = new object();
        private static readonly object EVENT_gridCELLSTATECHANGED = new object();
        private static readonly object EVENT_gridCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridCELLSTYLECONTENTCHANGED = new object();
        private static readonly object EVENT_gridCELLTOOLTIPTEXTCHANGED = new object();
        private static readonly object EVENT_gridCELLTOOLTIPTEXTNEEDED = new object();
        private static readonly object EVENT_gridCELLVALIDATED = new object();
        private static readonly object EVENT_gridCELLVALIDATING = new object();
        private static readonly object EVENT_gridCELLVALUECHANGED = new object();
        private static readonly object EVENT_gridCELLVALUENEEDED = new object();
        private static readonly object EVENT_gridCELLVALUEPUSHED = new object();
        private static readonly object EVENT_gridCOLUMNADDED = new object();
        private static readonly object EVENT_gridCOLUMNCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNDATAPROPERTYNAMECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNDISPLAYINDEXCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNDIVIDERDOUBLECLICK = new object();
        private static readonly object EVENT_gridCOLUMNDIVIDERWIDTHCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNHEADERCELLCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNHEADERMOUSECLICK = new object();
        private static readonly object EVENT_gridCOLUMNHEADERMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_gridCOLUMNHEADERSBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNHEADERSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNHEADERSHEIGHTCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNHEADERSHEIGHTSIZEMODECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNMINIMUMWIDTHCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNNAMECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNREMOVED = new object();
        private static readonly object EVENT_gridCOLUMNSORTMODECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNSTATECHANGED = new object();
        private static readonly object EVENT_gridCOLUMNTOOLTIPTEXTCHANGED = new object();
        private static readonly object EVENT_gridCOLUMNWIDTHCHANGED = new object();
        private static readonly object EVENT_gridCURRENTCELLCHANGED = new object();
        private static readonly object EVENT_gridCURRENTCELLDIRTYSTATECHANGED = new object();
        private static readonly object EVENT_gridDATABINDINGCOMPLETE = new object();
        private static readonly object EVENT_gridDATAERROR = new object();
        private static readonly object EVENT_gridDATAMEMBERCHANGED = new object();
        private static readonly object EVENT_gridDATASOURCECHANGED = new object();
        private static readonly object EVENT_gridDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridDEFAULTVALUESNEEDED = new object();
        private static readonly object EVENT_gridEDITINGCONTROLSHOWING = new object();
        private static readonly object EVENT_gridEDITMODECHANGED = new object();
        private static readonly object EVENT_gridGRIDCOLORCHANGED = new object();
        private static readonly object EVENT_gridMULTISELECTCHANGED = new object();
        private static readonly object EVENT_gridNEWROWNEEDED = new object();
        private static readonly object EVENT_gridREADONLYCHANGED = new object();
        private static readonly object EVENT_gridROWCONTEXTMENUSTRIPCHANGED = new object();
        private static readonly object EVENT_gridROWCONTEXTMENUSTRIPNEEDED = new object();
        private static readonly object EVENT_gridROWDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridROWDIRTYSTATENEEDED = new object();
        private static readonly object EVENT_gridROWDIVIDERDOUBLECLICK = new object();
        private static readonly object EVENT_gridROWDIVIDERHEIGHTCHANGED = new object();
        private static readonly object EVENT_gridROWENTER = new object();
        private static readonly object EVENT_gridROWERRORTEXTCHANGED = new object();
        private static readonly object EVENT_gridROWERRORTEXTNEEDED = new object();
        private static readonly object EVENT_gridROWHEADERCELLCHANGED = new object();
        private static readonly object EVENT_gridROWHEADERMOUSECLICK = new object();
        private static readonly object EVENT_gridROWHEADERMOUSEDOUBLECLICK = new object();
        private static readonly object EVENT_gridROWHEADERSBORDERSTYLECHANGED = new object();
        private static readonly object EVENT_gridROWHEADERSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridROWHEADERSWIDTHCHANGED = new object();
        private static readonly object EVENT_gridROWHEADERSWIDTHSIZEMODECHANGED = new object();
        private static readonly object EVENT_gridROWHEIGHTCHANGED = new object();
        private static readonly object EVENT_gridROWHEIGHTINFONEEDED = new object();
        private static readonly object EVENT_gridROWHEIGHTINFOPUSHED = new object();
        private static readonly object EVENT_gridROWLEAVE = new object();
        private static readonly object EVENT_gridROWMINIMUMHEIGHTCHANGED = new object();
        private static readonly object EVENT_gridROWPOSTPAINT = new object();
        private static readonly object EVENT_gridROWPREPAINT = new object();
        private static readonly object EVENT_gridROWSADDED = new object();
        private static readonly object EVENT_gridROWSDEFAULTCELLSTYLECHANGED = new object();
        private static readonly object EVENT_gridROWSREMOVED = new object();
        private static readonly object EVENT_gridROWSTATECHANGED = new object();
        private static readonly object EVENT_gridROWUNSHARED = new object();
        private static readonly object EVENT_gridROWVALIDATED = new object();
        private static readonly object EVENT_gridROWVALIDATING = new object();
        private static readonly object EVENT_gridSCROLL = new object();
        private static readonly object EVENT_gridSELECTIONCHANGED = new object();
        private static readonly object EVENT_gridSORTCOMPARE = new object();
        private static readonly object EVENT_gridSORTED = new object();
        private static readonly object EVENT_gridUSERADDEDROW = new object();
        private static readonly object EVENT_gridUSERDELETEDROW = new object();
        private static readonly object EVENT_gridUSERDELETINGROW = new object();
        private Pen gridPen;
        private int horizontalOffset;
        private HScrollBar horizScrollBar = new HScrollBar();
        private Timer horizScrollTimer;
        private int inBulkLayoutCount;
        private int inBulkPaintCount;
        private GridCellLinkedList individualReadOnlyCells;
        private GridCellLinkedList individualSelectedCells;
        private const GridAutoSizeRowCriteriaInternal invalidGridAutoSizeRowCriteriaInternalMask = ~(GridAutoSizeRowCriteriaInternal.AllColumns | GridAutoSizeRowCriteriaInternal.Header);
        private int lastColSplitBar = -1;
        private int lastHeaderShadow = -1;
        private MouseClickInfo lastMouseClickInfo;
        private int lastRowSplitBar = -1;
        private Control latestEditingControl;
        private LayoutData layout;
        private ArrayList lstRows;
        private const int maxHeadersThickness = 0x8000;
        private const int maxTTDISPINFOBufferLength = 80;
        private const int minimumColumnHeadersHeight = 4;
        private const int minimumRowHeadersWidth = 4;
        private int mouseBarOffset;
        private int negOffset;
        private int newRowIndex = -1;
        private int noAutoSizeCount;
        private int noDimensionChangeCount;
        private Rectangle normalClientRectangle;
        private int noSelectionChangeCount;
        private Cursor oldCursor;
        private Hashtable pens;
        private GridCellStyle placeholderCellStyle;
        private StringFormat placeholderStringFormat;
        private Point ptAnchorCell;
        private Point ptCurrentCell;
        private Point ptCurrentCellCache = Point.Empty;
        private Point ptMouseDownCell;
        private Point ptMouseDownGridCoord;
        private Point ptMouseEnteredCell;
        private Point ptToolTipCell;
        private GridCellStyle rowHeadersDefaultCellStyle;
        private int rowHeadersWidth = 0x29;
        private GridRowHeadersWidthSizeMode rowHeadersWidthSizeMode;
        private GridCellStyle rowsDefaultCellStyle;
        private GridRow rowTemplate;
        private System.Windows.Forms.ScrollBars scrollBars;
        private GridIntLinkedList selectedBandIndexes;
        private GridIntLinkedList selectedBandSnapshotIndexes;
        private GridSelectionMode selectionMode;
        private GridColumn sortedColumn;
        private System.Windows.Forms.SortOrder sortOrder;
        private string toolTipCaption = string.Empty;
        private GridToolTip toolTipControl;
        private GridHeaderCell topLeftHeaderCell;
        private int trackColAnchor;
        private int trackColumn = -1;
        private int trackColumnEdge = -1;
        private int trackRow = -1;
        private int trackRowAnchor;
        private int trackRowEdge = -1;
        private object uneditedFormattedValue;
        private const int upperSize = 0x7fffff;
        private int verticalOffset;
        private VScrollBar vertScrollBar = new VScrollBar();
        private Timer vertScrollTimer;

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AllowUserToAddRows"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("GridOnAllowUserToAddRowsChanged")]
        public event EventHandler AllowUserToAddRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALLOWUSERTOADDROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALLOWUSERTOADDROWSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="E:MControl.GridView.Grid.AllowUserToDeleteRowsChanged"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridOnAllowUserToDeleteRowsChanged"), Category("PropertyChanged")]
        public event EventHandler AllowUserToDeleteRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALLOWUSERTODELETEROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALLOWUSERTODELETEROWSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AllowUserToOrderColumns"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridOnAllowUserToOrderColumnsChanged"), Category("PropertyChanged")]
        public event EventHandler AllowUserToOrderColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALLOWUSERTOORDERCOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALLOWUSERTOORDERCOLUMNSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AllowUserToResizeColumns"></see> property changes.</summary>
        [Description("GridOnAllowUserToResizeColumnsChanged"), Category("PropertyChanged")]
        public event EventHandler AllowUserToResizeColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALLOWUSERTORESIZECOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALLOWUSERTORESIZECOLUMNSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AllowUserToResizeRows"></see> property changes.</summary>
        [Description("GridOnAllowUserToResizeRowsChanged"), Category("PropertyChanged")]
        public event EventHandler AllowUserToResizeRowsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALLOWUSERTORESIZEROWSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALLOWUSERTORESIZEROWSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AlternatingRowsDefaultCellStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridAlternatingRowsDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event EventHandler AlternatingRowsDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="E:MControl.GridView.Grid.AutoGenerateColumnsChanged"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event EventHandler AutoGenerateColumnsChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridAUTOGENERATECOLUMNSCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridAUTOGENERATECOLUMNSCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.AutoSizeMode"></see> property of a column changes.</summary>
        [Category("PropertyChanged"), Description("GridAutoSizeColumnModeChanged")]
        public event GridAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridAUTOSIZECOLUMNMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridAUTOSIZECOLUMNMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.AutoSizeColumnsMode"></see> property changes.</summary>
        [Category("PropertyChanged"), Description("GridAutoSizeColumnsModeChanged")]
        public event GridAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridAUTOSIZECOLUMNSMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridAUTOSIZECOLUMNSMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridAutoSizeRowsModeChanged"), Category("PropertyChanged")]
        public event GridAutoSizeModeEventHandler AutoSizeRowsModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridAUTOSIZEROWSMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridAUTOSIZEROWSMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.BackColor"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler BackColorChanged
        {
            add
            {
                base.BackColorChanged += value;
            }
            remove
            {
                base.BackColorChanged -= value;
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.BackgroundColor"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridBackgroundColorChanged"), Category("PropertyChanged")]
        public event EventHandler BackgroundColorChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridBACKGROUNDCOLORCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridBACKGROUNDCOLORCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.BackgroundImage"></see> property changes.</summary>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler BackgroundImageChanged
        {
            add
            {
                base.BackgroundImageChanged += value;
            }
            remove
            {
                base.BackgroundImageChanged -= value;
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.BackgroundImageLayout"></see> property changes.</summary>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler BackgroundImageLayoutChanged
        {
            add
            {
                base.BackgroundImageLayoutChanged += value;
            }
            remove
            {
                base.BackgroundImageLayoutChanged -= value;
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.BorderStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridBorderStyleChanged"), Category("PropertyChanged")]
        public event EventHandler BorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridBORDERSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property of a <see cref="T:MControl.GridView.Grid"></see> control is true and the cancels edits in a row.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CancelRowEdit"), Category("Action")]
        public event QuestionEventHandler CancelRowEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCANCELROWEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCANCELROWEDIT, value);
            }
        }

        /// <summary>Occurs when edit mode starts for the selected cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Data"), Description("Grid_CellBeginEdit")]
        public event GridCellCancelEventHandler CellBeginEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLBEGINEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLBEGINEDIT, value);
            }
        }

        /// <summary>Occurs when the border style of a cell changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellBorderStyleChanged"), Category("PropertyChanged")]
        public event EventHandler CellBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLBORDERSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when any part of a cell is clicked.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellClick")]
        public event GridCellEventHandler CellClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLCLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLCLICK, value);
            }
        }

        /// <summary>Occurs when the content within a cell is clicked.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellContentClick"), Category("Mouse")]
        public event GridCellEventHandler CellContentClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLCONTENTCLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLCONTENTCLICK, value);
            }
        }

        /// <summary>Occurs when the user double-clicks a cell's contents.</summary>
        [Description("Grid_CellContentDoubleClick"), Category("Mouse")]
        public event GridCellEventHandler CellContentDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLCONTENTDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLCONTENTDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridCell.ContextMenuStrip"></see> property changes. </summary>
        [Category("Action"), Description("Grid_CellContextMenuStripChanged"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridCellEventHandler CellContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        /// <summary>Occurs when a cell's shortcut menu is needed. </summary>
        [Description("Grid_CellContextMenuStripNeeded"), Category("Behavior"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLCONTEXTMENUSTRIPNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLCONTEXTMENUSTRIPNEEDED, value);
            }
        }

        /// <summary>Occurs when the user double-clicks anywhere in a cell.</summary>
        [Description("Grid_CellDoubleClick"), Category("Mouse")]
        public event GridCellEventHandler CellDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when edit mode stops for the currently selected cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellEndEdit"), Category("Data")]
        public event GridCellEventHandler CellEndEdit
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLENDEDIT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLENDEDIT, value);
            }
        }

        /// <summary>Occurs when the current cell changes in the <see cref="T:MControl.GridView.Grid"></see> control or when the control receives input focus. </summary>
        /// <filterpriority>1</filterpriority>
        [Category("Focus"), Description("Grid_CellEnter")]
        public event GridCellEventHandler CellEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLENTER, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridCell.ErrorText"></see> property of a cell changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_CellErrorTextChanged")]
        public event GridCellEventHandler CellErrorTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLERRORTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLERRORTEXTCHANGED, value);
            }
        }

        /// <summary>Occurs when a cell's error text is needed.</summary>
        [Category("Data"), Description("Grid_CellErrorTextNeeded"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridCellErrorTextNeededEventHandler CellErrorTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLERRORTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLERRORTEXTNEEDED, value);
            }
        }

        /// <summary>Occurs when the contents of a cell need to be formatted for display.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellFormatting"), Category("Display")]
        public event GridCellFormattingEventHandler CellFormatting
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLFORMATTING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLFORMATTING, value);
            }
        }

        /// <summary>Occurs when a cell loses input focus and is no longer the current cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Focus"), Description("Grid_CellLeave")]
        public event GridCellEventHandler CellLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLLEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLLEAVE, value);
            }
        }

        /// <summary>Occurs whenever the user clicks anywhere on a cell with the mouse.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellMouseClick")]
        public event GridCellMouseEventHandler CellMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSECLICK, value);
            }
        }

        /// <summary>Occurs when a cell within the <see cref="T:MControl.GridView.Grid"></see> is double-clicked.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellMouseDoubleClick"), Category("Mouse")]
        public event GridCellMouseEventHandler CellMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSEDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the user presses a mouse button while the mouse pointer is within the boundaries of a cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellMouseDown"), Category("Mouse")]
        public event GridCellMouseEventHandler CellMouseDown
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSEDOWN, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSEDOWN, value);
            }
        }

        /// <summary>Occurs when the mouse pointer enters a cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellMouseEnter")]
        public event GridCellEventHandler CellMouseEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSEENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSEENTER, value);
            }
        }

        /// <summary>Occurs when the mouse pointer leaves a cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellMouseLeave")]
        public event GridCellEventHandler CellMouseLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSELEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSELEAVE, value);
            }
        }

        /// <summary>Occurs when the mouse pointer moves over the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellMouseMove")]
        public event GridCellMouseEventHandler CellMouseMove
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSEMOVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSEMOVE, value);
            }
        }

        /// <summary>Occurs when the user releases a mouse button while over a cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_CellMouseUp")]
        public event GridCellMouseEventHandler CellMouseUp
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLMOUSEUP, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLMOUSEUP, value);
            }
        }

        /// <summary>Occurs when a cell needs to be drawn.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellPainting"), Category("Display")]
        public event GridCellPaintingEventHandler CellPainting
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLPAINTING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLPAINTING, value);
            }
        }

        /// <summary>Occurs when a cell leaves edit mode if the cell value has been modified.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellParsing"), Category("Display")]
        public event GridCellParsingEventHandler CellParsing
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLPARSING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLPARSING, value);
            }
        }

        /// <summary>Occurs when a cell state changes, such as when the cell loses or gains focus.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellStateChanged"), Category("Behavior")]
        public event GridCellStateChangedEventHandler CellStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLSTATECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridCell.Style"></see> property of a <see cref="T:MControl.GridView.GridCell"></see> changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_CellStyleChanged")]
        public event GridCellEventHandler CellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when one of the values of a cell style changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellStyleContentChanged"), Category("PropertyChanged")]
        public event GridCellStyleContentChangedEventHandler CellStyleContentChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLSTYLECONTENTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLSTYLECONTENTCHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridCell.ToolTipText"></see> property value changes for a cell in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellToolTipTextChanged"), Category("PropertyChanged")]
        public event GridCellEventHandler CellToolTipTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLTOOLTIPTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLTOOLTIPTEXTCHANGED, value);
            }
        }

        /// <summary>Occurs when a cell's ToolTip text is needed.</summary>
        [EditorBrowsable(EditorBrowsableState.Advanced), Category("Behavior"), Description("Grid_CellToolTipTextNeeded")]
        public event GridCellToolTipTextNeededEventHandler CellToolTipTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLTOOLTIPTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLTOOLTIPTEXTNEEDED, value);
            }
        }

        /// <summary>Occurs after the cell has finished validating.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellValidated"), Category("Focus")]
        public event GridCellEventHandler CellValidated
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLVALIDATED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLVALIDATED, value);
            }
        }

        /// <summary>Occurs when a cell loses input focus, enabling content validation.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_CellValidating"), Category("Focus")]
        public event GridCellValidatingEventHandler CellValidating
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLVALIDATING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLVALIDATING, value);
            }
        }

        /// <summary>Occurs when the value of a cell changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Action"), Description("Grid_CellValueChanged")]
        public event GridCellEventHandler CellValueChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLVALUECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLVALUECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property of the <see cref="T:MControl.GridView.Grid"></see> control is true and the <see cref="T:MControl.GridView.Grid"></see> requires a value for a cell in order to format and display the cell.</summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Advanced), Description("Grid_CellValueNeeded"), Category("Data")]
        public event GridCellValueEventHandler CellValueNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLVALUENEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLVALUENEEDED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property of the <see cref="T:MControl.GridView.Grid"></see> control is true and a cell value has changed and requires storage in the underlying data source.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Data"), Description("Grid_CellValuePushed"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridCellValueEventHandler CellValuePushed
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCELLVALUEPUSHED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCELLVALUEPUSHED, value);
            }
        }

        /// <summary>Occurs when a column is added to the control.</summary>
        [Description("Grid_ColumnAdded"), Category("Action")]
        public event GridColumnEventHandler ColumnAdded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNADDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNADDED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridColumn.ContextMenuStrip"></see> property of a column changes.</summary>
        [Category("PropertyChanged"), Description("Grid_ColumnContextMenuStripChanged")]
        public event GridColumnEventHandler ColumnContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.DataPropertyName"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_ColumnDataPropertyNameChanged")]
        public event GridColumnEventHandler ColumnDataPropertyNameChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNDATAPROPERTYNAMECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNDATAPROPERTYNAMECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridBand.DefaultCellStyle"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event GridColumnEventHandler ColumnDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the value the <see cref="P:MControl.GridView.GridColumn.DisplayIndex"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_ColumnDisplayIndexChanged")]
        public event GridColumnEventHandler ColumnDisplayIndexChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNDISPLAYINDEXCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNDISPLAYINDEXCHANGED, value);
            }
        }

        /// <summary>Occurs when the user double-clicks a divider between two columns.</summary>
        [Description("Grid_ColumnDividerDoubleClick"), Category("Mouse")]
        public event GridColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNDIVIDERDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNDIVIDERDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridColumn.DividerWidth"></see> property changes.</summary>
        [Description("Grid_ColumnDividerWidthChanged"), Category("PropertyChanged")]
        public event GridColumnEventHandler ColumnDividerWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNDIVIDERWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNDIVIDERWIDTHCHANGED, value);
            }
        }

        /// <summary>Occurs when the contents of a column header cell change.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_ColumnHeaderCellChanged")]
        public event GridColumnEventHandler ColumnHeaderCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERCELLCHANGED, value);
            }
        }

        /// <summary>Occurs when the user clicks a column header.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnHeaderMouseClick"), Category("Mouse")]
        public event GridCellMouseEventHandler ColumnHeaderMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERMOUSECLICK, value);
            }
        }

        /// <summary>Occurs when a column header is double-clicked.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Mouse"), Description("Grid_ColumnHeaderMouseDoubleClick")]
        public event GridCellMouseEventHandler ColumnHeaderMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERMOUSEDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.ColumnHeadersBorderStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnHeadersBorderStyleChanged"), Category("PropertyChanged")]
        public event EventHandler ColumnHeadersBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERSBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERSBORDERSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.ColumnHeadersDefaultCellStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridColumnHeadersDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event EventHandler ColumnHeadersDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.ColumnHeadersHeight"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridColumnHeadersHeightChanged"), Category("PropertyChanged")]
        public event EventHandler ColumnHeadersHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERSHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERSHEIGHTCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.ColumnHeadersHeightSizeMode"></see> property changes.</summary>
        [Description("Grid_ColumnHeadersHeightSizeModeChanged"), Category("PropertyChanged")]
        public event GridAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.MinimumWidth"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_ColumnMinimumWidthChanged")]
        public event GridColumnEventHandler ColumnMinimumWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNMINIMUMWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNMINIMUMWIDTHCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.Name"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnNameChanged"), Category("PropertyChanged")]
        public event GridColumnEventHandler ColumnNameChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNNAMECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNNAMECHANGED, value);
            }
        }

        /// <summary>Occurs when a column is removed from the control.</summary>
        [Description("Grid_ColumnRemoved"), Category("Action")]
        public event GridColumnEventHandler ColumnRemoved
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNREMOVED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNREMOVED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.SortMode"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridColumnSortModeChanged"), Category("Behavior")]
        public event GridColumnEventHandler ColumnSortModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNSORTMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNSORTMODECHANGED, value);
            }
        }

        /// <summary>Occurs when a column changes state, such as gaining or losing focus.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnStateChanged"), Category("Behavior")]
        public event GridColumnStateChangedEventHandler ColumnStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNSTATECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridColumn.ToolTipText"></see> property value changes for a column in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnToolTipTextChanged"), Category("PropertyChanged")]
        public event GridColumnEventHandler ColumnToolTipTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNTOOLTIPTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNTOOLTIPTEXTCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridColumn.Width"></see> property for a column changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_ColumnWidthChanged"), Category("Action")]
        public event GridColumnEventHandler ColumnWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCOLUMNWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCOLUMNWIDTHCHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.CurrentCell"></see> property changes.</summary>
        [Description("Grid_CurrentCellChanged"), Category("Action")]
        public event EventHandler CurrentCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCURRENTCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCURRENTCELLCHANGED, value);
            }
        }

        /// <summary>Occurs when the state of a cell changes in relation to a change in its contents.</summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Advanced), Description("Grid_CurrentCellDirtyStateChanged"), Category("Behavior")]
        public event EventHandler CurrentCellDirtyStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridCURRENTCELLDIRTYSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridCURRENTCELLDIRTYSTATECHANGED, value);
            }
        }

        /// <summary>Occurs after a data-binding operation has finished.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_DataBindingComplete"), Category("Data")]
        public event GridBindingCompleteEventHandler DataBindingComplete
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDATABINDINGCOMPLETE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDATABINDINGCOMPLETE, value);
            }
        }

        /// <summary>Occurs when an external data-parsing or validation operation throws an exception, or when an attempt to commit data to a data source fails.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_DataError"), Category("Behavior")]
        public event GridDataErrorEventHandler DataError
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDATAERROR, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDATAERROR, value);
            }
        }

        /// <summary>Occurs when value of the <see cref="P:MControl.GridView.Grid.DataMember"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridDataMemberChanged"), Category("PropertyChanged")]
        public event EventHandler DataMemberChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDATAMEMBERCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDATAMEMBERCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.DataSource"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridDataSourceChanged"), Category("PropertyChanged")]
        public event EventHandler DataSourceChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDATASOURCECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDATASOURCECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.DefaultCellStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event EventHandler DefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the user enters the row for new records so that it can be populated with default values.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_DefaultValuesNeeded"), Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridRowEventHandler DefaultValuesNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridDEFAULTVALUESNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridDEFAULTVALUESNEEDED, value);
            }
        }

        /// <summary>Occurs when a control for editing a cell is showing.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_EditingControlShowing"), Category("Action")]
        public event GridEditingControlShowingEventHandler EditingControlShowing
        {
            add
            {
                base.Events.AddHandler(EVENT_gridEDITINGCONTROLSHOWING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridEDITINGCONTROLSHOWING, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.EditMode"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_EditModeChanged"), Category("PropertyChanged")]
        public event EventHandler EditModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridEDITMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridEDITMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.Font"></see> property value changes. </summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public event EventHandler FontChanged
        {
            add
            {
                base.FontChanged += value;
            }
            remove
            {
                base.FontChanged -= value;
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.ForeColor"></see> property value changes. </summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public event EventHandler ForeColorChanged
        {
            add
            {
                base.ForeColorChanged += value;
            }
            remove
            {
                base.ForeColorChanged -= value;
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.GridColor"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridOnGridColorChanged"), Category("PropertyChanged")]
        public event EventHandler GridColorChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridGRIDCOLORCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridGRIDCOLORCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.MultiSelect"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridOnMultiSelectChanged"), Category("PropertyChanged")]
        public event EventHandler MultiSelectChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridMULTISELECTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridMULTISELECTCHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property of the <see cref="T:MControl.GridView.Grid"></see> is true and the user navigates to the new row at the bottom of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_NewRowNeeded"), Category("Data")]
        public event GridRowEventHandler NewRowNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridNEWROWNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridNEWROWNEEDED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.Padding"></see> property changes.</summary>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler PaddingChanged
        {
            add
            {
                base.PaddingChanged += value;
            }
            remove
            {
                base.PaddingChanged -= value;
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.ReadOnly"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridOnReadOnlyChanged"), Category("PropertyChanged")]
        public event EventHandler ReadOnlyChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridREADONLYCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridREADONLYCHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridRow.ContextMenuStrip"></see> property changes.</summary>
        [Description("Grid_RowContextMenuStripChanged"), Category("PropertyChanged")]
        public event GridRowEventHandler RowContextMenuStripChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWCONTEXTMENUSTRIPCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWCONTEXTMENUSTRIPCHANGED, value);
            }
        }

        /// <summary>Occurs when a row's shortcut menu is needed.</summary>
        [Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced), Description("Grid_RowContextMenuStripNeeded")]
        public event GridRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWCONTEXTMENUSTRIPNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWCONTEXTMENUSTRIPNEEDED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridBand.DefaultCellStyle"></see> property for a row changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_RowDefaultCellStyleChanged")]
        public event GridRowEventHandler RowDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property of the <see cref="T:MControl.GridView.Grid"></see> control is true and the <see cref="T:MControl.GridView.Grid"></see> needs to determine whether the current row has uncommitted changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowDirtyStateNeeded"), Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event QuestionEventHandler RowDirtyStateNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWDIRTYSTATENEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWDIRTYSTATENEEDED, value);
            }
        }

        /// <summary>Occurs when the user double-clicks the divider between two rows.</summary>
        [Description("Grid_RowDividerDoubleClick"), Category("Mouse")]
        public event GridRowDividerDoubleClickEventHandler RowDividerDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWDIVIDERDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWDIVIDERDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridRow.DividerHeight"></see> property changes. </summary>
        [Description("Grid_RowDividerHeightChanged"), Category("Appearance")]
        public event GridRowEventHandler RowDividerHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWDIVIDERHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWDIVIDERHEIGHTCHANGED, value);
            }
        }

        /// <summary>Occurs when a row receives input focus and becomes the current row.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowEnter"), Category("Focus")]
        public event GridCellEventHandler RowEnter
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWENTER, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWENTER, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.GridRow.ErrorText"></see> property of a row changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowErrorTextChanged"), Category("PropertyChanged")]
        public event GridRowEventHandler RowErrorTextChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWERRORTEXTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWERRORTEXTCHANGED, value);
            }
        }

        /// <summary>Occurs when a row's error text is needed.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowErrorTextNeeded"), Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridRowErrorTextNeededEventHandler RowErrorTextNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWERRORTEXTNEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWERRORTEXTNEEDED, value);
            }
        }

        /// <summary>Occurs when the user changes the contents of a row header cell.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowHeaderCellChanged"), Category("PropertyChanged")]
        public event GridRowEventHandler RowHeaderCellChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERCELLCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERCELLCHANGED, value);
            }
        }

        /// <summary>Occurs when the user clicks within the boundaries of a row header.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowHeaderMouseClick"), Category("Mouse")]
        public event GridCellMouseEventHandler RowHeaderMouseClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERMOUSECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERMOUSECLICK, value);
            }
        }

        /// <summary>Occurs when a row header is double-clicked.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowHeaderMouseDoubleClick"), Category("Mouse")]
        public event GridCellMouseEventHandler RowHeaderMouseDoubleClick
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERMOUSEDOUBLECLICK, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERMOUSEDOUBLECLICK, value);
            }
        }

        /// <summary>Occurs when the <see cref="P:MControl.GridView.Grid.RowHeadersBorderStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowHeadersBorderStyleChanged"), Category("PropertyChanged")]
        public event EventHandler RowHeadersBorderStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERSBORDERSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERSBORDERSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.RowHeadersDefaultCellStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridRowHeadersDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event EventHandler RowHeadersDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when value of the <see cref="P:MControl.GridView.Grid.RowHeadersWidth"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridRowHeadersWidthChanged"), Category("PropertyChanged")]
        public event EventHandler RowHeadersWidthChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERSWIDTHCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERSWIDTHCHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.RowHeadersWidthSizeMode"></see> property changes.</summary>
        [Description("Grid_RowHeadersWidthSizeModeChanged"), Category("PropertyChanged")]
        public event GridAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEADERSWIDTHSIZEMODECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEADERSWIDTHSIZEMODECHANGED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridRow.Height"></see> property for a row changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("PropertyChanged"), Description("Grid_RowHeightChanged")]
        public event GridRowEventHandler RowHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEIGHTCHANGED, value);
            }
        }

        /// <summary>Occurs when information about row height is requested. </summary>
        [Description("Grid_RowHeightInfoNeeded"), Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridRowHeightInfoNeededEventHandler RowHeightInfoNeeded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEIGHTINFONEEDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEIGHTINFONEEDED, value);
            }
        }

        /// <summary>Occurs when the user changes the height of a row.</summary>
        [EditorBrowsable(EditorBrowsableState.Advanced), Category("Data"), Description("Grid_RowHeightInfoPushed")]
        public event GridRowHeightInfoPushedEventHandler RowHeightInfoPushed
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWHEIGHTINFOPUSHED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWHEIGHTINFOPUSHED, value);
            }
        }

        /// <summary>Occurs when a row loses input focus and is no longer the current row.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Focus"), Description("Grid_RowLeave")]
        public event GridCellEventHandler RowLeave
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWLEAVE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWLEAVE, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.GridRow.MinimumHeight"></see> property for a row changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowMinimumHeightChanged"), Category("PropertyChanged")]
        public event GridRowEventHandler RowMinimumHeightChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWMINIMUMHEIGHTCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWMINIMUMHEIGHTCHANGED, value);
            }
        }

        /// <summary>Occurs after a <see cref="T:MControl.GridView.GridRow"></see> is painted.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Display"), Description("Grid_RowPostPaint")]
        public event GridRowPostPaintEventHandler RowPostPaint
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWPOSTPAINT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWPOSTPAINT, value);
            }
        }

        /// <summary>Occurs before a <see cref="T:MControl.GridView.GridRow"></see> is painted</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Display"), Description("Grid_RowPrePaint")]
        public event GridRowPrePaintEventHandler RowPrePaint
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWPREPAINT, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWPREPAINT, value);
            }
        }

        /// <summary>Occurs after a new row is added to the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        [Category("Action"), Description("Grid_RowsAdded")]
        public event GridRowsAddedEventHandler RowsAdded
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWSADDED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWSADDED, value);
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.RowsDefaultCellStyle"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("GridRowsDefaultCellStyleChanged"), Category("PropertyChanged")]
        public event EventHandler RowsDefaultCellStyleChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWSDEFAULTCELLSTYLECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWSDEFAULTCELLSTYLECHANGED, value);
            }
        }

        /// <summary>Occurs when a row or rows are deleted from the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        [Description("Grid_RowsRemoved"), Category("Action")]
        public event GridRowsRemovedEventHandler RowsRemoved
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWSREMOVED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWSREMOVED, value);
            }
        }

        /// <summary>Occurs when a row changes state, such as losing or gaining input focus.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowStateChanged"), Category("Behavior")]
        public event GridRowStateChangedEventHandler RowStateChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWSTATECHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWSTATECHANGED, value);
            }
        }

        /// <summary>Occurs when a row's state changes from shared to unshared.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowUnshared"), Category("Behavior"), EditorBrowsable(EditorBrowsableState.Advanced)]
        public event GridRowEventHandler RowUnshared
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWUNSHARED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWUNSHARED, value);
            }
        }

        /// <summary>Occurs after a row has finished validating.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Focus"), Description("Grid_RowValidated")]
        public event GridCellEventHandler RowValidated
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWVALIDATED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWVALIDATED, value);
            }
        }

        /// <summary>Occurs when a row is validating.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_RowValidating"), Category("Focus")]
        public event GridCellCancelEventHandler RowValidating
        {
            add
            {
                base.Events.AddHandler(EVENT_gridROWVALIDATING, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridROWVALIDATING, value);
            }
        }

        /// <summary>Occurs when the user scrolls through the control contents.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_Scroll"), Category("Action")]
        public event ScrollEventHandler Scroll
        {
            add
            {
                base.Events.AddHandler(EVENT_gridSCROLL, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridSCROLL, value);
            }
        }

        /// <summary>Occurs when the current selection changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Description("Grid_SelectionChanged"), Category("Action")]
        public event EventHandler SelectionChanged
        {
            add
            {
                base.Events.AddHandler(EVENT_gridSELECTIONCHANGED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridSELECTIONCHANGED, value);
            }
        }

        /// <summary>Occurs when the <see cref="T:MControl.GridView.Grid"></see> compares two cell values to perform a sort operation.</summary>
        [Category("Data"), EditorBrowsable(EditorBrowsableState.Advanced), Description("Grid_SortCompare")]
        public event GridSortCompareEventHandler SortCompare
        {
            add
            {
                base.Events.AddHandler(EVENT_gridSORTCOMPARE, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridSORTCOMPARE, value);
            }
        }

        /// <summary>Occurs when the <see cref="T:MControl.GridView.Grid"></see> control completes a sorting operation.</summary>
        [Description("Grid_Sorted"), Category("Data")]
        public event EventHandler Sorted
        {
            add
            {
                base.Events.AddHandler(EVENT_gridSORTED, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridSORTED, value);
            }
        }

        /// <summary>Occurs when the control style changes.</summary>
        /// <filterpriority>1</filterpriority>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public event EventHandler StyleChanged
        {
            add
            {
                base.StyleChanged += value;
            }
            remove
            {
                base.StyleChanged -= value;
            }
        }

        /// <summary>Occurs when the value of the <see cref="P:MControl.GridView.Grid.Text"></see> property changes.</summary>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public event EventHandler TextChanged
        {
            add
            {
                base.TextChanged += value;
            }
            remove
            {
                base.TextChanged -= value;
            }
        }

        /// <summary>Occurs when the user has finished adding a row to the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Action"), Description("Grid_UserAddedRow")]
        public event GridRowEventHandler UserAddedRow
        {
            add
            {
                base.Events.AddHandler(EVENT_gridUSERADDEDROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridUSERADDEDROW, value);
            }
        }

        /// <summary>Occurs when the user has finished deleting a row from the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Action"), Description("Grid_UserDeletedRow")]
        public event GridRowEventHandler UserDeletedRow
        {
            add
            {
                base.Events.AddHandler(EVENT_gridUSERDELETEDROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridUSERDELETEDROW, value);
            }
        }

        /// <summary>Occurs when the user deletes a row from the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <filterpriority>1</filterpriority>
        [Category("Action"), Description("Grid_UserDeletingRow")]
        public event GridRowCancelEventHandler UserDeletingRow
        {
            add
            {
                base.Events.AddHandler(EVENT_gridUSERDELETINGROW, value);
            }
            remove
            {
                base.Events.RemoveHandler(EVENT_gridUSERDELETINGROW, value);
            }
        }

        /// <summary>Initializes a new instance of the <see cref="T:MControl.GridView.Grid"></see> class.</summary>
        public Grid()
        {
            base.SetStyle(ControlStyles.UserMouse | ControlStyles.Opaque | ControlStyles.UserPaint, true);
            base.SetStyle(ControlStyles.SupportsTransparentBackColor, false);
            base.SetState2(0x800, true);
            this.gridState1 = new BitVector32(0);
            this.gridState2 = new BitVector32(0);
            this.gridOper = new BitVector32(0);
            this.gridState1[0x80001b] = true;
            this.gridState2[0x60003e7] = true;
            this.displayedBandsInfo = new DisplayedBandsData();
            this.lstRows = new ArrayList();
            this.converters = new Hashtable(8);
            this.pens = new Hashtable(8);
            this.brushes = new Hashtable(10);
            this.gridPen = new Pen(DefaultGridColor);
            this.selectedBandIndexes = new GridIntLinkedList();
            this.individualSelectedCells = new GridCellLinkedList();
            this.individualReadOnlyCells = new GridCellLinkedList();
            this.advancedCellBorderStyle = new GridAdvancedBorderStyle(this, GridAdvancedCellBorderStyle.OutsetDouble, GridAdvancedCellBorderStyle.OutsetPartial, GridAdvancedCellBorderStyle.InsetDouble);
            this.advancedRowHeadersBorderStyle = new GridAdvancedBorderStyle(this);
            this.advancedColumnHeadersBorderStyle = new GridAdvancedBorderStyle(this);
            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.Single;
            this.advancedRowHeadersBorderStyle.All = GridAdvancedCellBorderStyle.OutsetPartial;
            this.advancedColumnHeadersBorderStyle.All = GridAdvancedCellBorderStyle.OutsetPartial;
            this.borderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.gridState1[0x80] = true;
            this.selectionMode = GridSelectionMode.RowHeaderSelect;
            this.editMode = GridEditMode.EditOnKeystrokeOrF2;
            this.autoSizeRowsMode = GridAutoSizeRowsMode.None;
            this.autoSizeColumnsMode = GridAutoSizeColumnsMode.None;
            this.columnHeadersHeightSizeMode = GridColumnHeadersHeightSizeMode.EnableResizing;
            this.rowHeadersWidthSizeMode = GridRowHeadersWidthSizeMode.EnableResizing;
            this.clipboardCopyMode = GridClipboardCopyMode.EnableWithAutoHeaderText;
            this.layout = new LayoutData();
            this.layout.TopLeftHeader = Rectangle.Empty;
            this.layout.ColumnHeaders = Rectangle.Empty;
            this.layout.RowHeaders = Rectangle.Empty;
            this.layout.ColumnHeadersVisible = true;
            this.layout.RowHeadersVisible = true;
            this.layout.ClientRectangle = base.ClientRectangle;
            this.scrollBars = System.Windows.Forms.ScrollBars.Both;
            this.horizScrollBar.RightToLeft = RightToLeft.Inherit;
            this.horizScrollBar.AccessibleName = MControl.GridView.RM.GetString("Grid_AccHorizontalScrollBarAccName");
            this.horizScrollBar.Top = base.ClientRectangle.Height - this.horizScrollBar.Height;
            this.horizScrollBar.Left = 0;
            this.horizScrollBar.Visible = false;
            this.horizScrollBar.Scroll += new ScrollEventHandler(this.GridHScrolled);
            base.Controls.Add(this.horizScrollBar);
            this.vertScrollBar.Top = 0;
            this.vertScrollBar.AccessibleName = MControl.GridView.RM.GetString("Grid_AccVerticalScrollBarAccName");
            this.vertScrollBar.Left = base.ClientRectangle.Width - this.vertScrollBar.Width;
            this.vertScrollBar.Visible = false;
            this.vertScrollBar.Scroll += new ScrollEventHandler(this.GridVScrolled);
            base.Controls.Add(this.vertScrollBar);
            this.ptCurrentCell = new Point(-1, -1);
            this.ptAnchorCell = new Point(-1, -1);
            this.ptMouseDownCell = new Point(-2, -2);
            this.ptMouseEnteredCell = new Point(-2, -2);
            this.ptToolTipCell = new Point(-1, -1);
            this.ptMouseDownGridCoord = new Point(-1, -1);
            this.sortOrder = System.Windows.Forms.SortOrder.None;
            this.lastMouseClickInfo.timeStamp = 0L;
            this.WireScrollBarsEvents();
            base.PerformLayout();
            this.toolTipControl = new GridToolTip(this);
            base.Invalidate();
        }

        /// <summary>Notifies the accessible client applications when a new cell becomes the current cell. </summary>
        /// <param name="cellAddress">A <see cref="T:System.Drawing.Point"></see> indicating the row and column indexes of the new current cell.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:System.Drawing.Point.X"></see> property of cellAddress is less than 0 or greater than the number of columns in the control minus 1. -or-The value of the <see cref="P:System.Drawing.Point.Y"></see> property of cellAddress is less than 0 or greater than the number of rows in the control minus 1.</exception>
        protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
        {
            if ((cellAddress.X < 0) || (cellAddress.X >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("cellAddress");
            }
            if ((cellAddress.Y < 0) || (cellAddress.Y >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("cellAddress");
            }
            int num = this.Rows.GetRowCount(GridElementStates.Visible, 0, cellAddress.Y);
            int num2 = this.Columns.ColumnIndexToActualDisplayIndex(cellAddress.X, GridElementStates.Visible);
            int num3 = this.ColumnHeadersVisible ? 1 : 0;
            int num4 = this.RowHeadersVisible ? 1 : 0;
            int objectID = (num + num3) + 1;
            int childID = num2 + num4;
            if (base.ContainsFocus)
            {
                base.AccessibilityNotifyClients(AccessibleEvents.Focus, objectID, childID);
            }
            base.AccessibilityNotifyClients(AccessibleEvents.Selection, objectID, childID);
        }

        internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex)
        {
            this.toolTipCaption = toolTipText;
            this.ptToolTipCell = new Point(columnIndex, rowIndex);
            this.toolTipControl.Activate(activate);
        }

        internal void AddNewRow(bool createdByEditing)
        {
            this.Rows.AddInternal(true, null);
            this.newRowIndex = this.Rows.Count - 1;
            this.gridState1[0x200000] = createdByEditing;
            if (createdByEditing)
            {
                GridRowEventArgs e = new GridRowEventArgs(this.Rows[this.newRowIndex]);
                this.OnUserAddedRow(e);
            }
        }

        /// <summary>Adjusts the <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> for a column header cell of a <see cref="T:MControl.GridView.Grid"></see> that is currently being painted.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that represents the border style for the current column header.</returns>
        /// <param name="gridAdvancedBorderStylePlaceholder">A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that is used to store intermediate changes to the column header border style.</param>
        /// <param name="isFirstDisplayedColumn">true to indicate that the <see cref="T:MControl.GridView.GridCell"></see> that is currently being painted is in the first column displayed on the <see cref="T:MControl.GridView.Grid"></see>; otherwise, false.</param>
        /// <param name="gridAdvancedBorderStyleInput">A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that that represents the column header border style to modify.</param>
        /// <param name="isLastVisibleColumn">true to indicate that the <see cref="T:MControl.GridView.GridCell"></see> that is currently being painted is in the last column in the <see cref="T:MControl.GridView.Grid"></see> that has the <see cref="P:MControl.GridView.GridColumn.Visible"></see> property set to true; otherwise, false.</param>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual GridAdvancedBorderStyle AdjustColumnHeaderBorderStyle(GridAdvancedBorderStyle gridAdvancedBorderStyleInput, GridAdvancedBorderStyle gridAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
        {
            if (!this.ApplyVisualStylesToHeaderCells)
            {
                switch (gridAdvancedBorderStyleInput.All)
                {
                    case GridAdvancedCellBorderStyle.Single:
                        if (isFirstDisplayedColumn && !this.RowHeadersVisible)
                        {
                            return gridAdvancedBorderStyleInput;
                        }
                        if (this.RightToLeftInternal)
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.Single;
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.Single;
                        }
                        gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.Single;
                        gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Single;
                        return gridAdvancedBorderStylePlaceholder;

                    case GridAdvancedCellBorderStyle.Inset:
                    case GridAdvancedCellBorderStyle.Outset:
                        return gridAdvancedBorderStyleInput;

                    case GridAdvancedCellBorderStyle.InsetDouble:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Inset : GridAdvancedCellBorderStyle.InsetDouble;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.Inset;
                            }
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.Inset;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.Inset;
                            if (!isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.Inset;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Inset : GridAdvancedCellBorderStyle.InsetDouble;
                            }
                        }
                        gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.InsetDouble;
                        gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Inset;
                        return gridAdvancedBorderStylePlaceholder;

                    case GridAdvancedCellBorderStyle.OutsetDouble:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetDouble;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.Outset;
                            }
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.Outset;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.Outset;
                            if (!isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.Outset;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetDouble;
                            }
                        }
                        gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.OutsetDouble;
                        gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Outset;
                        return gridAdvancedBorderStylePlaceholder;

                    case GridAdvancedCellBorderStyle.OutsetPartial:
                        if (!this.RightToLeftInternal)
                        {
                            if (isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetDouble;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.OutsetPartial;
                            }
                            gridAdvancedBorderStylePlaceholder.RightInternal = isLastVisibleColumn ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetPartial;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = isLastVisibleColumn ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetPartial;
                            if (!isFirstDisplayedColumn)
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.OutsetPartial;
                            }
                            else
                            {
                                gridAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetDouble;
                            }
                        }
                        gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.OutsetDouble;
                        gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Outset;
                        return gridAdvancedBorderStylePlaceholder;
                }
                return gridAdvancedBorderStyleInput;
            }
            switch (gridAdvancedBorderStyleInput.All)
            {
                case GridAdvancedCellBorderStyle.Single:
                case GridAdvancedCellBorderStyle.Inset:
                case GridAdvancedCellBorderStyle.Outset:
                    if (isFirstDisplayedColumn && !this.RowHeadersVisible)
                    {
                        if (this.RightToLeftInternal)
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                            gridAdvancedBorderStylePlaceholder.RightInternal = gridAdvancedBorderStyleInput.All;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = gridAdvancedBorderStyleInput.All;
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                        }
                        gridAdvancedBorderStylePlaceholder.TopInternal = gridAdvancedBorderStyleInput.All;
                        gridAdvancedBorderStylePlaceholder.BottomInternal = gridAdvancedBorderStyleInput.All;
                        return gridAdvancedBorderStylePlaceholder;
                    }
                    gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                    gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                    gridAdvancedBorderStylePlaceholder.TopInternal = gridAdvancedBorderStyleInput.All;
                    gridAdvancedBorderStylePlaceholder.BottomInternal = gridAdvancedBorderStyleInput.All;
                    return gridAdvancedBorderStylePlaceholder;

                case GridAdvancedCellBorderStyle.InsetDouble:
                    if (!this.RightToLeftInternal)
                    {
                        if (isFirstDisplayedColumn)
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.None : GridAdvancedCellBorderStyle.InsetDouble;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                        }
                        gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                    }
                    else
                    {
                        gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                        if (!isFirstDisplayedColumn)
                        {
                            gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.None : GridAdvancedCellBorderStyle.Inset;
                        }
                    }
                    gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.InsetDouble;
                    gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Inset;
                    return gridAdvancedBorderStylePlaceholder;

                case GridAdvancedCellBorderStyle.OutsetDouble:
                case GridAdvancedCellBorderStyle.OutsetPartial:
                    if (!this.RightToLeftInternal)
                    {
                        if (isFirstDisplayedColumn)
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.None : GridAdvancedCellBorderStyle.OutsetDouble;
                        }
                        else
                        {
                            gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                        }
                        gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                        break;
                    }
                    gridAdvancedBorderStylePlaceholder.LeftInternal = GridAdvancedCellBorderStyle.None;
                    if (!isFirstDisplayedColumn)
                    {
                        gridAdvancedBorderStylePlaceholder.RightInternal = GridAdvancedCellBorderStyle.None;
                        break;
                    }
                    gridAdvancedBorderStylePlaceholder.RightInternal = this.RowHeadersVisible ? GridAdvancedCellBorderStyle.None : GridAdvancedCellBorderStyle.Outset;
                    break;

                default:
                    return gridAdvancedBorderStyleInput;
            }
            gridAdvancedBorderStylePlaceholder.TopInternal = GridAdvancedCellBorderStyle.OutsetDouble;
            gridAdvancedBorderStylePlaceholder.BottomInternal = GridAdvancedCellBorderStyle.Outset;
            return gridAdvancedBorderStylePlaceholder;
        }

        private bool AdjustExpandingColumn(GridColumn gridColumn, GridAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, int rowIndex)
        {
            if (!base.IsHandleCreated)
            {
                this.gridState2[0x100000] = true;
                return false;
            }
            bool flag = false;
            try
            {
                this.noAutoSizeCount++;
                GridRow row = this.Rows.SharedRow(rowIndex);
                int preferredWidth = row.Cells[gridColumn.Index].GetPreferredWidth(rowIndex, row.GetHeight(rowIndex));
                if (preferredWidth > 0x10000)
                {
                    preferredWidth = 0x10000;
                }
                if (gridColumn.Width < preferredWidth)
                {
                    gridColumn.ThicknessInternal = preferredWidth;
                    flag = true;
                }
            }
            finally
            {
                this.noAutoSizeCount--;
            }
            return flag;
        }

        private bool AdjustExpandingColumns(GridAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex)
        {
            bool flag = false;
            for (GridColumn column = this.Columns.GetFirstColumn(GridElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
            {
                GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                if ((inheritedAutoSizeMode & autoSizeColumnCriteriaFilter) != GridAutoSizeColumnCriteriaInternal.NotSet)
                {
                    flag |= this.AdjustExpandingColumn(column, inheritedAutoSizeMode, rowIndex);
                }
            }
            return flag;
        }

        private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth)
        {
            GridCell headerCell;
            int preferredHeight;
            int num3;
            int num4;
            int width = 0;
            if ((columnIndex > -1) && ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None))
            {
                headerCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                if (fixedWidth)
                {
                    width = this.Columns[columnIndex].Thickness;
                }
            }
            else
            {
                headerCell = this.Rows.SharedRow(rowIndex).HeaderCell;
                if (fixedWidth)
                {
                    width = this.RowHeadersWidth;
                }
            }
            if (fixedWidth)
            {
                preferredHeight = headerCell.GetPreferredHeight(rowIndex, width);
            }
            else
            {
                preferredHeight = headerCell.GetPreferredSize(rowIndex).Height;
            }
            this.Rows.SharedRow(rowIndex).GetHeightInfo(rowIndex, out num3, out num4);
            if (preferredHeight < num3)
            {
                preferredHeight = num3;
            }
            if (preferredHeight > 0x10000)
            {
                preferredHeight = 0x10000;
            }
            if (num3 != preferredHeight)
            {
                this.Rows[rowIndex].Thickness = preferredHeight;
            }
            return preferredHeight;
        }

        private void AdjustExpandingRows(int columnIndex, bool fixedWidth)
        {
            if (((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None) || (((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 1)) != GridAutoSizeRowsMode.None) && this.RowHeadersVisible))
            {
                if (!base.IsHandleCreated)
                {
                    this.gridState2[0x100000] = true;
                }
                else
                {
                    this.inBulkPaintCount++;
                    try
                    {
                        int num6;
                        if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 4)) != GridAutoSizeRowsMode.None)
                        {
                            this.inBulkLayoutCount++;
                            try
                            {
                                for (int i = this.Rows.GetFirstRow(GridElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, GridElementStates.Visible))
                                {
                                    GridCell headerCell;
                                    int preferredHeight;
                                    int width = 0;
                                    if ((columnIndex > -1) && ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None))
                                    {
                                        headerCell = this.Rows.SharedRow(i).Cells[columnIndex];
                                        if (fixedWidth)
                                        {
                                            width = this.Columns[columnIndex].Thickness;
                                        }
                                    }
                                    else
                                    {
                                        headerCell = this.Rows.SharedRow(i).HeaderCell;
                                        if (fixedWidth)
                                        {
                                            width = this.RowHeadersWidth;
                                        }
                                    }
                                    if (fixedWidth)
                                    {
                                        preferredHeight = headerCell.GetPreferredHeight(i, width);
                                    }
                                    else
                                    {
                                        preferredHeight = headerCell.GetPreferredSize(i).Height;
                                    }
                                    if (this.Rows.SharedRow(i).Height < preferredHeight)
                                    {
                                        this.Rows[i].Height = preferredHeight;
                                    }
                                }
                                return;
                            }
                            finally
                            {
                                this.ExitBulkLayout(false);
                            }
                        }
                        int height = this.layout.Data.Height;
                        int num5 = 0;
                        for (num6 = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen); (num6 != -1) && (num5 < height); num6 = this.Rows.GetNextRow(num6, GridElementStates.Visible | GridElementStates.Frozen))
                        {
                            num5 += this.AdjustExpandingRow(num6, columnIndex, fixedWidth);
                        }
                        if (num5 < height)
                        {
                            for (num6 = this.displayedBandsInfo.FirstDisplayedScrollingRow; (num6 != -1) && (num5 < height); num6 = this.Rows.GetNextRow(num6, GridElementStates.Visible))
                            {
                                num5 += this.AdjustExpandingRow(num6, columnIndex, fixedWidth);
                            }
                        }
                    }
                    finally
                    {
                        this.ExitBulkPaint(-1, -1);
                    }
                }
            }
        }

        internal void AdjustFillingColumn(GridColumn gridColumn, int width)
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAlterAutoFillColumnParameter"));
            }
            this.gridOper[0x80000] = true;
            try
            {
                if (this.Columns.GetColumnsWidth(GridElementStates.Visible) <= this.layout.Data.Width)
                {
                    int num = this.layout.Data.Width;
                    if ((base.DesignMode || (gridColumn == this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen))) || (gridColumn == this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.Frozen)))
                    {
                        float num2 = 0f;
                        int num3 = 0;
                        int num4 = 0;
                        bool flag = false;
                        foreach (GridColumn column in this.Columns)
                        {
                            if (!column.Visible)
                            {
                                continue;
                            }
                            if (column.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
                            {
                                num3 += column.Width;
                                if (column.Index != gridColumn.Index)
                                {
                                    num4 += column.MinimumWidth;
                                    flag = true;
                                }
                                num2 += column.FillWeight;
                                continue;
                            }
                            num4 += column.Width;
                            num -= column.Width;
                        }
                        if (!flag)
                        {
                            return;
                        }
                        int num5 = this.layout.Data.Width - num4;
                        if (width > num5)
                        {
                            width = num5;
                        }
                        float fillWeight = gridColumn.FillWeight;
                        float num7 = (width * num2) / ((float) num3);
                        bool flag2 = false;
                        foreach (GridColumn column2 in this.Columns)
                        {
                            if (((column2.Index == gridColumn.Index) || !column2.Visible) || (column2.InheritedAutoSizeMode != GridAutoSizeColumnMode.Fill))
                            {
                                continue;
                            }
                            column2.FillWeightInternal = ((num2 - num7) * column2.FillWeight) / (num2 - fillWeight);
                            if (column2.FillWeight < ((column2.MinimumWidth * num2) / ((float) num3)))
                            {
                                flag2 = true;
                                column2.DesiredFillWidth = -1;
                                continue;
                            }
                            column2.DesiredFillWidth = 0;
                        }
                        gridColumn.FillWeightInternal = num7;
                        if (flag2)
                        {
                            float num8 = num2;
                            float num9 = num2;
                            float num10 = 0f;
                            foreach (GridColumn column3 in this.Columns)
                            {
                                if (!column3.Visible || (column3.InheritedAutoSizeMode != GridAutoSizeColumnMode.Fill))
                                {
                                    continue;
                                }
                                if (column3.Index == gridColumn.Index)
                                {
                                    column3.UsedFillWeight = column3.FillWeight;
                                    num8 -= column3.UsedFillWeight;
                                    num9 -= column3.FillWeight;
                                    num10 += column3.UsedFillWeight;
                                    continue;
                                }
                                if (column3.DesiredFillWidth == -1)
                                {
                                    column3.UsedFillWeight = (num2 * column3.MinimumWidth) / ((float) num3);
                                    num8 -= column3.UsedFillWeight;
                                    num9 -= column3.FillWeight;
                                    num10 += column3.UsedFillWeight;
                                }
                            }
                            foreach (GridColumn column4 in this.Columns)
                            {
                                if (((column4.Index != gridColumn.Index) && column4.Visible) && ((column4.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) && (column4.DesiredFillWidth != -1)))
                                {
                                    column4.UsedFillWeight = Math.Max((float) ((column4.FillWeight * num8) / num9), (float) ((num2 * column4.MinimumWidth) / ((float) num3)));
                                    num10 += column4.UsedFillWeight;
                                }
                            }
                            gridColumn.UsedFillWeight += num2 - num10;
                        }
                        else
                        {
                            foreach (GridColumn column5 in this.Columns)
                            {
                                if (column5.Visible && (column5.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill))
                                {
                                    column5.UsedFillWeight = column5.FillWeight;
                                }
                            }
                        }
                    }
                    else
                    {
                        int num11 = 0;
                        float num12 = 0f;
                        float num13 = 0f;
                        bool flag3 = false;
                        foreach (GridColumn column6 in this.Columns)
                        {
                            if (!column6.Visible)
                            {
                                continue;
                            }
                            if (column6.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
                            {
                                if (column6.Index != gridColumn.Index)
                                {
                                    if (this.Columns.DisplayInOrder(gridColumn.Index, column6.Index))
                                    {
                                        num11 += column6.MinimumWidth;
                                        num13 += column6.FillWeight;
                                    }
                                    else
                                    {
                                        num11 += column6.Width;
                                    }
                                    flag3 = true;
                                }
                                num12 += column6.FillWeight;
                                continue;
                            }
                            num11 += column6.Width;
                            num -= column6.Width;
                        }
                        if (!flag3)
                        {
                            return;
                        }
                        int num14 = this.layout.Data.Width - num11;
                        if (width > num14)
                        {
                            width = num14;
                        }
                        float num15 = gridColumn.FillWeight;
                        float num16 = (num12 * width) / ((float) num);
                        float num17 = (num13 + num15) - num16;
                        foreach (GridColumn column7 in this.Columns)
                        {
                            if (((column7.Index != gridColumn.Index) && column7.Visible) && ((column7.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) && this.Columns.DisplayInOrder(gridColumn.Index, column7.Index)))
                            {
                                column7.FillWeightInternal = (column7.FillWeight * num17) / num13;
                            }
                        }
                        gridColumn.FillWeightInternal = num16;
                        bool flag4 = false;
                        foreach (GridColumn column8 in this.Columns)
                        {
                            if (!column8.Visible || (column8.InheritedAutoSizeMode != GridAutoSizeColumnMode.Fill))
                            {
                                continue;
                            }
                            if (column8.FillWeight < ((column8.MinimumWidth * num12) / ((float) num)))
                            {
                                flag4 = true;
                                column8.DesiredFillWidth = -1;
                                continue;
                            }
                            column8.DesiredFillWidth = 0;
                        }
                        if (flag4)
                        {
                            float num18 = num12;
                            float num19 = num12;
                            float num20 = 0f;
                            foreach (GridColumn column9 in this.Columns)
                            {
                                if (!column9.Visible || (column9.InheritedAutoSizeMode != GridAutoSizeColumnMode.Fill))
                                {
                                    continue;
                                }
                                if ((column9.Index == gridColumn.Index) || this.Columns.DisplayInOrder(column9.Index, gridColumn.Index))
                                {
                                    if (column9.Index == gridColumn.Index)
                                    {
                                        column9.UsedFillWeight = column9.FillWeight;
                                    }
                                    else
                                    {
                                        column9.UsedFillWeight = (num12 * column9.Width) / ((float) num);
                                    }
                                    num18 -= column9.UsedFillWeight;
                                    num19 -= column9.FillWeight;
                                    num20 += column9.UsedFillWeight;
                                    continue;
                                }
                                if (column9.DesiredFillWidth == -1)
                                {
                                    column9.UsedFillWeight = (num12 * column9.MinimumWidth) / ((float) num);
                                    num18 -= column9.UsedFillWeight;
                                    num19 -= column9.FillWeight;
                                    num20 += column9.UsedFillWeight;
                                }
                            }
                            foreach (GridColumn column10 in this.Columns)
                            {
                                if ((this.Columns.DisplayInOrder(gridColumn.Index, column10.Index) && column10.Visible) && ((column10.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) && (column10.DesiredFillWidth != -1)))
                                {
                                    column10.UsedFillWeight = Math.Max((float) ((column10.FillWeight * num18) / num19), (float) ((num12 * column10.MinimumWidth) / ((float) num)));
                                    num20 += column10.UsedFillWeight;
                                }
                            }
                            gridColumn.UsedFillWeight += num12 - num20;
                        }
                        else
                        {
                            foreach (GridColumn column11 in this.Columns)
                            {
                                if (column11.Visible && (column11.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill))
                                {
                                    column11.UsedFillWeight = column11.FillWeight;
                                }
                            }
                        }
                    }
                    this.gridState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num;
                    this.PerformLayoutPrivate(false, true, false, false);
                }
            }
            finally
            {
                this.gridOper[0x80000] = false;
            }
        }

        private bool AdjustFillingColumns()
        {
            if (this.gridOper[0x40000])
            {
                return false;
            }
            this.gridOper[0x40000] = true;
            bool flag = false;
            try
            {
                int num9;
                int num = 0;
                int num2 = 0;
                int num3 = 0;
                float num4 = 0f;
                ArrayList list = null;
                foreach (GridColumn column in this.Columns)
                {
                    if (!column.Visible)
                    {
                        continue;
                    }
                    if (column.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
                    {
                        num++;
                        num3 += (column.DesiredMinimumWidth > 0) ? column.DesiredMinimumWidth : column.MinimumWidth;
                        num4 += column.FillWeight;
                        if (list == null)
                        {
                            list = new ArrayList(this.Columns.Count);
                        }
                        list.Add(column);
                        continue;
                    }
                    num2 += column.Width;
                }
                if (num <= 0)
                {
                    return flag;
                }
                int num5 = this.layout.Data.Width - num2;
                if ((this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical))
                {
                    int rowCount = this.Rows.GetRowCount(GridElementStates.Visible);
                    int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible);
                    int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                    this.ComputeVisibleRows();
                    if ((((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen)))) && (((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)) && (this.layout.Data.Height > totalVisibleFrozenHeight))) && (SystemInformation.VerticalScrollBarWidth <= this.layout.Data.Width))
                    {
                        num5 -= SystemInformation.VerticalScrollBarWidth;
                    }
                }
                if (num5 <= num3)
                {
                    num5 = 0;
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        GridColumn column2 = (GridColumn) list[num9];
                        int num10 = (column2.DesiredMinimumWidth > 0) ? column2.DesiredMinimumWidth : column2.MinimumWidth;
                        if (column2.Thickness != num10)
                        {
                            flag = true;
                            column2.ThicknessInternal = num10;
                        }
                        num5 += column2.Thickness;
                    }
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        GridColumn column3 = (GridColumn) list[num9];
                        column3.UsedFillWeight = (column3.Width * num4) / ((float) num5);
                    }
                    this.gridState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num5;
                    return flag;
                }
                int num11 = 0;
                if (this.gridState2[0x4000000])
                {
                    bool flag2 = false;
                    for (num9 = 0; num9 < list.Count; num9++)
                    {
                        GridColumn column4 = (GridColumn) list[num9];
                        if (num9 == (list.Count - 1))
                        {
                            column4.DesiredFillWidth = num5 - num11;
                        }
                        else
                        {
                            float num12 = (column4.FillWeight / num4) * num5;
                            column4.DesiredFillWidth = (int) Math.Round((double) num12, MidpointRounding.AwayFromZero);
                            num11 += column4.DesiredFillWidth;
                        }
                        int num13 = (column4.DesiredMinimumWidth > 0) ? column4.DesiredMinimumWidth : column4.MinimumWidth;
                        if (column4.DesiredFillWidth < num13)
                        {
                            flag2 = true;
                            column4.DesiredFillWidth = -1;
                        }
                    }
                    if (flag2)
                    {
                        float num14 = num4;
                        float num15 = num4;
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            GridColumn column5 = (GridColumn) list[num9];
                            if (column5.DesiredFillWidth == -1)
                            {
                                int num16 = (column5.DesiredMinimumWidth > 0) ? column5.DesiredMinimumWidth : column5.MinimumWidth;
                                column5.UsedFillWeight = (num4 * num16) / ((float) num5);
                                num14 -= column5.UsedFillWeight;
                                num15 -= column5.FillWeight;
                            }
                        }
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            GridColumn column6 = (GridColumn) list[num9];
                            if (column6.DesiredFillWidth != -1)
                            {
                                column6.UsedFillWeight = (column6.FillWeight * num14) / num15;
                            }
                        }
                    }
                    else
                    {
                        num9 = 0;
                        while (num9 < list.Count)
                        {
                            GridColumn column7 = (GridColumn) list[num9];
                            column7.UsedFillWeight = column7.FillWeight;
                            num9++;
                        }
                    }
                    this.gridState2[0x4000000] = false;
                    this.availableWidthForFillColumns = num5;
                }
                else if (num5 != this.availableWidthForFillColumns)
                {
                    if (num5 > this.availableWidthForFillColumns)
                    {
                        int num17 = num5 - this.availableWidthForFillColumns;
                        num9 = 0;
                        while (num9 < list.Count)
                        {
                            GridColumn column8 = (GridColumn) list[num9];
                            column8.DesiredFillWidth = column8.Width;
                            num9++;
                        }
                        float[] numArray = new float[list.Count];
                        for (int i = 0; i < num17; i++)
                        {
                            float num19 = 0f;
                            bool flag3 = false;
                            num9 = 0;
                            while (num9 < list.Count)
                            {
                                GridColumn column9 = (GridColumn) list[num9];
                                num19 += column9.FillWeight / column9.UsedFillWeight;
                                if (column9.DesiredFillWidth <= column9.MinimumWidth)
                                {
                                    flag3 = true;
                                }
                                num9++;
                            }
                            num9 = 0;
                            while (num9 < list.Count)
                            {
                                GridColumn column10 = (GridColumn) list[num9];
                                if (i == 0)
                                {
                                    numArray[num9] = (this.availableWidthForFillColumns * column10.UsedFillWeight) / num4;
                                }
                                if (flag3)
                                {
                                    numArray[num9] += (column10.FillWeight / column10.UsedFillWeight) / num19;
                                }
                                else
                                {
                                    numArray[num9] += column10.FillWeight / num4;
                                }
                                num9++;
                            }
                        }
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            GridColumn column11 = (GridColumn) list[num9];
                            column11.UsedFillWeight = (num4 / ((float) num5)) * numArray[num9];
                        }
                    }
                    else
                    {
                        bool flag4;
                        int num20 = this.availableWidthForFillColumns - num5;
                        for (num9 = 0; num9 < list.Count; num9++)
                        {
                            GridColumn column12 = (GridColumn) list[num9];
                            column12.DesiredFillWidth = column12.Width;
                        }
                        do
                        {
                            flag4 = false;
                            float num21 = 0f;
                            float num22 = 0f;
                            GridColumn column13 = null;
                            for (num9 = 0; num9 < list.Count; num9++)
                            {
                                GridColumn column14 = (GridColumn) list[num9];
                                if (column14.DesiredFillWidth > column14.MinimumWidth)
                                {
                                    float num23 = column14.UsedFillWeight / column14.FillWeight;
                                    num22 += num23;
                                    if (num23 > num21)
                                    {
                                        column13 = column14;
                                        num21 = num23;
                                    }
                                }
                            }
                            if (column13 != null)
                            {
                                float minimumWidth = ((this.availableWidthForFillColumns * column13.UsedFillWeight) / num4) - (((num20 * column13.UsedFillWeight) / column13.FillWeight) / num22);
                                if (minimumWidth < column13.MinimumWidth)
                                {
                                    minimumWidth = column13.MinimumWidth;
                                }
                                int desiredFillWidth = column13.DesiredFillWidth;
                                column13.DesiredFillWidth = Math.Min(desiredFillWidth, (int) Math.Round((double) minimumWidth, MidpointRounding.AwayFromZero));
                                flag4 = desiredFillWidth != column13.DesiredFillWidth;
                                if ((!flag4 && (num20 == 1)) && (desiredFillWidth > column13.MinimumWidth))
                                {
                                    column13.DesiredFillWidth--;
                                    flag4 = true;
                                }
                                num20 -= desiredFillWidth - column13.DesiredFillWidth;
                                if (flag4)
                                {
                                    this.availableWidthForFillColumns -= desiredFillWidth - column13.DesiredFillWidth;
                                    num9 = 0;
                                    while (num9 < list.Count)
                                    {
                                        GridColumn column15 = (GridColumn) list[num9];
                                        column15.UsedFillWeight = (num4 / ((float) this.availableWidthForFillColumns)) * column15.DesiredFillWidth;
                                        num9++;
                                    }
                                }
                            }
                        }
                        while (flag4 && (num20 > 0));
                    }
                    this.availableWidthForFillColumns = num5;
                }
                try
                {
                    this.gridState2[0x2000000] = false;
                    num11 = 0;
                    float num26 = 0f;
                    while (list.Count > 0)
                    {
                        GridColumn column16 = null;
                        if (list.Count == 1)
                        {
                            column16 = (GridColumn) list[0];
                            column16.DesiredFillWidth = Math.Max(num5 - num11, column16.MinimumWidth);
                            list.Clear();
                        }
                        else
                        {
                            float num27 = 0f;
                            for (num9 = 0; num9 < list.Count; num9++)
                            {
                                GridColumn column17 = (GridColumn) list[num9];
                                float num28 = Math.Abs((float) (column17.UsedFillWeight - column17.FillWeight)) / column17.FillWeight;
                                if ((num28 > num27) || (column16 == null))
                                {
                                    column16 = column17;
                                    num27 = num28;
                                }
                            }
                            float num29 = ((column16.UsedFillWeight * num5) / num4) + num26;
                            column16.DesiredFillWidth = Math.Max(column16.MinimumWidth, (int) Math.Round((double) num29, MidpointRounding.AwayFromZero));
                            num26 = num29 - column16.DesiredFillWidth;
                            num11 += column16.DesiredFillWidth;
                            list.Remove(column16);
                        }
                        if (column16.DesiredFillWidth != column16.Thickness)
                        {
                            flag = true;
                            column16.ThicknessInternal = column16.DesiredFillWidth;
                        }
                    }
                    return flag;
                }
                finally
                {
                    this.gridState2[0x2000000] = true;
                }
            }
            finally
            {
                this.gridOper[0x40000] = false;
            }
            return flag;
        }

        private void AdjustShrinkingRows(GridAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing)
        {
            if (((autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None) || (((autoSizeRowsMode & ((GridAutoSizeRowsMode) 1)) != GridAutoSizeRowsMode.None) && this.RowHeadersVisible))
            {
                this.inBulkPaintCount++;
                try
                {
                    int nextRow;
                    if ((autoSizeRowsMode & ((GridAutoSizeRowsMode) 4)) != GridAutoSizeRowsMode.None)
                    {
                        this.inBulkLayoutCount++;
                        try
                        {
                            for (int i = this.Rows.GetFirstRow(GridElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, GridElementStates.Visible))
                            {
                                this.AutoResizeRowInternal(i, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                            }
                            return;
                        }
                        finally
                        {
                            this.ExitBulkLayout(false);
                        }
                    }
                    int height = this.layout.Data.Height;
                    int num3 = 0;
                    for (nextRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen); (nextRow != -1) && (num3 < height); nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible | GridElementStates.Frozen))
                    {
                        this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                        num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                    }
                    if (num3 < height)
                    {
                        int num5 = num3;
                        int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        nextRow = firstDisplayedScrollingRow;
                        while (((nextRow != -1) && (num3 < height)) && (firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow))
                        {
                            this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                            num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                            nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                        }
                        do
                        {
                            firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            if (num3 < height)
                            {
                                int rowIndex = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, GridElementStates.Visible, GridElementStates.Frozen);
                                if (rowIndex != -1)
                                {
                                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                                }
                            }
                            num3 = num5;
                            for (nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow; (nextRow != -1) && (num3 < height); nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible))
                            {
                                this.AutoResizeRowInternal(nextRow, MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
                                num3 += this.Rows.SharedRow(nextRow).GetHeight(nextRow);
                            }
                        }
                        while (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    }
                }
                finally
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        /// <summary>Returns a value indicating whether all the <see cref="T:MControl.GridView.Grid"></see> cells are currently selected.</summary>
        /// <returns>true if all cells (or all visible cells) are selected or if there are no cells (or no visible cells); otherwise, false.</returns>
        /// <param name="includeInvisibleCells">true to include the rows and columns with <see cref="P:MControl.GridView.GridBand.Visible"></see> property values of false; otherwise, false. </param>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public bool AreAllCellsSelected(bool includeInvisibleCells)
        {
            bool flag;
            if ((this.Columns.Count == 0) && (this.Rows.Count == 0))
            {
                return true;
            }
            if (!includeInvisibleCells && ((this.Rows.GetFirstRow(GridElementStates.Visible) == -1) || (this.Columns.GetFirstColumn(GridElementStates.Visible) == null)))
            {
                return true;
            }
            GridRow row = null;
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                    flag = this.individualSelectedCells.Count == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (int i = this.Rows.GetFirstRow(GridElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, GridElementStates.Visible))
                        {
                            row = this.Rows[i];
                            for (GridColumn column = this.Columns.GetFirstColumn(GridElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
                            {
                                if (!row.Cells[column.Index].Selected)
                                {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }
                    return flag;

                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                    flag = ((this.selectedBandIndexes.Count * this.Columns.Count) + this.individualSelectedCells.Count) == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (int j = this.Rows.GetFirstRow(GridElementStates.Visible); j != -1; j = this.Rows.GetNextRow(j, GridElementStates.Visible))
                        {
                            if ((this.Rows.GetRowState(j) & GridElementStates.Selected) == GridElementStates.None)
                            {
                                row = this.Rows[j];
                                for (GridColumn column3 = this.Columns.GetFirstColumn(GridElementStates.Visible); column3 != null; column3 = this.Columns.GetNextColumn(column3, GridElementStates.Visible, GridElementStates.None))
                                {
                                    if (!row.Cells[column3.Index].Selected)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                    return flag;

                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                    flag = ((this.selectedBandIndexes.Count * this.Rows.Count) + this.individualSelectedCells.Count) == (this.Columns.Count * this.Rows.Count);
                    if (!flag && !includeInvisibleCells)
                    {
                        for (GridColumn column2 = this.Columns.GetFirstColumn(GridElementStates.Visible); column2 != null; column2 = this.Columns.GetNextColumn(column2, GridElementStates.Visible, GridElementStates.None))
                        {
                            if (!this.selectedBandIndexes.Contains(column2.Index))
                            {
                                for (int k = this.Rows.GetFirstRow(GridElementStates.Visible); k != -1; k = this.Rows.GetNextRow(k, GridElementStates.Visible))
                                {
                                    row = this.Rows[k];
                                    if (!row.Cells[column2.Index].Selected)
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                        return true;
                    }
                    return flag;
            }
            return false;
        }

        //internal override void AssignParent(Control value)
        //{
        //    if (this.toolTipControl.Activated)
        //    {
        //        this.toolTipControl.Activate(false);
        //    }
        //    base.AssignParent(value);
        //}

        private void AutoGenerateDataBoundColumns(GridColumn[] boundColumns)
        {
            int num2;
            GridColumn[] columnArray2;
            GridColumnCollection columns = this.Columns;
            GridColumn[] sourceArray = new GridColumn[columns.Count];
            int index = 0;
            for (num2 = 0; num2 < columns.Count; num2++)
            {
                if (((this.DataSource != null) && !string.IsNullOrEmpty(columns[num2].DataPropertyName)) && !columns[num2].IsDataBound)
                {
                    this.MapGridColumnToDataBoundField(columns[num2]);
                }
                if ((columns[num2].IsDataBound && (this.dataConnection != null)) && (this.dataConnection.BoundColumnIndex(columns[num2].DataPropertyName) != -1))
                {
                    sourceArray[index] = (GridColumn) columns[num2].Clone();
                    sourceArray[index].DisplayIndex = columns[num2].DisplayIndex;
                    index++;
                }
            }
            num2 = 0;
            while (num2 < columns.Count)
            {
                if (columns[num2].IsDataBound)
                {
                    columns.RemoveAtInternal(num2, true);
                }
                else
                {
                    num2++;
                }
            }
            if (sourceArray.Length == index)
            {
                columnArray2 = sourceArray;
            }
            else
            {
                columnArray2 = new GridColumn[index];
                Array.Copy(sourceArray, columnArray2, index);
            }
            Array.Sort(columnArray2, GridColumnCollection.ColumnCollectionOrderComparer);
            if (boundColumns != null)
            {
                for (int i = 0; i < boundColumns.Length; i++)
                {
                    if ((boundColumns[i] != null) && boundColumns[i].IsBrowsableInternal)
                    {
                        bool flag = true;
                        int num4 = 0;
                        while (num4 < index)
                        {
                            if ((columnArray2[num4] != null) && (string.Compare(columnArray2[num4].DataPropertyName, boundColumns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                            {
                                flag = false;
                                break;
                            }
                            num4++;
                        }
                        if (flag)
                        {
                            columns.Add(boundColumns[i]);
                        }
                        else
                        {
                            columns.Add(columnArray2[num4]);
                            this.MapGridColumnToDataBoundField(columnArray2[num4]);
                            columnArray2[num4] = null;
                        }
                    }
                }
            }
            if (index > 0)
            {
                for (int j = 0; j < columnArray2.Length; j++)
                {
                    if (columnArray2[j] != null)
                    {
                        columns.Add(columnArray2[j]);
                        this.MapGridColumnToDataBoundField(columnArray2[j]);
                    }
                }
            }
        }

        private bool AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight)
        {
            bool flag = false;
            for (GridColumn column = this.Columns.GetFirstColumn(GridElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
            {
                GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                if ((inheritedAutoSizeMode & autoSizeColumnCriteriaFilter) != GridAutoSizeColumnCriteriaInternal.NotSet)
                {
                    flag |= this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                }
            }
            return flag;
        }

        /// <summary>Adjusts the width of the specified column to fit the contents of all its cells, including the header cell. </summary>
        /// <param name="columnIndex">The index of the column to resize.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        public void AutoResizeColumn(int columnIndex)
        {
            this.AutoResizeColumn(columnIndex, GridAutoSizeColumnMode.AllCells);
        }

        /// <summary>Adjusts the width of the specified column using the specified size mode.</summary>
        /// <param name="columnIndex">The index of the column to resize. </param>
        /// <param name="autoSizeColumnMode">One of the <see cref="T:MControl.GridView.GridAutoSizeColumnMode"></see> values. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeColumnMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnMode.ColumnHeader"></see> and <see cref="P:MControl.GridView.Grid.ColumnHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ArgumentException">autoSizeColumnMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnMode.NotSet"></see>, <see cref="F:MControl.GridView.GridAutoSizeColumnMode.None"></see>, or <see cref="F:MControl.GridView.GridAutoSizeColumnMode.Fill"></see>. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeColumnMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeColumnMode"></see> value.</exception>
        public void AutoResizeColumn(int columnIndex, GridAutoSizeColumnMode autoSizeColumnMode)
        {
            this.AutoResizeColumn(columnIndex, autoSizeColumnMode, true);
        }

        /// <summary>Adjusts the width of the specified column using the specified size mode, optionally calculating the width with the expectation that row heights will subsequently be adjusted. </summary>
        /// <param name="columnIndex">The index of the column to resize. </param>
        /// <param name="autoSizeColumnMode">One of the <see cref="T:MControl.GridView.GridAutoSizeColumnMode"></see> values. </param>
        /// <param name="fixedHeight">true to calculate the new width based on the current row heights; false to calculate the width with the expectation that the row heights will also be adjusted.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeColumnMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnMode.ColumnHeader"></see> and <see cref="P:MControl.GridView.Grid.ColumnHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ArgumentException">autoSizeColumnMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnMode.NotSet"></see>, <see cref="F:MControl.GridView.GridAutoSizeColumnMode.None"></see>, or <see cref="F:MControl.GridView.GridAutoSizeColumnMode.Fill"></see>. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeColumnMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeColumnMode"></see> value.</exception>
        protected void AutoResizeColumn(int columnIndex, GridAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
        {
            if (((autoSizeColumnMode == GridAutoSizeColumnMode.NotSet) || (autoSizeColumnMode == GridAutoSizeColumnMode.None)) || (autoSizeColumnMode == GridAutoSizeColumnMode.Fill))
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_NeedColumnAutoSizingCriteria", new object[] { "autoSizeColumnMode" }));
            }
            switch (autoSizeColumnMode)
            {
                case GridAutoSizeColumnMode.NotSet:
                case GridAutoSizeColumnMode.None:
                case GridAutoSizeColumnMode.ColumnHeader:
                case GridAutoSizeColumnMode.AllCellsExceptHeader:
                case GridAutoSizeColumnMode.AllCells:
                case GridAutoSizeColumnMode.DisplayedCellsExceptHeader:
                case GridAutoSizeColumnMode.DisplayedCells:
                case GridAutoSizeColumnMode.Fill:
                    if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndex");
                    }
                    if ((autoSizeColumnMode == GridAutoSizeColumnMode.ColumnHeader) && !this.ColumnHeadersVisible)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeInvisibleColumnHeader"));
                    }
                    this.AutoResizeColumnInternal(columnIndex, (GridAutoSizeColumnCriteriaInternal) autoSizeColumnMode, fixedHeight);
                    return;
            }
            throw new InvalidEnumArgumentException("autoSizeColumnMode", (int) autoSizeColumnMode, typeof(GridAutoSizeColumnMode));
        }

        /// <summary>Adjusts the height of the column headers to fit the contents of the largest column header.</summary>
        public void AutoResizeColumnHeadersHeight()
        {
            this.AutoResizeColumnHeadersHeight(true, true);
        }

        /// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column.</summary>
        /// <param name="columnIndex">The index of the column containing the header with the changed content.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1.</exception>
        public void AutoResizeColumnHeadersHeight(int columnIndex)
        {
            this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
        }

        /// <summary>Adjusts the height of the column headers to fit their contents, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
        /// <param name="fixedRowHeadersWidth">true to calculate the new height based on the current width of the row headers; false to calculate the height with the expectation that the row headers width will also be adjusted. </param>
        /// <param name="fixedColumnsWidth">true to calculate the new height based on the current column widths; false to calculate the height with the expectation that the column widths will also be adjusted.</param>
        protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
        {
            if (this.ColumnHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.gridState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        this.noAutoSizeCount++;
                        int preferredHeight = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if (fixedRowHeadersWidth)
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
                            }
                            else
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
                            }
                        }
                        int count = this.Columns.Count;
                        for (int i = 0; i < count; i++)
                        {
                            if (this.Columns[i].Visible)
                            {
                                if (fixedColumnsWidth)
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
                                }
                                else
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
                                }
                            }
                        }
                        if (preferredHeight < 4)
                        {
                            preferredHeight = 4;
                        }
                        if (preferredHeight > 0x8000)
                        {
                            preferredHeight = 0x8000;
                        }
                        if (preferredHeight != this.ColumnHeadersHeight)
                        {
                            this.SetColumnHeadersHeightInternal(preferredHeight, !fixedColumnsWidth);
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        /// <summary>Adjusts the height of the column headers based on changes to the contents of the header in the specified column, optionally calculating the height with the expectation that the column and/or row header widths will subsequently be adjusted.</summary>
        /// <param name="fixedRowHeadersWidth">true to calculate the new height based on the current width of the row headers; false to calculate the height with the expectation that the row headers width will also be adjusted.</param>
        /// <param name="columnIndex">The index of the column header whose contents should be used to determine new height.</param>
        /// <param name="fixedColumnWidth">true to calculate the new height based on the current width of the specified column; false to calculate the height with the expectation that the column width will also be adjusted.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if (this.ColumnHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.gridState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        this.noAutoSizeCount++;
                        int preferredHeight = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if ((columnIndex != -1) || fixedRowHeadersWidth)
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
                            }
                            else
                            {
                                preferredHeight = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
                            }
                        }
                        int count = this.Columns.Count;
                        for (int i = 0; i < count; i++)
                        {
                            if (this.Columns[i].Visible)
                            {
                                if ((columnIndex != i) || fixedColumnWidth)
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
                                }
                                else
                                {
                                    preferredHeight = Math.Max(preferredHeight, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
                                }
                            }
                        }
                        if (preferredHeight < 4)
                        {
                            preferredHeight = 4;
                        }
                        if (preferredHeight > 0x8000)
                        {
                            preferredHeight = 0x8000;
                        }
                        if (preferredHeight != this.ColumnHeadersHeight)
                        {
                            this.SetColumnHeadersHeightInternal(preferredHeight, !fixedColumnWidth);
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        private bool AutoResizeColumnInternal(int columnIndex, GridAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight)
        {
            if (!base.IsHandleCreated)
            {
                this.gridState2[0x100000] = true;
                return false;
            }
            bool flag = false;
            try
            {
                this.noAutoSizeCount++;
                GridColumn gridColumn = this.Columns[columnIndex];
                int preferredWidth = gridColumn.GetPreferredWidth((GridAutoSizeColumnMode) autoSizeColumnCriteriaInternal, fixedHeight);
                if (preferredWidth < gridColumn.MinimumThickness)
                {
                    preferredWidth = gridColumn.MinimumThickness;
                }
                if (preferredWidth > 0x10000)
                {
                    preferredWidth = 0x10000;
                }
                if (preferredWidth == gridColumn.Thickness)
                {
                    return flag;
                }
                if (gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
                {
                    this.AdjustFillingColumn(gridColumn, preferredWidth);
                }
                else
                {
                    this.Columns[columnIndex].ThicknessInternal = preferredWidth;
                }
                flag = true;
            }
            finally
            {
                this.noAutoSizeCount--;
            }
            return flag;
        }

        /// <summary>Adjusts the width of all columns to fit the contents of all their cells, including the header cells.</summary>
        public void AutoResizeColumns()
        {
            this.AutoResizeColumns(GridAutoSizeColumnsMode.AllCells);
        }

        /// <summary>Adjusts the width of all columns using the specified size mode.</summary>
        /// <param name="autoSizeColumnsMode">One of the <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> values. </param>
        /// <exception cref="T:System.ArgumentException">autoSizeColumnsMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.None"></see> or <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.Fill"></see>. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeColumnsMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> value.</exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeColumnsMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.ColumnHeader"></see> and <see cref="P:MControl.GridView.Grid.ColumnHeadersVisible"></see> is false. </exception>
        public void AutoResizeColumns(GridAutoSizeColumnsMode autoSizeColumnsMode)
        {
            this.AutoResizeColumns(autoSizeColumnsMode, true);
        }

        /// <summary>Adjusts the width of all columns using the specified size mode, optionally calculating the widths with the expectation that row heights will subsequently be adjusted. </summary>
        /// <param name="autoSizeColumnsMode">One of the <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> values. </param>
        /// <param name="fixedHeight">true to calculate the new widths based on the current row heights; false to calculate the widths with the expectation that the row heights will also be adjusted.</param>
        /// <exception cref="T:System.ArgumentException">autoSizeColumnsMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.None"></see> or <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.Fill"></see>. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeColumnsMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> value.</exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeColumnsMode has the value <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.ColumnHeader"></see> and <see cref="P:MControl.GridView.Grid.ColumnHeadersVisible"></see> is false. </exception>
        protected void AutoResizeColumns(GridAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
        {
            for (int i = 0; i < this.Columns.Count; i++)
            {
                this.AutoResizeColumn(i, (GridAutoSizeColumnMode) autoSizeColumnsMode, fixedHeight);
            }
        }

        /// <summary>Adjusts the height of the specified row to fit the contents of all its cells including the header cell.</summary>
        /// <param name="rowIndex">The index of the row to resize.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1. </exception>
        public void AutoResizeRow(int rowIndex)
        {
            this.AutoResizeRow(rowIndex, GridAutoSizeRowMode.AllCells);
        }

        /// <summary>Adjusts the height of the specified row using the specified size mode.</summary>
        /// <param name="autoSizeRowMode">One of the <see cref="T:MControl.GridView.GridAutoSizeRowMode"></see> values. </param>
        /// <param name="rowIndex">The index of the row to resize. </param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeRowMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowMode"></see> value. </exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeRowMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowMode.RowHeader"></see> and <see cref="P:MControl.GridView.Grid.RowHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1.</exception>
        public void AutoResizeRow(int rowIndex, GridAutoSizeRowMode autoSizeRowMode)
        {
            this.AutoResizeRow(rowIndex, autoSizeRowMode, true);
        }

        /// <summary>Adjusts the height of the specified row using the specified size mode, optionally calculating the height with the expectation that column widths will subsequently be adjusted. </summary>
        /// <param name="autoSizeRowMode">One of the <see cref="T:MControl.GridView.GridAutoSizeRowMode"></see> values. </param>
        /// <param name="rowIndex">The index of the row to resize. </param>
        /// <param name="fixedWidth">true to calculate the new height based on the current width of the columns; false to calculate the height with the expectation that the column widths will also be adjusted.</param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeRowMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowMode"></see> value. </exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeRowMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowMode.RowHeader"></see> and <see cref="P:MControl.GridView.Grid.RowHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1.</exception>
        protected void AutoResizeRow(int rowIndex, GridAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if ((autoSizeRowMode & ~GridAutoSizeRowMode.AllCells) != ((GridAutoSizeRowMode) 0))
            {
                throw new InvalidEnumArgumentException("autoSizeRowMode", (int) autoSizeRowMode, typeof(GridAutoSizeRowMode));
            }
            if ((autoSizeRowMode == GridAutoSizeRowMode.RowHeader) && !this.RowHeadersVisible)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeRowInvisibleRowHeader"));
            }
            this.AutoResizeRowInternal(rowIndex, autoSizeRowMode, fixedWidth, false);
        }

        /// <summary>Adjusts the width of the row headers using the specified size mode.</summary>
        /// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> values.</param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">rowHeadersWidthSizeMode is not a valid <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value. </exception>
        /// <exception cref="T:System.ArgumentException">rowHeadersWidthSizeMode has the value <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.EnableResizing"></see> or <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.DisableResizing"></see>.</exception>
        public void AutoResizeRowHeadersWidth(GridRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            this.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode, true, true);
        }

        /// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode.</summary>
        /// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> values.</param>
        /// <param name="rowIndex">The index of the row header with the changed content.</param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">rowHeadersWidthSizeMode is not a valid <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value. </exception>
        /// <exception cref="T:System.ArgumentException">rowHeadersWidthSizeMode has the value <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.EnableResizing"></see> or <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.DisableResizing"></see></exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1. </exception>
        public void AutoResizeRowHeadersWidth(int rowIndex, GridRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
        {
            this.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode, true, true);
        }

        /// <summary>Adjusts the width of the row headers using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
        /// <param name="fixedColumnHeadersHeight">true to calculate the new width based on the current height of the column headers; false to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
        /// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> values.</param>
        /// <param name="fixedRowsHeight">true to calculate the new width based on the current row heights; false to calculate the width with the expectation that the row heights will also be adjusted.</param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">rowHeadersWidthSizeMode is not a valid <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value. </exception>
        /// <exception cref="T:System.ArgumentException">rowHeadersWidthSizeMode has the value <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.EnableResizing"></see> or <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.DisableResizing"></see>.</exception>
        protected void AutoResizeRowHeadersWidth(GridRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
        {
            if ((rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing))
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
            }
            if ((rowHeadersWidthSizeMode < GridRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (rowHeadersWidthSizeMode > GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader))
            {
                throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int) rowHeadersWidthSizeMode, typeof(GridRowHeadersWidthSizeMode));
            }
            if (this.RowHeadersVisible)
            {
                if (!base.IsHandleCreated)
                {
                    this.gridState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        int nextRow;
                        int num3;
                        int num4;
                        GridRow row;
                        this.noAutoSizeCount++;
                        int preferredWidth = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if (fixedColumnHeadersHeight)
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
                            }
                            else
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
                            }
                        }
                        switch (rowHeadersWidthSizeMode)
                        {
                            case GridRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                                goto Label_02EC;

                            case GridRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
                                num3 = this.layout.Data.Height;
                                num4 = 0;
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                                goto Label_01E3;

                            case GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                                if (nextRow != -1)
                                {
                                    if (!fixedRowsHeight)
                                    {
                                        break;
                                    }
                                    preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                                }
                                goto Label_02F0;

                            default:
                                goto Label_02F0;
                        }
                        preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        goto Label_02F0;
                    Label_017F:
                        row = this.Rows.SharedRow(nextRow);
                        int height = row.GetHeight(nextRow);
                        num4 += height;
                        if (fixedRowsHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredWidth(nextRow, height));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible | GridElementStates.Frozen);
                    Label_01E3:
                        if ((nextRow != -1) && (num4 < num3))
                        {
                            goto Label_017F;
                        }
                        if (num4 < num3)
                        {
                            nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            while ((nextRow != -1) && (num4 < num3))
                            {
                                GridRow row2 = this.Rows.SharedRow(nextRow);
                                int num6 = row2.GetHeight(nextRow);
                                num4 += num6;
                                if (fixedRowsHeight)
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredWidth(nextRow, num6));
                                }
                                else
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredSize(nextRow).Width);
                                }
                                nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                            }
                        }
                        goto Label_02F0;
                    Label_0281:
                        if (fixedRowsHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                    Label_02EC:
                        if (nextRow != -1)
                        {
                            goto Label_0281;
                        }
                    Label_02F0:
                        if (preferredWidth < 4)
                        {
                            preferredWidth = 4;
                        }
                        if (preferredWidth != this.RowHeadersWidth)
                        {
                            this.RowHeadersWidthInternal = preferredWidth;
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        /// <summary>Adjusts the width of the row headers based on changes to the contents of the header in the specified row and using the specified size mode, optionally calculating the width with the expectation that the row and/or column header widths will subsequently be adjusted.</summary>
        /// <param name="fixedColumnHeadersHeight">true to calculate the new width based on the current height of the column headers; false to calculate the width with the expectation that the height of the column headers will also be adjusted.</param>
        /// <param name="rowHeadersWidthSizeMode">One of the <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> values.</param>
        /// <param name="fixedRowHeight">true to calculate the new width based on the current height of the specified row; false to calculate the width with the expectation that the row height will also be adjusted.</param>
        /// <param name="rowIndex">The index of the row containing the header with the changed content.</param>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">rowHeadersWidthSizeMode is not a valid <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value. </exception>
        /// <exception cref="T:System.ArgumentException">rowHeadersWidthSizeMode has the value <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.EnableResizing"></see> or <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.DisableResizing"></see>.</exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1. </exception>
        protected void AutoResizeRowHeadersWidth(int rowIndex, GridRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
        {
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if ((rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing))
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
            }
            if ((rowHeadersWidthSizeMode < GridRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (rowHeadersWidthSizeMode > GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader))
            {
                throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int) rowHeadersWidthSizeMode, typeof(GridRowHeadersWidthSizeMode));
            }
            if (this.RowHeadersVisible && ((((rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader) || (rowIndex == -1)) || (rowIndex == this.Rows.GetFirstRow(GridElementStates.Visible))) && (((rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders) || (rowIndex == -1)) || ((this.Rows.GetRowState(rowIndex) & GridElementStates.Displayed) != GridElementStates.None))))
            {
                if (!base.IsHandleCreated)
                {
                    this.gridState2[0x100000] = true;
                }
                else
                {
                    try
                    {
                        int nextRow;
                        int num3;
                        int num4;
                        GridRow row;
                        this.noAutoSizeCount++;
                        int preferredWidth = 0;
                        if (this.layout.TopLeftHeader.Width > 0)
                        {
                            if ((rowIndex != -1) || fixedColumnHeadersHeight)
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
                            }
                            else
                            {
                                preferredWidth = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
                            }
                        }
                        switch (rowHeadersWidthSizeMode)
                        {
                            case GridRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                                goto Label_036C;

                            case GridRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
                                num3 = this.layout.Data.Height;
                                num4 = 0;
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                                goto Label_024E;

                            case GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
                                nextRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                                if (nextRow != -1)
                                {
                                    if ((rowIndex == nextRow) && !fixedRowHeight)
                                    {
                                        break;
                                    }
                                    preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                                }
                                goto Label_0370;

                            default:
                                goto Label_0370;
                        }
                        preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        goto Label_0370;
                    Label_01E3:
                        row = this.Rows.SharedRow(nextRow);
                        int height = row.GetHeight(nextRow);
                        num4 += height;
                        if ((rowIndex != nextRow) || fixedRowHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredWidth(nextRow, height));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, row.HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible | GridElementStates.Frozen);
                    Label_024E:
                        if ((nextRow != -1) && (num4 < num3))
                        {
                            goto Label_01E3;
                        }
                        if (num4 < num3)
                        {
                            nextRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                            while ((nextRow != -1) && (num4 < num3))
                            {
                                GridRow row2 = this.Rows.SharedRow(nextRow);
                                int num6 = row2.GetHeight(nextRow);
                                num4 += num6;
                                if ((rowIndex != nextRow) || fixedRowHeight)
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredWidth(nextRow, num6));
                                }
                                else
                                {
                                    preferredWidth = Math.Max(preferredWidth, row2.HeaderCell.GetPreferredSize(nextRow).Width);
                                }
                                nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                            }
                        }
                        goto Label_0370;
                    Label_02FC:
                        if ((rowIndex != nextRow) || fixedRowHeight)
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredWidth(nextRow, this.Rows.SharedRow(nextRow).GetHeight(nextRow)));
                        }
                        else
                        {
                            preferredWidth = Math.Max(preferredWidth, this.Rows.SharedRow(nextRow).HeaderCell.GetPreferredSize(nextRow).Width);
                        }
                        nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                    Label_036C:
                        if (nextRow != -1)
                        {
                            goto Label_02FC;
                        }
                    Label_0370:
                        if (preferredWidth < 4)
                        {
                            preferredWidth = 4;
                        }
                        if (preferredWidth != this.RowHeadersWidth)
                        {
                            this.RowHeadersWidthInternal = preferredWidth;
                        }
                    }
                    finally
                    {
                        this.noAutoSizeCount--;
                    }
                }
            }
        }

        private void AutoResizeRowInternal(int rowIndex, GridAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing)
        {
            if (!base.IsHandleCreated)
            {
                this.gridState2[0x100000] = true;
            }
            else
            {
                try
                {
                    int num;
                    int num2;
                    this.noAutoSizeCount++;
                    GridRow row = this.Rows.SharedRow(rowIndex);
                    row.GetHeightInfo(rowIndex, out num, out num2);
                    int height = row.GetPreferredHeight(rowIndex, autoSizeRowMode, fixedWidth);
                    if (height < num2)
                    {
                        height = num2;
                    }
                    if (height > 0x10000)
                    {
                        height = 0x10000;
                    }
                    if (num != height)
                    {
                        if (this.autoSizeRowsMode == GridAutoSizeRowsMode.None)
                        {
                            if (!this.OnRowHeightInfoPushed(rowIndex, height, num2))
                            {
                                this.Rows[rowIndex].ThicknessInternal = height;
                            }
                        }
                        else if (internalAutosizing)
                        {
                            this.Rows[rowIndex].ThicknessInternal = height;
                        }
                        else
                        {
                            this.Rows[rowIndex].Thickness = height;
                        }
                    }
                }
                finally
                {
                    this.noAutoSizeCount--;
                }
            }
        }

        /// <summary>Adjusts the heights of all rows to fit the contents of all their cells, including the header cells.</summary>
        public void AutoResizeRows()
        {
            this.AutoResizeRows(GridAutoSizeRowsMode.AllCells);
        }

        /// <summary>Adjusts the heights of the rows using the specified size mode value.</summary>
        /// <param name="autoSizeRowsMode">One of the <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> values. </param>
        /// <exception cref="T:System.ArgumentException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.None"></see>.</exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.AllHeaders"></see> or <see cref="F:MControl.GridView.GridAutoSizeRowsMode.DisplayedHeaders"></see>, and <see cref="P:MControl.GridView.Grid.RowHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeRowsMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> value. </exception>
        public void AutoResizeRows(GridAutoSizeRowsMode autoSizeRowsMode)
        {
            this.AutoResizeRows(autoSizeRowsMode, true);
        }

        /// <summary>Adjusts the heights of all rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted. </summary>
        /// <param name="autoSizeRowsMode">One of the <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> values.</param>
        /// <param name="fixedWidth">true to calculate the new heights based on the current column widths; false to calculate the heights with the expectation that the column widths will also be adjusted.</param>
        /// <exception cref="T:System.ArgumentException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.None"></see>.</exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.AllHeaders"></see> or <see cref="F:MControl.GridView.GridAutoSizeRowsMode.DisplayedHeaders"></see>, and <see cref="P:MControl.GridView.Grid.RowHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeRowsMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> value. </exception>
        protected void AutoResizeRows(GridAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
        {
            switch (autoSizeRowsMode)
            {
                case GridAutoSizeRowsMode.None:
                case GridAutoSizeRowsMode.AllHeaders:
                case GridAutoSizeRowsMode.AllCellsExceptHeaders:
                case GridAutoSizeRowsMode.AllCells:
                case GridAutoSizeRowsMode.DisplayedHeaders:
                case GridAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                case GridAutoSizeRowsMode.DisplayedCells:
                    if (autoSizeRowsMode == GridAutoSizeRowsMode.None)
                    {
                        throw new ArgumentException(MControl.GridView.RM.GetString("Grid_NeedAutoSizingCriteria", new object[] { "autoSizeRowsMode" }));
                    }
                    if (((autoSizeRowsMode == GridAutoSizeRowsMode.AllHeaders) || (autoSizeRowsMode == GridAutoSizeRowsMode.DisplayedHeaders)) && !this.RowHeadersVisible)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeRowsInvisibleRowHeader"));
                    }
                    this.AdjustShrinkingRows(autoSizeRowsMode, fixedWidth, false);
                    return;
            }
            throw new InvalidEnumArgumentException("value", (int) autoSizeRowsMode, typeof(GridAutoSizeRowsMode));
        }

        /// <summary>Adjusts the heights of the specified rows using the specified size mode, optionally calculating the heights with the expectation that column widths will subsequently be adjusted. </summary>
        /// <param name="rowIndexStart">The index of the first row to resize. </param>
        /// <param name="autoSizeRowMode">One of the <see cref="T:MControl.GridView.GridAutoSizeRowMode"></see> values. </param>
        /// <param name="fixedWidth">true to calculate the new heights based on the current column widths; false to calculate the heights with the expectation that the column widths will also be adjusted.</param>
        /// <param name="rowsCount">The number of rows to resize. </param>
        /// <exception cref="T:System.ArgumentException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.None"></see>.</exception>
        /// <exception cref="T:System.InvalidOperationException">autoSizeRowsMode has the value <see cref="F:MControl.GridView.GridAutoSizeRowsMode.AllHeaders"></see> or <see cref="F:MControl.GridView.GridAutoSizeRowsMode.DisplayedHeaders"></see>, and <see cref="P:MControl.GridView.Grid.RowHeadersVisible"></see> is false. </exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndexStart is less than 0.-or-rowsCount is less than 0.</exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">autoSizeRowsMode is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> value. </exception>
        protected void AutoResizeRows(int rowIndexStart, int rowsCount, GridAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
        {
            if ((autoSizeRowMode & ~GridAutoSizeRowMode.AllCells) != ((GridAutoSizeRowMode) 0))
            {
                throw new InvalidEnumArgumentException("autoSizeRowMode", (int) autoSizeRowMode, typeof(GridAutoSizeRowMode));
            }
            if ((autoSizeRowMode == GridAutoSizeRowMode.RowHeader) && !this.RowHeadersVisible)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeRowsInvisibleRowHeader"));
            }
            if (rowsCount < 0)
            {
                throw new ArgumentOutOfRangeException("rowsCount");
            }
            if (rowIndexStart < 0)
            {
                throw new ArgumentOutOfRangeException("rowIndexStart");
            }
            if (!base.IsHandleCreated)
            {
                this.gridState2[0x100000] = true;
            }
            else
            {
                this.inBulkPaintCount++;
                this.inBulkLayoutCount++;
                try
                {
                    int nextRow = this.Rows.GetNextRow(rowIndexStart - 1, GridElementStates.Visible);
                    int num2 = 0;
                    while ((nextRow != -1) && (num2 < rowsCount))
                    {
                        this.AutoResizeRowInternal(nextRow, autoSizeRowMode, fixedWidth, false);
                        num2++;
                        if (num2 < rowsCount)
                        {
                            nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible);
                        }
                    }
                }
                finally
                {
                    this.ExitBulkLayout(true);
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset)
        {
            Rectangle b = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
            if (this.layout.TopLeftHeader.Width > 0)
            {
                b = Rectangle.Union(this.layout.TopLeftHeader, b);
            }
            b.Y += (4 - mouseBarOffset) - 1;
            this.CaptureMouse(b);
            this.gridOper[0x80] = true;
            this.trackRowAnchor = mouseY;
            this.mouseBarOffset = mouseBarOffset;
            this.currentRowSplitBar = mouseY;
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void BeginColumnRelocation(int mouseX, int index)
        {
            Rectangle columnHeaders = this.layout.ColumnHeaders;
            int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen);
            int num2 = this.Columns.GetColumnsWidth(GridElementStates.Visible) - columnsWidth;
            if (this.Columns[index].Frozen)
            {
                if (this.RightToLeftInternal)
                {
                    columnHeaders.X += columnHeaders.Width - columnsWidth;
                }
                columnHeaders.Width = Math.Min(columnsWidth, this.layout.Data.Width);
            }
            else
            {
                if (!this.RightToLeftInternal)
                {
                    columnHeaders.X += columnsWidth;
                }
                else if (this.layout.Data.Width > (columnsWidth + num2))
                {
                    columnHeaders.X += (this.layout.Data.Width - columnsWidth) - num2;
                }
                columnHeaders.Width = Math.Min(num2, this.layout.Data.Width);
            }
            this.CaptureMouse(columnHeaders);
            this.gridOper[0x20] = true;
            this.gridState2[0x400] = false;
            this.trackColumn = index;
            this.trackColumnEdge = -1;
            this.mouseBarOffset = this.GetColumnXFromIndex(index) - mouseX;
            this.lastHeaderShadow = mouseX;
            base.Invalidate(this.layout.ColumnHeaders);
        }

        private void BeginColumnResize(int mouseX, int mouseBarOffset, int index)
        {
            Rectangle cursorClip = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
            int columnXFromIndex = this.GetColumnXFromIndex(index);
            if (this.RightToLeftInternal)
            {
                cursorClip.X = (this.layout.Data.X - mouseBarOffset) - 1;
                cursorClip.Width = ((columnXFromIndex - this.Columns[index].MinimumThickness) - this.layout.Data.X) + 3;
                int num2 = (((columnXFromIndex - mouseBarOffset) - cursorClip.Left) - 0x10000) + 1;
                if (num2 > 0)
                {
                    cursorClip.X += num2;
                    cursorClip.Width -= num2;
                }
            }
            else
            {
                cursorClip.X = ((columnXFromIndex + this.Columns[index].MinimumThickness) - mouseBarOffset) - 1;
                cursorClip.Width = (this.layout.Data.Right - columnXFromIndex) - 1;
                int num3 = ((cursorClip.Right + mouseBarOffset) - columnXFromIndex) - 0x10000;
                if (num3 > 0)
                {
                    cursorClip.Width -= num3;
                }
            }
            this.CaptureMouse(cursorClip);
            this.gridOper[1] = true;
            this.trackColAnchor = mouseX;
            this.trackColumn = index;
            this.mouseBarOffset = mouseBarOffset;
            this.currentColSplitBar = mouseX;
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        /// <summary>Puts the current cell in edit mode.</summary>
        /// <returns>true if the current cell is already in edit mode or successfully enters edit mode; otherwise, false.</returns>
        /// <param name="selectAll">true to select all the cell's contents; false to not select any contents.</param>
        /// <exception cref="T:System.Exception">Initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        /// <exception cref="T:System.InvalidCastException">The type indicated by the cell's <see cref="P:MControl.GridView.GridCell.EditType"></see> property does not derive from the <see cref="T:System.Windows.Forms.Control"></see> type.-or-The type indicated by the cell's <see cref="P:MControl.GridView.GridCell.EditType"></see> property does not implement the <see cref="T:System.Windows.Forms.IGridEditingControl"></see> interface.</exception>
        /// <exception cref="T:System.InvalidOperationException"><see cref="P:MControl.GridView.Grid.CurrentCell"></see> is not set to a valid cell.-or-This method was called in a handler for the <see cref="E:MControl.GridView.Grid.CellBeginEdit"></see> event.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public virtual bool BeginEdit(bool selectAll)
        {
            if (this.ptCurrentCell.X == -1)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_NoCurrentCell"));
            }
            return (this.IsCurrentCellInEditMode || this.BeginEditInternal(selectAll));
        }

        private bool BeginEditInternal(bool selectAll)
        {
            if (this.gridOper[0x200000])
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_BeginEditNotReentrant"));
            }
            try
            {
                System.Type editType;
                GridCellStyle style;
                this.gridOper[0x200000] = true;
                GridCell currentCellInternal = this.CurrentCellInternal;
                if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && this.ColumnEditable(this.ptCurrentCell.X))
                {
                    editType = currentCellInternal.EditType;
                    if ((editType != null) || (currentCellInternal.GetType().GetInterface("System.Windows.Forms.IGridEditingCell") != null))
                    {
                        GridCellCancelEventArgs args = new GridCellCancelEventArgs(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        this.OnCellBeginEdit(args);
                        if (args.Cancel)
                        {
                            return false;
                        }
                        if (this.ptCurrentCell.X > -1)
                        {
                            currentCellInternal = this.CurrentCellInternal;
                            goto Label_00E1;
                        }
                    }
                }
                return false;
            Label_00E1:
                style = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
                if (editType == null)
                {
                    this.gridState1[0x8000] = true;
                    this.InitializeEditingCellValue(ref style, ref currentCellInternal);
                    ((IGridEditingCell) currentCellInternal).PrepareEditingCellForEdit(selectAll);
                    return true;
                }
                System.Type type3 = editType.GetInterface("System.Windows.Forms.IGridEditingControl");
                if (!editType.IsSubclassOf(System.Type.GetType("System.Windows.Forms.Control")) || (type3 == null))
                {
                    throw new InvalidCastException(MControl.GridView.RM.GetString("Grid_InvalidEditingControl"));
                }
                if (((this.latestEditingControl != null) && editType.IsInstanceOfType(this.latestEditingControl)) && !this.latestEditingControl.GetType().IsSubclassOf(editType))
                {
                    this.editingControl = this.latestEditingControl;
                }
                else
                {
                    this.editingControl = (Control) System.Windows.Forms.SecurityUtils.SecureCreateInstance(editType);
                    ((IGridEditingControl) this.editingControl).EditingControlGrid = this;
                    if (this.latestEditingControl != null)
                    {
                        this.latestEditingControl.Dispose();
                        this.latestEditingControl = null;
                    }
                }
                if (string.IsNullOrEmpty(this.editingControl.AccessibleName))
                {
                    this.editingControl.AccessibleName = MControl.GridView.RM.GetString("Grid_AccEditingControlAccName");
                }
                this.editingControl.ImeMode = base.ImeMode;
                ((IGridEditingControl) this.editingControl).EditingControlRowIndex = this.ptCurrentCell.Y;
                this.InitializeEditingControlValue(ref style, currentCellInternal);
                this.WireEditingControlEvents();
                GridEditingControlShowingEventArgs e = new GridEditingControlShowingEventArgs(this.editingControl, style);
                this.OnEditingControlShowing(e);
                if ((this.editingPanel == null) || (this.editingControl == null))
                {
                    return false;
                }
                this.editingPanel.BackColor = e.CellStyle.BackColor;
                ((IGridEditingControl) this.editingControl).ApplyCellStyleToEditingControl(e.CellStyle);
                if (this.toolTipControl.Activated && (this.ptToolTipCell == this.ptCurrentCell))
                {
                    this.toolTipControl.Activate(false);
                }
                this.PositionEditingControl(true, true, true);
                if ((this.editingPanel == null) || (this.editingControl == null))
                {
                    return false;
                }
                ((IGridEditingControl) this.editingControl).PrepareEditingControlForEdit(selectAll);
                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            finally
            {
                this.gridOper[0x200000] = false;
            }
            return true;
        }

        private void BeginRowHeadersResize(int mouseX, int mouseBarOffset)
        {
            Rectangle b = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
            if (this.layout.TopLeftHeader.Width > 0)
            {
                b = Rectangle.Union(this.layout.TopLeftHeader, b);
            }
            if (this.RightToLeftInternal)
            {
                b.X -= mouseBarOffset + 1;
                b.Width -= 3;
            }
            else
            {
                b.X += (4 - mouseBarOffset) - 1;
            }
            this.CaptureMouse(b);
            this.gridOper[0x100] = true;
            this.trackColAnchor = mouseX;
            this.mouseBarOffset = mouseBarOffset;
            this.currentColSplitBar = mouseX;
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        private void BeginRowResize(int mouseY, int mouseBarOffset, int index)
        {
            Rectangle cursorClip = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
            int rowYFromIndex = this.GetRowYFromIndex(index);
            cursorClip.Y = ((rowYFromIndex + this.Rows.SharedRow(index).GetMinimumHeight(index)) - mouseBarOffset) - 1;
            cursorClip.Height = ((this.layout.Data.Y + this.layout.Data.Height) - rowYFromIndex) - 1;
            this.CaptureMouse(cursorClip);
            this.gridOper[2] = true;
            this.trackRowAnchor = mouseY;
            this.trackRow = index;
            this.mouseBarOffset = mouseBarOffset;
            this.currentRowSplitBar = mouseY;
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void BuildInheritedColumnHeaderCellStyle(GridCellStyle inheritedCellStyle, GridCell cell)
        {
            GridCellStyle style = null;
            if (cell.HasStyle)
            {
                style = cell.Style;
            }
            GridCellStyle columnHeadersDefaultCellStyle = this.ColumnHeadersDefaultCellStyle;
            GridCellStyle defaultCellStyle = this.DefaultCellStyle;
            if ((style != null) && !style.BackColor.IsEmpty)
            {
                inheritedCellStyle.BackColor = style.BackColor;
            }
            else if (!columnHeadersDefaultCellStyle.BackColor.IsEmpty)
            {
                inheritedCellStyle.BackColor = columnHeadersDefaultCellStyle.BackColor;
            }
            else
            {
                inheritedCellStyle.BackColor = defaultCellStyle.BackColor;
            }
            if ((style != null) && !style.ForeColor.IsEmpty)
            {
                inheritedCellStyle.ForeColor = style.ForeColor;
            }
            else if (!columnHeadersDefaultCellStyle.ForeColor.IsEmpty)
            {
                inheritedCellStyle.ForeColor = columnHeadersDefaultCellStyle.ForeColor;
            }
            else
            {
                inheritedCellStyle.ForeColor = defaultCellStyle.ForeColor;
            }
            if ((style != null) && !style.SelectionBackColor.IsEmpty)
            {
                inheritedCellStyle.SelectionBackColor = style.SelectionBackColor;
            }
            else if (!columnHeadersDefaultCellStyle.SelectionBackColor.IsEmpty)
            {
                inheritedCellStyle.SelectionBackColor = columnHeadersDefaultCellStyle.SelectionBackColor;
            }
            else
            {
                inheritedCellStyle.SelectionBackColor = defaultCellStyle.SelectionBackColor;
            }
            if ((style != null) && !style.SelectionForeColor.IsEmpty)
            {
                inheritedCellStyle.SelectionForeColor = style.SelectionForeColor;
            }
            else if (!columnHeadersDefaultCellStyle.SelectionForeColor.IsEmpty)
            {
                inheritedCellStyle.SelectionForeColor = columnHeadersDefaultCellStyle.SelectionForeColor;
            }
            else
            {
                inheritedCellStyle.SelectionForeColor = defaultCellStyle.SelectionForeColor;
            }
            if ((style != null) && (style.Font != null))
            {
                inheritedCellStyle.Font = style.Font;
            }
            else if (columnHeadersDefaultCellStyle.Font != null)
            {
                inheritedCellStyle.Font = columnHeadersDefaultCellStyle.Font;
            }
            else
            {
                inheritedCellStyle.Font = defaultCellStyle.Font;
            }
            if ((style != null) && !style.IsNullValueDefault)
            {
                inheritedCellStyle.NullValue = style.NullValue;
            }
            else if (!columnHeadersDefaultCellStyle.IsNullValueDefault)
            {
                inheritedCellStyle.NullValue = columnHeadersDefaultCellStyle.NullValue;
            }
            else
            {
                inheritedCellStyle.NullValue = defaultCellStyle.NullValue;
            }
            if ((style != null) && !style.IsDataSourceNullValueDefault)
            {
                inheritedCellStyle.DataSourceNullValue = style.DataSourceNullValue;
            }
            else if (!columnHeadersDefaultCellStyle.IsDataSourceNullValueDefault)
            {
                inheritedCellStyle.DataSourceNullValue = columnHeadersDefaultCellStyle.DataSourceNullValue;
            }
            else
            {
                inheritedCellStyle.DataSourceNullValue = defaultCellStyle.DataSourceNullValue;
            }
            if ((style != null) && (style.Format.Length != 0))
            {
                inheritedCellStyle.Format = style.Format;
            }
            else if (columnHeadersDefaultCellStyle.Format.Length != 0)
            {
                inheritedCellStyle.Format = columnHeadersDefaultCellStyle.Format;
            }
            else
            {
                inheritedCellStyle.Format = defaultCellStyle.Format;
            }
            if ((style != null) && !style.IsFormatProviderDefault)
            {
                inheritedCellStyle.FormatProvider = style.FormatProvider;
            }
            else if (!columnHeadersDefaultCellStyle.IsFormatProviderDefault)
            {
                inheritedCellStyle.FormatProvider = columnHeadersDefaultCellStyle.FormatProvider;
            }
            else
            {
                inheritedCellStyle.FormatProvider = defaultCellStyle.FormatProvider;
            }
            if ((style != null) && (style.Alignment != GridContentAlignment.NotSet))
            {
                inheritedCellStyle.AlignmentInternal = style.Alignment;
            }
            else if ((columnHeadersDefaultCellStyle != null) && (columnHeadersDefaultCellStyle.Alignment != GridContentAlignment.NotSet))
            {
                inheritedCellStyle.AlignmentInternal = columnHeadersDefaultCellStyle.Alignment;
            }
            else
            {
                inheritedCellStyle.AlignmentInternal = defaultCellStyle.Alignment;
            }
            if ((style != null) && (style.WrapMode != GridTriState.NotSet))
            {
                inheritedCellStyle.WrapModeInternal = style.WrapMode;
            }
            else if ((columnHeadersDefaultCellStyle != null) && (columnHeadersDefaultCellStyle.WrapMode != GridTriState.NotSet))
            {
                inheritedCellStyle.WrapModeInternal = columnHeadersDefaultCellStyle.WrapMode;
            }
            else
            {
                inheritedCellStyle.WrapModeInternal = defaultCellStyle.WrapMode;
            }
            if ((style != null) && (style.Tag != null))
            {
                inheritedCellStyle.Tag = style.Tag;
            }
            else if (columnHeadersDefaultCellStyle.Tag != null)
            {
                inheritedCellStyle.Tag = columnHeadersDefaultCellStyle.Tag;
            }
            else
            {
                inheritedCellStyle.Tag = defaultCellStyle.Tag;
            }
            if ((style != null) && (style.Padding != System.Windows.Forms.Padding.Empty))
            {
                inheritedCellStyle.PaddingInternal = style.Padding;
            }
            else if (columnHeadersDefaultCellStyle.Padding != System.Windows.Forms.Padding.Empty)
            {
                inheritedCellStyle.PaddingInternal = columnHeadersDefaultCellStyle.Padding;
            }
            else
            {
                inheritedCellStyle.PaddingInternal = defaultCellStyle.Padding;
            }
        }

        private Rectangle CalcColRelocationFeedbackRect(int mouseX)
        {
            Rectangle rectangle;
            Rectangle columnHeaders = this.layout.ColumnHeaders;
            if (this.layout.TopLeftHeader.Width > 0)
            {
                columnHeaders = Rectangle.Union(this.layout.TopLeftHeader, columnHeaders);
            }
            if (this.RightToLeftInternal)
            {
                rectangle = new Rectangle(((mouseX + this.mouseBarOffset) - this.Columns[this.trackColumn].Thickness) + 1, columnHeaders.Y, this.Columns[this.trackColumn].Thickness, columnHeaders.Height);
                rectangle.X = Math.Max(columnHeaders.Left, rectangle.X);
                rectangle.X = Math.Min(rectangle.X, columnHeaders.Right - rectangle.Width);
                return rectangle;
            }
            rectangle = new Rectangle((mouseX + this.mouseBarOffset) - 1, columnHeaders.Y, this.Columns[this.trackColumn].Thickness, columnHeaders.Height);
            rectangle.X = Math.Min(columnHeaders.Right - rectangle.Width, rectangle.X);
            rectangle.X = Math.Max(rectangle.X, columnHeaders.Left);
            return rectangle;
        }

        private Rectangle CalcColResizeFeedbackRect(int mouseX)
        {
            Rectangle data = this.layout.Data;
            Rectangle rectangle2 = new Rectangle((mouseX + this.mouseBarOffset) - 1, data.Y, 3, data.Height);
            if (this.RightToLeftInternal)
            {
                rectangle2.X = Math.Max(data.Left, rectangle2.X);
                return rectangle2;
            }
            rectangle2.X = Math.Min(data.Right - 3, rectangle2.X);
            rectangle2.X = Math.Max(rectangle2.X, 0);
            return rectangle2;
        }

        private Rectangle CalcRowResizeFeedbackRect(int mouseY)
        {
            Rectangle data = this.layout.Data;
            Rectangle rectangle2 = new Rectangle(data.X, (mouseY + this.mouseBarOffset) - 1, data.Width, 3);
            rectangle2.Y = Math.Min(data.Bottom - 3, rectangle2.Y);
            rectangle2.Y = Math.Max(rectangle2.Y, 0);
            return rectangle2;
        }

        /// <summary>Cancels edit mode for the currently selected cell and discards any changes.</summary>
        /// <returns>true if the cancel was successful; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public bool CancelEdit()
        {
            return this.CancelEdit(false);
        }

        private bool CancelEdit(bool endEdit)
        {
            if (this.ptCurrentCell.X != -1)
            {
                int x = this.ptCurrentCell.X;
                GridCell currentCellInternal = this.CurrentCellInternal;
                GridDataErrorEventArgs args = this.CancelEditPrivate();
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
                if (this.IsCurrentCellInEditMode)
                {
                    if ((endEdit && (this.EditMode != GridEditMode.EditOnEnter)) && (this.editingControl != null))
                    {
                        this.EndEdit(GridDataErrorContexts.InitialValueRestoration | GridDataErrorContexts.Parsing, GridValidateCellInternal.Never, false, false, false, false, false, true, true, true);
                    }
                    else
                    {
                        GridDataErrorEventArgs e = null;
                        IGridEditingCell cell2 = null;
                        try
                        {
                            this.gridState1[0x200] = true;
                            if (this.editingControl != null)
                            {
                                ((IGridEditingControl) this.editingControl).EditingControlFormattedValue = this.uneditedFormattedValue;
                                ((IGridEditingControl) this.editingControl).EditingControlValueChanged = false;
                            }
                            else
                            {
                                cell2 = currentCellInternal as IGridEditingCell;
                                cell2.EditingCellFormattedValue = this.uneditedFormattedValue;
                                cell2.EditingCellValueChanged = false;
                            }
                        }
                        catch (Exception exception)
                        {
                            if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                            {
                                throw;
                            }
                            e = new GridDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, GridDataErrorContexts.InitialValueRestoration);
                        }
                        finally
                        {
                            this.gridState1[0x200] = false;
                        }
                        if (e != null)
                        {
                            this.OnDataErrorInternal(e);
                            if (e.ThrowException)
                            {
                                throw e.Exception;
                            }
                        }
                        if (this.editingControl != null)
                        {
                            ((IGridEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
                        }
                        else
                        {
                            cell2.PrepareEditingCellForEdit(true);
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                    }
                }
                else if (((this.ptCurrentCell.X == -1) && this.Focused) && (this.Rows.Count > 0))
                {
                    if ((this.Columns.Count > x) && this.Columns[x].Visible)
                    {
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                        if (firstRow != -1)
                        {
                            this.SetAndSelectCurrentCellAddress(x, firstRow, true, false, false, false, false);
                        }
                    }
                    else
                    {
                        this.MakeFirstDisplayedCellCurrentCell(true);
                    }
                }
            }
            return true;
        }

        private GridDataErrorEventArgs CancelEditPrivate()
        {
            bool isCurrentCellDirty = this.IsCurrentCellDirty;
            bool isCurrentRowDirty = this.IsCurrentRowDirty;
            if (this.IsCurrentCellInEditMode)
            {
                if (this.editingControl != null)
                {
                    ((IGridEditingControl) this.editingControl).EditingControlValueChanged = false;
                }
                else
                {
                    ((IGridEditingCell) this.CurrentCellInternal).EditingCellValueChanged = false;
                }
                this.IsCurrentCellDirtyInternal = false;
            }
            if ((this.DataSource != null) || this.VirtualMode)
            {
                if ((isCurrentRowDirty && !isCurrentCellDirty) || (this.gridState1[0x80000] && !this.gridState1[0x40000]))
                {
                    bool response = this.gridState1[0x80000];
                    this.IsCurrentRowDirtyInternal = false;
                    if (this.VirtualMode)
                    {
                        QuestionEventArgs e = new QuestionEventArgs(response);
                        this.OnCancelRowEdit(e);
                        response &= e.Response;
                    }
                    if (this.DataSource != null)
                    {
                        int y = this.ptCurrentCell.Y;
                        this.dataConnection.CancelRowEdit(true, this.gridState1[0x80000]);
                        if (this.dataConnection.List.Count == 0)
                        {
                            if (isCurrentCellDirty)
                            {
                                this.SetAndSelectCurrentCellAddress(y, 0, true, false, false, true, false);
                            }
                            else
                            {
                                this.dataConnection.OnNewRowNeeded();
                            }
                        }
                        response = false;
                    }
                    if (this.ptCurrentCell.Y > -1)
                    {
                        this.InvalidateRowPrivate(this.ptCurrentCell.Y);
                        GridCell currentCellInternal = this.CurrentCellInternal;
                        if (this.IsCurrentCellInEditMode)
                        {
                            GridCellStyle gridCellStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
                            if (this.editingControl != null)
                            {
                                this.InitializeEditingControlValue(ref gridCellStyle, currentCellInternal);
                                if (((IGridEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                                {
                                    this.PositionEditingControl(true, true, false);
                                }
                            }
                            else
                            {
                                this.InitializeEditingCellValue(ref gridCellStyle, ref currentCellInternal);
                            }
                        }
                    }
                    if (response && (this.ptCurrentCell.Y == (this.newRowIndex - 1)))
                    {
                        this.DiscardNewRow();
                    }
                }
            }
            else if ((!this.IsCurrentRowDirty && (this.ptCurrentCell.Y == (this.newRowIndex - 1))) && this.gridState1[0x200000])
            {
                this.DiscardNewRow();
            }
            return null;
        }

        internal bool CancelToolTipPopup(System.Windows.Forms.ToolTip toolTip)
        {
            if (this.toolTipControl.ToolTip == toolTip)
            {
                return false;
            }
            return (string.IsNullOrEmpty(this.toolTipCaption) && this.ShowCellToolTips);
        }

        private bool CanValidateDataBoundGridCell(GridCell gridCurrentCell)
        {
            if ((gridCurrentCell == null) && (this.ptCurrentCell.X > -1))
            {
                gridCurrentCell = this.CurrentCellInternal;
            }
            if (gridCurrentCell != null)
            {
                if (!gridCurrentCell.OwningColumn.IsDataBoundInternal)
                {
                    return true;
                }
                if (this.gridOper[0x100000])
                {
                    return false;
                }
                if (this.dataConnection == null)
                {
                    return true;
                }
                if (this.dataConnection.ProcessingMetaDataChanges)
                {
                    return false;
                }
                if (this.dataConnection.CancellingRowEdit && !this.dataConnection.RestoreRow)
                {
                    return false;
                }
                if (this.dataConnection.CurrencyManager.Count <= this.ptCurrentCell.Y)
                {
                    return false;
                }
                if (this.dataConnection.PositionChangingOutsideGrid)
                {
                    return false;
                }
                if (this.dataConnection.ListWasReset)
                {
                    return false;
                }
            }
            return true;
        }

        private void CaptureMouse(Rectangle cursorClip)
        {
            base.CaptureInternal = true;
            Cursor.ClipInternal = base.RectangleToScreen(cursorClip);
        }

        private void ClearRegionCache()
        {
            this.cachedScrollableRegion = null;
        }

        /// <summary>Clears the current selection by unselecting all selected cells.</summary>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public void ClearSelection()
        {
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            bool flag = false;
            if ((this.selectedBandIndexes.Count > 8) || (this.individualSelectedCells.Count > 8))
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                this.RemoveIndividuallySelectedCells();
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        return;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        goto Label_0085;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        goto Label_00A7;

                    default:
                        return;
                }
            Label_0073:
                this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
            Label_0085:
                if (this.selectedBandIndexes.Count > 0)
                {
                    goto Label_0073;
                }
                return;
            Label_0095:
                this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
            Label_00A7:
                if (this.selectedBandIndexes.Count > 0)
                {
                    goto Label_0095;
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.NoSelectionChangeCount--;
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        /// <summary>Cancels the selection of all currently selected cells except the one indicated, optionally ensuring that the indicated cell is selected. </summary>
        /// <param name="columnIndexException">The column index to exclude.</param>
        /// <param name="selectExceptionElement">true to select the excluded cell, row, or column; false to retain its original state.</param>
        /// <param name="rowIndexException">The row index to exclude.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndexException is greater than the highest column index.-or-columnIndexException is less than -1 when <see cref="P:MControl.GridView.Grid.SelectionMode"></see> is <see cref="F:MControl.GridView.GridSelectionMode.FullRowSelect"></see>; otherwise, columnIndexException is less than 0.-or- rowIndexException is greater than the highest row index.-or-rowIndexException is less than -1 when <see cref="P:MControl.GridView.Grid.SelectionMode"></see> is <see cref="F:MControl.GridView.GridSelectionMode.FullColumnSelect"></see>; otherwise, rowIndexException is less than 0.</exception>
        protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
        {
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                    if ((columnIndexException < 0) || (columnIndexException >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndexException");
                    }
                    break;

                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                    if ((columnIndexException < -1) || (columnIndexException >= this.Columns.Count))
                    {
                        throw new ArgumentOutOfRangeException("columnIndexException");
                    }
                    break;
            }
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                    if ((rowIndexException < 0) || (rowIndexException >= this.Rows.Count))
                    {
                        throw new ArgumentOutOfRangeException("rowIndexException");
                    }
                    break;

                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                    if ((rowIndexException < -1) || (rowIndexException >= this.Rows.Count))
                    {
                        throw new ArgumentOutOfRangeException("rowIndexException");
                    }
                    break;
            }
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            bool flag = false;
            if ((this.selectedBandIndexes.Count > 8) || (this.individualSelectedCells.Count > 8))
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                int num;
                int num2;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                        goto Label_01D3;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        num = 0;
                        goto Label_0167;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        num2 = 0;
                        goto Label_01B4;

                    default:
                        goto Label_01D3;
                }
            Label_013F:
                if (this.selectedBandIndexes[num] != rowIndexException)
                {
                    this.SetSelectedRowCore(this.selectedBandIndexes[num], false);
                }
                else
                {
                    num++;
                }
            Label_0167:
                if (num < this.selectedBandIndexes.Count)
                {
                    goto Label_013F;
                }
                if (this.SelectionMode == GridSelectionMode.RowHeaderSelect)
                {
                    this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                }
                goto Label_01D3;
            Label_018C:
                if (this.selectedBandIndexes[num2] != columnIndexException)
                {
                    this.SetSelectedColumnCore(this.selectedBandIndexes[num2], false);
                }
                else
                {
                    num2++;
                }
            Label_01B4:
                if (num2 < this.selectedBandIndexes.Count)
                {
                    goto Label_018C;
                }
                if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                {
                    this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
                }
            Label_01D3:
                if (selectExceptionElement)
                {
                    this.SetSelectedElementCore(columnIndexException, rowIndexException, true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.NoSelectionChangeCount--;
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private bool ColumnEditable(int columnIndex)
        {
            if ((this.Columns[columnIndex].IsDataBound && (this.dataConnection != null)) && !this.dataConnection.AllowEdit)
            {
                return false;
            }
            return true;
        }

        private bool ColumnNeedsDisplayedState(GridColumn gridColumn)
        {
            if (gridColumn.Visible)
            {
                if (gridColumn.Frozen)
                {
                    GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
                    if (firstColumn.Index == gridColumn.Index)
                    {
                        return (this.displayedBandsInfo.NumDisplayedFrozenCols > 0);
                    }
                    return (this.Columns.GetColumnCount(GridElementStates.Visible | GridElementStates.Frozen, firstColumn.Index, gridColumn.Index) < this.displayedBandsInfo.NumDisplayedFrozenCols);
                }
                int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                if (firstDisplayedScrollingCol != -1)
                {
                    if (firstDisplayedScrollingCol == gridColumn.Index)
                    {
                        return (this.displayedBandsInfo.NumDisplayedScrollingCols > 0);
                    }
                    if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, gridColumn.Index))
                    {
                        return (this.Columns.GetColumnCount(GridElementStates.Visible, firstDisplayedScrollingCol, gridColumn.Index) < this.displayedBandsInfo.NumDisplayedScrollingCols);
                    }
                }
            }
            return false;
        }

        private bool ColumnRelocationTarget(MouseEventArgs e, HitTestInfo hti, out int previousColumnIndex)
        {
            previousColumnIndex = -1;
            if ((((hti.typeInternal == GridHitTestTypeInternal.ColumnHeadersResizeBottom) || (hti.typeInternal == GridHitTestTypeInternal.ColumnHeader)) || ((hti.typeInternal == GridHitTestTypeInternal.ColumnResizeLeft) || (hti.typeInternal == GridHitTestTypeInternal.ColumnResizeRight))) || ((hti.typeInternal == GridHitTestTypeInternal.ColumnHeaderLeft) || (hti.typeInternal == GridHitTestTypeInternal.ColumnHeaderRight)))
            {
                if ((hti.typeInternal == GridHitTestTypeInternal.ColumnHeadersResizeBottom) || (hti.typeInternal == GridHitTestTypeInternal.ColumnHeader))
                {
                    int columnXFromIndex = this.GetColumnXFromIndex(hti.col);
                    int width = this.Columns[hti.col].Width;
                    if ((this.RightToLeftInternal && (e.X < (columnXFromIndex - (width / 2)))) || (!this.RightToLeftInternal && (e.X > (columnXFromIndex + (width / 2)))))
                    {
                        previousColumnIndex = hti.col;
                    }
                    else
                    {
                        GridColumn column = this.Columns.GetPreviousColumn(this.Columns[hti.col], GridElementStates.Visible, GridElementStates.None);
                        if (column != null)
                        {
                            previousColumnIndex = column.Index;
                        }
                    }
                }
                else
                {
                    previousColumnIndex = ((hti.typeInternal == GridHitTestTypeInternal.ColumnResizeRight) || (hti.typeInternal == GridHitTestTypeInternal.ColumnHeaderRight)) ? hti.col : hti.adjacentCol;
                }
                GridColumn column2 = null;
                if (previousColumnIndex != -1)
                {
                    column2 = this.Columns.GetNextColumn(this.Columns[previousColumnIndex], GridElementStates.Visible, GridElementStates.None);
                }
                if (((this.trackColumn != previousColumnIndex) && ((previousColumnIndex != -1) || (hti.col != this.trackColumn))) && ((column2 == null) || (this.trackColumn != column2.Index)))
                {
                    return true;
                }
            }
            else if (((hti.typeInternal == GridHitTestTypeInternal.FirstColumnHeaderLeft) || (hti.typeInternal == GridHitTestTypeInternal.TopLeftHeaderResizeRight)) && (hti.col != this.trackColumn))
            {
                return true;
            }
            return false;
        }

        private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2)
        {
            return ((columnDisplayIndex1 < columnDisplayIndex2) || ((columnDisplayIndex1 == columnDisplayIndex2) && (columnIndex1 < columnIndex2)));
        }

        /// <summary>Commits changes in the current cell to the data cache without ending edit mode.</summary>
        /// <returns>true if the changes were committed; otherwise false.</returns>
        /// <param name="context">A bitwise combination of <see cref="T:MControl.GridView.GridDataErrorContexts"></see> values that specifies the context in which an error can occur. </param>
        /// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        public bool CommitEdit(GridDataErrorContexts context)
        {
            if (this.IsCurrentCellInEditMode)
            {
                GridCell currentCellInternal = this.CurrentCellInternal;
                GridDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, GridValidateCellInternal.Never, false, false, false, false, false);
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        private bool CommitEdit(GridDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange)
        {
            if (this.gridOper[0x8000])
            {
                return false;
            }
            GridCell currentCellInternal = this.CurrentCellInternal;
            GridDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, forCurrentCellChange ? GridValidateCellInternal.Always : GridValidateCellInternal.WhenChanged, forCurrentCellChange, forCurrentCellChange, forCurrentRowChange, forCurrentRowChange, false);
            if (args != null)
            {
                if (args.ThrowException)
                {
                    throw args.Exception;
                }
                if (args.Cancel)
                {
                    return false;
                }
                args = this.CancelEditPrivate();
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                }
            }
            if (forCurrentRowChange && forCurrentCellChange)
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                int x = this.ptCurrentCell.X;
                int y = this.ptCurrentCell.Y;
                if (this.OnRowValidating(ref currentCellInternal, x, y))
                {
                    if (!this.IsInnerCellOutOfBounds(x, y))
                    {
                        this.OnRowEnter(ref currentCellInternal, x, y, true, true);
                        if (this.IsInnerCellOutOfBounds(x, y))
                        {
                            return false;
                        }
                        this.OnCellEnter(ref currentCellInternal, x, y);
                    }
                    return false;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return false;
                }
                this.OnRowValidated(ref currentCellInternal, x, y);
            }
            return true;
        }

        private GridDataErrorEventArgs CommitEdit(ref GridCell gridCurrentCell, GridDataErrorContexts context, GridValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave)
        {
            if (validateCell == GridValidateCellInternal.Always)
            {
                if (fireCellLeave)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnCellLeave(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (fireRowLeave)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnRowLeave(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (fireLeave)
                {
                    base.OnLeave(EventArgs.Empty);
                    if ((this.ptCurrentCell.X > -1) && (this.ptCurrentCell.Y > -1))
                    {
                        this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                }
                if (this.CanValidateDataBoundGridCell(gridCurrentCell))
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    if (this.OnCellValidating(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
                    {
                        if (fireRowEnter)
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            this.OnRowEnter(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, true, true);
                        }
                        if (fireCellEnter)
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            this.OnCellEnter(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        GridDataErrorEventArgs args = new GridDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
                        args.Cancel = true;
                        return args;
                    }
                    if (!this.IsCurrentCellInEditMode || !this.IsCurrentCellDirty)
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        this.OnCellValidated(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                }
            }
            if (((this.ptCurrentCell.X != -1) && this.IsCurrentCellInEditMode) && this.IsCurrentCellDirty)
            {
                bool flag2 = this.CanValidateDataBoundGridCell(gridCurrentCell);
                if (flag2)
                {
                    Exception exception;
                    object editingControlFormattedValue;
                    if (validateCell == GridValidateCellInternal.WhenChanged)
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        if (this.OnCellValidating(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
                        {
                            if (this.ptCurrentCell.X == -1)
                            {
                                return null;
                            }
                            GridDataErrorEventArgs args2 = new GridDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
                            args2.Cancel = true;
                            return args2;
                        }
                    }
                    if (this.editingControl != null)
                    {
                        editingControlFormattedValue = ((IGridEditingControl) this.editingControl).GetEditingControlFormattedValue(context);
                    }
                    else
                    {
                        editingControlFormattedValue = ((IGridEditingCell) this.CurrentCellInternal).GetEditingCellFormattedValue(context);
                    }
                    if (!this.PushFormattedValue(ref gridCurrentCell, editingControlFormattedValue, out exception))
                    {
                        if (this.ptCurrentCell.X == -1)
                        {
                            return null;
                        }
                        GridDataErrorEventArgs e = new GridDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
                        e.Cancel = true;
                        this.OnDataErrorInternal(e);
                        return e;
                    }
                    if (!this.IsCurrentCellInEditMode)
                    {
                        return null;
                    }
                    this.uneditedFormattedValue = editingControlFormattedValue;
                }
                if (this.editingControl != null)
                {
                    ((IGridEditingControl) this.editingControl).EditingControlValueChanged = false;
                }
                else
                {
                    ((IGridEditingCell) this.CurrentCellInternal).EditingCellValueChanged = false;
                }
                this.IsCurrentCellDirtyInternal = false;
                this.IsCurrentRowDirtyInternal = true;
                if (flag2 && ((validateCell == GridValidateCellInternal.Always) || (validateCell == GridValidateCellInternal.WhenChanged)))
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        return null;
                    }
                    this.OnCellValidated(ref gridCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
            }
            return null;
        }

        private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange)
        {
            if (forCurrentCellChange)
            {
                if (!this.EndEdit(GridDataErrorContexts.CurrentCellChange | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, true, true, this.ptCurrentCell.Y != rowIndex, this.ptCurrentCell.Y != rowIndex, false, this.EditMode != GridEditMode.EditOnEnter, false, false))
                {
                    return false;
                }
                if ((this.ptCurrentCell.Y != rowIndex) && (this.ptCurrentCell.Y != -1))
                {
                    GridCell gridCell = null;
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (this.OnRowValidating(ref gridCell, x, y))
                    {
                        if (!this.IsInnerCellOutOfBounds(x, y))
                        {
                            this.OnRowEnter(ref gridCell, x, y, true, true);
                            if (this.IsInnerCellOutOfBounds(x, y))
                            {
                                return false;
                            }
                            this.OnCellEnter(ref gridCell, x, y);
                            if (this.IsInnerCellOutOfBounds(x, y))
                            {
                                return false;
                            }
                            if ((this.Focused && !this.IsCurrentCellInEditMode) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                            {
                                this.BeginEditInternal(true);
                            }
                        }
                        return false;
                    }
                    if (this.IsInnerCellOutOfBounds(x, y))
                    {
                        return false;
                    }
                    this.OnRowValidated(ref gridCell, x, y);
                }
            }
            else if (!this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, false, this.ptCurrentCell.Y != rowIndex))
            {
                return false;
            }
            if (this.IsColumnOutOfBounds(columnIndex))
            {
                return false;
            }
            if (rowIndex >= this.Rows.Count)
            {
                int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
                if ((forCurrentCellChange && (this.ptCurrentCell.X == -1)) && (lastRow != -1))
                {
                    this.SetAndSelectCurrentCellAddress(columnIndex, lastRow, true, false, false, false, false);
                }
                return false;
            }
            if ((rowIndex > -1) && ((this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) == GridElementStates.None))
            {
                return false;
            }
            return true;
        }

        internal void CompleteCellsCollection(GridRow gridRow)
        {
            int count = gridRow.Cells.Count;
            if (this.Columns.Count > count)
            {
                int index = 0;
                GridCell[] gridCells = new GridCell[this.Columns.Count - count];
                for (int i = count; i < this.Columns.Count; i++)
                {
                    if (this.Columns[i].CellTemplate == null)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_AColumnHasNoCellTemplate"));
                    }
                    gridCells[index] = (GridCell) this.Columns[i].CellTemplate.Clone();
                    index++;
                }
                gridRow.Cells.AddRange(gridCells);
            }
        }

        private int ComputeFirstVisibleScrollingColumn()
        {
            if (this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen) >= this.layout.Data.Width)
            {
                this.negOffset = 0;
                return -1;
            }
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen);
            if (this.horizontalOffset == 0)
            {
                this.negOffset = 0;
                if (firstColumn != null)
                {
                    return firstColumn.Index;
                }
                return -1;
            }
            int num = 0;
            while (firstColumn != null)
            {
                num += firstColumn.Thickness;
                if (num > this.horizontalOffset)
                {
                    break;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
            }
            if (firstColumn == null)
            {
                this.negOffset = 0;
                firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen);
                if (firstColumn != null)
                {
                    return firstColumn.Index;
                }
                return -1;
            }
            this.negOffset = firstColumn.Thickness - (num - this.horizontalOffset);
            return firstColumn.Index;
        }

        private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight)
        {
            int num = this.layout.Data.Height - totalVisibleFrozenHeight;
            int height = 0;
            int num3 = 0;
            int count = this.Rows.Count;
            if ((count == 0) || (num <= 0))
            {
                return 0;
            }
            count--;
            GridElementStates rowState = this.Rows.GetRowState(count);
            if ((rowState & GridElementStates.Frozen) != GridElementStates.None)
            {
                return 0;
            }
            if ((rowState & GridElementStates.Visible) == GridElementStates.None)
            {
                count = this.Rows.GetPreviousRow(count, GridElementStates.Visible, GridElementStates.Frozen);
            }
            if (count != -1)
            {
                height = this.Rows.SharedRow(count).GetHeight(count);
                if (height > num)
                {
                    return height;
                }
            }
            while ((count != -1) && ((num3 + height) <= num))
            {
                num3 += height;
                count = this.Rows.GetPreviousRow(count, GridElementStates.Visible, GridElementStates.Frozen);
                if (count != -1)
                {
                    height = this.Rows.SharedRow(count).GetHeight(count);
                }
            }
            return num3;
        }

        private int ComputeHeightOfScrolledOffRows()
        {
            int num = 0;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                if (firstRow == -1)
                {
                    return num;
                }
                while (firstRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    num += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible);
                }
            }
            return num;
        }

        private int ComputeHeightOfTrailingScrollingRows()
        {
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
                return (this.Rows.GetRowsHeight(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lastRow) + this.Rows.SharedRow(lastRow).GetHeight(lastRow));
            }
            return 0;
        }

        private bool ComputeLayout()
        {
            this.ClearRegionCache();
            LayoutData data = new LayoutData(this.layout);
            Rectangle resizeBoxRect = this.layout.ResizeBoxRect;
            if ((this.normalClientRectangle.Width > 0) || (this.normalClientRectangle.Height > 0))
            {
                data.Inside = this.normalClientRectangle;
            }
            else
            {
                data.Inside = base.ClientRectangle;
            }
            Rectangle inside = data.Inside;
            int borderWidth = this.BorderWidth;
            inside.Inflate(-borderWidth, -borderWidth);
            if (inside.Height < 0)
            {
                inside.Height = 0;
            }
            if (inside.Width < 0)
            {
                inside.Width = 0;
            }
            Rectangle rectangle3 = inside;
            if (this.layout.ColumnHeadersVisible)
            {
                Rectangle rectangle4 = rectangle3;
                rectangle4.Height = Math.Min(this.columnHeadersHeight, rectangle4.Height);
                rectangle3.Y += rectangle4.Height;
                rectangle3.Height -= rectangle4.Height;
                data.ColumnHeaders = rectangle4;
            }
            else
            {
                data.ColumnHeaders = Rectangle.Empty;
            }
            if (this.layout.RowHeadersVisible)
            {
                Rectangle rectangle5 = rectangle3;
                rectangle5.Width = Math.Min(this.rowHeadersWidth, rectangle5.Width);
                if (this.RightToLeftInternal)
                {
                    rectangle5.X += rectangle3.Width - rectangle5.Width;
                }
                else
                {
                    rectangle3.X += rectangle5.Width;
                }
                rectangle3.Width -= rectangle5.Width;
                data.RowHeaders = rectangle5;
                if (this.layout.ColumnHeadersVisible)
                {
                    Rectangle columnHeaders = data.ColumnHeaders;
                    Rectangle rectangle6 = columnHeaders;
                    rectangle6.Width = Math.Min(this.rowHeadersWidth, rectangle6.Width);
                    columnHeaders.Width -= rectangle6.Width;
                    if (this.RightToLeftInternal)
                    {
                        rectangle6.X += rectangle3.Width;
                    }
                    else
                    {
                        columnHeaders.X += rectangle6.Width;
                    }
                    data.TopLeftHeader = rectangle6;
                    data.ColumnHeaders = columnHeaders;
                }
                else
                {
                    data.TopLeftHeader = Rectangle.Empty;
                }
            }
            else
            {
                data.RowHeaders = Rectangle.Empty;
                data.TopLeftHeader = Rectangle.Empty;
            }
            if (this.SingleVerticalBorderAdded)
            {
                if (!this.RightToLeftInternal)
                {
                    rectangle3.X++;
                }
                if (rectangle3.Width > 0)
                {
                    rectangle3.Width--;
                }
            }
            if (this.SingleHorizontalBorderAdded)
            {
                rectangle3.Y++;
                if (rectangle3.Height > 0)
                {
                    rectangle3.Height--;
                }
            }
            data.Data = rectangle3;
            data.Inside = inside;
            this.layout = data;
            this.layout.dirty = false;
            bool flag = this.AdjustFillingColumns();
            this.layout = data;
            this.LayoutScrollBars();
            if (!resizeBoxRect.Equals(this.layout.ResizeBoxRect) && !this.layout.ResizeBoxRect.IsEmpty)
            {
                base.Invalidate(this.layout.ResizeBoxRect);
            }
            return flag;
        }

        private void ComputeLayoutShortcut(bool computeVisibleRows)
        {
            if (computeVisibleRows)
            {
                this.ComputeVisibleRows();
            }
            if (this.vertScrollBar.Enabled)
            {
                int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible);
                int num2 = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                int num3 = this.vertScrollBar.Value;
                int num4 = Math.Max(((this.vertScrollBar.Height - (2 * SystemInformation.VerticalScrollBarArrowHeight)) * this.vertScrollBar.LargeChange) / this.vertScrollBar.Maximum, 8);
                this.vertScrollBar.Maximum = rowsHeight - num2;
                this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
                this.vertScrollBar.LargeChange = this.layout.Data.Height - num2;
                this.verticalOffset = this.vertScrollBar.Value;
                if (this.vertScrollBar.Visible && ((num3 != this.verticalOffset) || (num4 != Math.Max(((this.vertScrollBar.Height - (2 * SystemInformation.VerticalScrollBarArrowHeight)) * this.vertScrollBar.LargeChange) / this.vertScrollBar.Maximum, 8))))
                {
                    this.vertScrollBar.Invalidate();
                }
            }
        }

        private void ComputeVisibleColumns()
        {
            GridColumn gridColumnStart = null;
            int num = 0;
            int num2 = 0;
            int width = this.layout.Data.Width;
            int num4 = 0;
            int num5 = 0;
            int num6 = -1;
            int index = -1;
            int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
            if ((width <= 0) || (this.Columns.GetColumnCount(GridElementStates.Visible) == 0))
            {
                this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
                this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
                this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
                this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                this.displayedBandsInfo.LastDisplayedFrozenCol = -1;
                this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
            }
            else
            {
                for (gridColumnStart = this.Columns.GetFirstColumn(GridElementStates.None); gridColumnStart != null; gridColumnStart = this.Columns.GetNextColumn(gridColumnStart, GridElementStates.None, GridElementStates.None))
                {
                    if (!gridColumnStart.Frozen && gridColumnStart.Visible)
                    {
                        break;
                    }
                    if (gridColumnStart.Visible)
                    {
                        if (num6 == -1)
                        {
                            num6 = gridColumnStart.Index;
                        }
                        num4 += gridColumnStart.Width;
                        num5++;
                        index = gridColumnStart.Index;
                        if (num4 >= width)
                        {
                            break;
                        }
                    }
                }
                if ((num4 < width) && (firstDisplayedScrollingCol >= 0))
                {
                    gridColumnStart = this.Columns[firstDisplayedScrollingCol];
                    if (gridColumnStart.Frozen)
                    {
                        gridColumnStart = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen);
                        this.negOffset = 0;
                        if (gridColumnStart == null)
                        {
                            this.displayedBandsInfo.FirstDisplayedFrozenCol = num6;
                            this.displayedBandsInfo.LastDisplayedFrozenCol = index;
                            this.displayedBandsInfo.NumDisplayedFrozenCols = num5;
                            this.displayedBandsInfo.FirstDisplayedScrollingCol = this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                            this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                            return;
                        }
                        firstDisplayedScrollingCol = gridColumnStart.Index;
                    }
                    num4 -= this.negOffset;
                    while ((num4 < width) && (gridColumnStart != null))
                    {
                        num4 += gridColumnStart.Thickness;
                        num2++;
                        gridColumnStart = this.Columns.GetNextColumn(gridColumnStart, GridElementStates.Visible, GridElementStates.None);
                    }
                    num = num2;
                    if (num4 < width)
                    {
                        bool flag = false;
                        if (this.negOffset > 0)
                        {
                            flag = true;
                            if ((width - num4) > this.negOffset)
                            {
                                num4 += this.negOffset;
                                this.horizontalOffset -= this.negOffset;
                                this.negOffset = 0;
                            }
                            else
                            {
                                this.horizontalOffset -= width - num4;
                                this.negOffset -= width - num4;
                                num4 = width;
                            }
                        }
                        if ((num4 < width) && (this.horizontalOffset > 0))
                        {
                            gridColumnStart = this.Columns.GetPreviousColumn(this.Columns[firstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.Frozen);
                            while ((gridColumnStart != null) && ((num4 + gridColumnStart.Thickness) <= width))
                            {
                                num4 += gridColumnStart.Thickness;
                                num2++;
                                flag = true;
                                firstDisplayedScrollingCol = gridColumnStart.Index;
                                this.horizontalOffset -= gridColumnStart.Thickness;
                                gridColumnStart = this.Columns.GetPreviousColumn(gridColumnStart, GridElementStates.Visible, GridElementStates.Frozen);
                            }
                        }
                        if ((num4 < width) && (this.horizontalOffset > 0))
                        {
                            gridColumnStart = this.Columns.GetPreviousColumn(this.Columns[firstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.Frozen);
                            firstDisplayedScrollingCol = gridColumnStart.Index;
                            this.negOffset = (gridColumnStart.Thickness - width) + num4;
                            this.horizontalOffset -= width - num4;
                            num2++;
                            flag = true;
                            num4 = width;
                        }
                        num = num2;
                        if (flag)
                        {
                            this.InvalidateData();
                            base.Invalidate(this.layout.ColumnHeaders);
                        }
                    }
                    int num9 = num - 1;
                    if (num4 > width)
                    {
                        num9--;
                    }
                    if (num9 < 0)
                    {
                        this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                    }
                    else
                    {
                        gridColumnStart = this.Columns[firstDisplayedScrollingCol];
                        for (int i = 0; i < num9; i++)
                        {
                            gridColumnStart = this.Columns.GetNextColumn(gridColumnStart, GridElementStates.Visible, GridElementStates.None);
                        }
                        this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = gridColumnStart.Index;
                    }
                }
                else
                {
                    this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                }
                this.displayedBandsInfo.FirstDisplayedFrozenCol = num6;
                this.displayedBandsInfo.LastDisplayedFrozenCol = index;
                this.displayedBandsInfo.NumDisplayedFrozenCols = num5;
                this.displayedBandsInfo.FirstDisplayedScrollingCol = firstDisplayedScrollingCol;
                this.displayedBandsInfo.NumDisplayedScrollingCols = num;
            }
        }

        private void ComputeVisibleRows()
        {
            int num = -1;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            int num3 = -1;
            int num4 = -1;
            int num5 = 0;
            int height = this.layout.Data.Height;
            int num7 = 0;
            int num8 = 0;
            int count = this.Rows.Count;
            if ((height <= 0) || (count == 0))
            {
                this.displayedBandsInfo.NumDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedScrollingRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                this.displayedBandsInfo.FirstDisplayedFrozenRow = this.displayedBandsInfo.FirstDisplayedScrollingRow = this.displayedBandsInfo.LastDisplayedFrozenRow = this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
            }
            else
            {
                int rowIndex = 0;
                while (rowIndex < count)
                {
                    GridElementStates rowState = this.Rows.GetRowState(rowIndex);
                    if (((rowState & GridElementStates.Frozen) == GridElementStates.None) && ((rowState & GridElementStates.Visible) != GridElementStates.None))
                    {
                        break;
                    }
                    if ((rowState & GridElementStates.Visible) != GridElementStates.None)
                    {
                        num7 += this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                        if (num == -1)
                        {
                            num = rowIndex;
                        }
                        num3 = rowIndex;
                        if (num7 <= height)
                        {
                            num5++;
                        }
                        if (num7 >= height)
                        {
                            break;
                        }
                    }
                    rowIndex++;
                }
                if (num7 > height)
                {
                    this.displayedBandsInfo.NumDisplayedFrozenRows = num5 + 1;
                }
                else
                {
                    this.displayedBandsInfo.NumDisplayedFrozenRows = num5;
                }
                if ((num7 >= height) || (rowIndex >= count))
                {
                    this.displayedBandsInfo.NumDisplayedScrollingRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                    firstDisplayedScrollingRow = -1;
                }
                else
                {
                    if (firstDisplayedScrollingRow == -1)
                    {
                        firstDisplayedScrollingRow = rowIndex;
                    }
                    while ((firstDisplayedScrollingRow < count) && (((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Frozen) != GridElementStates.None) || ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Visible) == GridElementStates.None)))
                    {
                        firstDisplayedScrollingRow++;
                    }
                    for (int i = firstDisplayedScrollingRow; i < count; i++)
                    {
                        if ((this.Rows.GetRowState(i) & GridElementStates.Visible) != GridElementStates.None)
                        {
                            num7 += this.Rows.SharedRow(i).GetHeight(i);
                            num8++;
                            num4 = i;
                        }
                        if (num7 >= height)
                        {
                            break;
                        }
                    }
                    if (num7 < height)
                    {
                        for (int j = firstDisplayedScrollingRow - 1; j >= num5; j--)
                        {
                            if ((this.Rows.GetRowState(j) & (GridElementStates.Visible | GridElementStates.Frozen)) == GridElementStates.Visible)
                            {
                                int num13 = this.Rows.SharedRow(j).GetHeight(j);
                                if ((num7 + num13) > height)
                                {
                                    break;
                                }
                                num7 += num13;
                                firstDisplayedScrollingRow = j;
                                num8++;
                                num4 = j;
                            }
                        }
                    }
                    this.displayedBandsInfo.NumDisplayedScrollingRows = num8;
                    if (num7 > height)
                    {
                        this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num8 - 1;
                    }
                    else
                    {
                        this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num8;
                    }
                    if (num8 == 0)
                    {
                        firstDisplayedScrollingRow = -1;
                    }
                }
                this.displayedBandsInfo.FirstDisplayedFrozenRow = num;
                this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = num5;
                this.displayedBandsInfo.LastDisplayedFrozenRow = num3;
                this.displayedBandsInfo.LastDisplayedScrollingRow = num4;
            }
        }

        private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y)
        {
            int columnXFromIndex;
            int rowYFromIndex;
            if (columnIndex > -1)
            {
                columnXFromIndex = this.GetColumnXFromIndex(columnIndex);
                if (this.RightToLeftInternal)
                {
                    columnXFromIndex -= this.Columns[columnIndex].Width;
                }
            }
            else if (this.RightToLeftInternal)
            {
                columnXFromIndex = this.layout.RowHeaders.Left - 1;
            }
            else
            {
                columnXFromIndex = this.layout.RowHeaders.Left;
            }
            if (rowIndex > -1)
            {
                rowYFromIndex = this.GetRowYFromIndex(rowIndex);
            }
            else
            {
                rowYFromIndex = this.layout.ColumnHeaders.Top;
            }
            return new Point(columnXFromIndex + x, rowYFromIndex + y);
        }

        private void CorrectColumnDisplayIndexesAfterDeletion(GridColumn gridColumn)
        {
            try
            {
                this.gridOper[0x800] = true;
                foreach (GridColumn column in this.Columns)
                {
                    if (column.DisplayIndex > gridColumn.DisplayIndex)
                    {
                        column.DisplayIndexInternal = column.DisplayIndex - 1;
                        column.DisplayIndexHasChanged = true;
                    }
                }
                this.FlushDisplayIndexChanged(true);
            }
            finally
            {
                this.gridOper[0x800] = false;
                this.FlushDisplayIndexChanged(false);
            }
        }

        private void CorrectColumnDisplayIndexesAfterInsertion(GridColumn gridColumn)
        {
            try
            {
                this.gridOper[0x800] = true;
                foreach (GridColumn column in this.Columns)
                {
                    if ((column != gridColumn) && (column.DisplayIndex >= gridColumn.DisplayIndex))
                    {
                        column.DisplayIndexInternal = column.DisplayIndex + 1;
                        column.DisplayIndexHasChanged = true;
                    }
                }
                this.FlushDisplayIndexChanged(true);
            }
            finally
            {
                this.gridOper[0x800] = false;
                this.FlushDisplayIndexChanged(false);
            }
        }

        private void CorrectColumnFrozenState(GridColumn gridColumn, int anticipatedColumnIndex)
        {
            int num;
            GridColumn columnAtDisplayIndex;
            GridColumn column2;
            if ((gridColumn.DisplayIndex == -1) || (gridColumn.DisplayIndex > this.Columns.Count))
            {
                num = anticipatedColumnIndex;
            }
            else
            {
                num = gridColumn.DisplayIndex;
            }
            int displayIndex = num - 1;
            do
            {
                columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(displayIndex);
                displayIndex--;
            }
            while ((displayIndex >= 0) && ((columnAtDisplayIndex == null) || !columnAtDisplayIndex.Visible));
            if (((columnAtDisplayIndex != null) && !columnAtDisplayIndex.Frozen) && gridColumn.Frozen)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddFrozenColumn"));
            }
            displayIndex = num;
            do
            {
                column2 = this.Columns.GetColumnAtDisplayIndex(displayIndex);
                displayIndex++;
            }
            while ((displayIndex < this.Columns.Count) && ((column2 == null) || !column2.Visible));
            if (((column2 != null) && column2.Frozen) && !gridColumn.Frozen)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddNonFrozenColumn"));
            }
        }

        private void CorrectColumnFrozenStates(GridColumn[] gridColumns)
        {
            GridColumn column;
            Grid view = new Grid();
            foreach (GridColumn column2 in this.Columns)
            {
                column = (GridColumn) column2.Clone();
                column.DisplayIndex = column2.DisplayIndex;
                view.Columns.Add(column);
            }
            foreach (GridColumn column3 in gridColumns)
            {
                column = (GridColumn) column3.Clone();
                column.DisplayIndex = column3.DisplayIndex;
                view.Columns.Add(column);
            }
        }

        private void CorrectColumnFrozenStates(GridColumn gridColumn, bool frozenStateChanging)
        {
            GridColumn column;
            if ((!gridColumn.Frozen || frozenStateChanging) && (gridColumn.Frozen || !frozenStateChanging))
            {
                column = this.Columns.GetNextColumn(gridColumn, GridElementStates.Visible, GridElementStates.Frozen);
                if (column == null)
                {
                    GridColumn gridColumnStart = gridColumn;
                    do
                    {
                        column = this.Columns.GetNextColumn(gridColumnStart, GridElementStates.Visible, GridElementStates.None);
                        if (column != null)
                        {
                            gridColumnStart = column;
                        }
                    }
                    while (column != null);
                    if (gridColumnStart != gridColumn)
                    {
                        column = gridColumnStart;
                    }
                }
                while ((column != null) && this.Columns.DisplayInOrder(gridColumn.Index, column.Index))
                {
                    column.Frozen = false;
                    column = this.Columns.GetPreviousColumn(column, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                }
            }
            else
            {
                column = this.Columns.GetPreviousColumn(gridColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                if (column == null)
                {
                    GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                    if (firstColumn != gridColumn)
                    {
                        column = firstColumn;
                    }
                }
                while ((column != null) && this.Columns.DisplayInOrder(column.Index, gridColumn.Index))
                {
                    column.Frozen = true;
                    column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.Frozen);
                }
            }
        }

        private void CorrectColumnFrozenStatesForMove(GridColumn gridColumn, int newDisplayIndex)
        {
            if ((gridColumn.Visible && ((newDisplayIndex >= gridColumn.DisplayIndex) || !gridColumn.Frozen)) && ((newDisplayIndex <= gridColumn.DisplayIndex) || gridColumn.Frozen))
            {
                int num2;
                int count = this.Columns.Count;
                if (newDisplayIndex < gridColumn.DisplayIndex)
                {
                    GridColumn columnAtDisplayIndex;
                    num2 = newDisplayIndex;
                    do
                    {
                        columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num2);
                        num2++;
                    }
                    while ((num2 < count) && (((columnAtDisplayIndex == null) || (columnAtDisplayIndex == gridColumn)) || !columnAtDisplayIndex.Visible));
                    if ((columnAtDisplayIndex != null) && columnAtDisplayIndex.Frozen)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotMoveNonFrozenColumn"));
                    }
                }
                else
                {
                    GridColumn column2;
                    num2 = newDisplayIndex;
                    do
                    {
                        column2 = this.Columns.GetColumnAtDisplayIndex(num2);
                        num2--;
                    }
                    while ((num2 >= 0) && ((column2 == null) || !column2.Visible));
                    if ((column2 != null) && !column2.Frozen)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotMoveFrozenColumn"));
                    }
                }
            }
        }

        private void CorrectColumnIndexesAfterDeletion(GridColumn gridColumn)
        {
            for (int i = gridColumn.Index; i < this.Columns.Count; i++)
            {
                this.Columns[i].IndexInternal = this.Columns[i].Index - 1;
            }
        }

        private void CorrectColumnIndexesAfterInsertion(GridColumn gridColumn, int insertionCount)
        {
            for (int i = gridColumn.Index + insertionCount; i < this.Columns.Count; i++)
            {
                this.Columns[i].IndexInternal = i;
            }
        }

        private void CorrectFocus(bool onlyIfGridHasFocus)
        {
            if ((!onlyIfGridHasFocus || this.Focused) && (this.editingControl != null))
            {
                this.editingControl.FocusInternal();
            }
        }

        private void CorrectRowFrozenState(GridRow gridRow, GridElementStates rowState, int anticipatedRowIndex)
        {
            int rowIndex = this.Rows.GetPreviousRow(anticipatedRowIndex, GridElementStates.Visible, GridElementStates.None);
            if (((rowIndex != -1) && ((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) == GridElementStates.None)) && ((rowState & GridElementStates.Frozen) != GridElementStates.None))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddFrozenRow"));
            }
            int num2 = this.Rows.GetNextRow((rowIndex == -1) ? (anticipatedRowIndex - 1) : rowIndex, GridElementStates.Visible, GridElementStates.None);
            if (((num2 != -1) && ((this.Rows.GetRowState(num2) & GridElementStates.Frozen) != GridElementStates.None)) && ((rowState & GridElementStates.Frozen) == GridElementStates.None))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddNonFrozenRow"));
            }
        }

        private void CorrectRowFrozenStates(GridRow[] gridRows, int rowIndexInserted)
        {
            bool flag = false;
            bool flag2 = true;
            bool flag3 = false;
            int previousRow = this.Rows.GetPreviousRow(rowIndexInserted, GridElementStates.Visible);
            if (previousRow != -1)
            {
                flag2 = (this.Rows.GetRowState(previousRow) & GridElementStates.Frozen) == GridElementStates.Frozen;
            }
            previousRow = this.Rows.GetNextRow(rowIndexInserted - 1, GridElementStates.Visible);
            if (previousRow != -1)
            {
                flag = true;
                flag3 = (this.Rows.GetRowState(previousRow) & GridElementStates.Frozen) == GridElementStates.Frozen;
            }
            for (int i = 0; i < gridRows.Length; i++)
            {
                bool frozen = gridRows[i].Frozen;
                if (!flag2 && frozen)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddFrozenRow"));
                }
                flag2 = frozen;
                if (((i == (gridRows.Length - 1)) && !frozen) && (flag && flag3))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddNonFrozenRow"));
                }
            }
        }

        private void CorrectRowFrozenStates(GridRow gridRow, int rowIndex, bool frozenStateChanging)
        {
            int nextRow;
            if ((((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) == GridElementStates.None) || frozenStateChanging) && (((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) != GridElementStates.None) || !frozenStateChanging))
            {
                nextRow = this.Rows.GetNextRow(rowIndex, GridElementStates.Visible, GridElementStates.Frozen);
                if (nextRow == -1)
                {
                    int indexStart = rowIndex;
                    do
                    {
                        nextRow = this.Rows.GetNextRow(indexStart, GridElementStates.Visible);
                        if (nextRow != -1)
                        {
                            indexStart = nextRow;
                        }
                    }
                    while (nextRow != -1);
                    if (indexStart != rowIndex)
                    {
                        nextRow = indexStart;
                    }
                }
                while ((nextRow != -1) && (nextRow > rowIndex))
                {
                    this.Rows.SetRowState(nextRow, GridElementStates.Frozen, false);
                    nextRow = this.Rows.GetPreviousRow(nextRow, GridElementStates.Visible | GridElementStates.Frozen);
                }
            }
            else
            {
                nextRow = this.Rows.GetPreviousRow(rowIndex, GridElementStates.Visible | GridElementStates.Frozen);
                if (nextRow == -1)
                {
                    int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                    if (firstRow != rowIndex)
                    {
                        nextRow = firstRow;
                    }
                }
                while ((nextRow != -1) && (nextRow < rowIndex))
                {
                    this.Rows.SetRowState(nextRow, GridElementStates.Frozen, true);
                    nextRow = this.Rows.GetNextRow(nextRow, GridElementStates.Visible, GridElementStates.Frozen);
                }
            }
        }

        private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted)
        {
            int count = this.Rows.Count;
            for (int i = rowIndexDeleted; i < count; i++)
            {
                GridRow row = this.Rows.SharedRow(i);
                if (row.Index >= 0)
                {
                    row.IndexInternal = row.Index - 1;
                }
            }
            if (this.newRowIndex == rowIndexDeleted)
            {
                this.newRowIndex = -1;
            }
            else if (this.newRowIndex != -1)
            {
                this.newRowIndex--;
            }
        }

        private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount)
        {
            int count = this.Rows.Count;
            for (int i = rowIndexInserted + insertionCount; i < count; i++)
            {
                GridRow row = this.Rows.SharedRow(i);
                if (row.Index >= 0)
                {
                    row.IndexInternal = row.Index + insertionCount;
                }
            }
            if (this.newRowIndex != -1)
            {
                this.newRowIndex += insertionCount;
            }
        }

        /// <summary>Creates a new accessible object for the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A new <see cref="T:MControl.GridView.Grid.GridAccessibleObject"></see> for the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        protected override AccessibleObject CreateAccessibilityInstance()
        {
            return new GridAccessibleObject(this);
        }

        /// <summary>Creates and returns a new <see cref="T:MControl.GridView.GridColumnCollection"></see>.</summary>
        /// <returns>An empty <see cref="T:MControl.GridView.GridColumnCollection"></see>.</returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected virtual GridColumnCollection CreateColumnsInstance()
        {
            return new GridColumnCollection(this);
        }

        /// <summary>Creates and returns a new <see cref="T:System.Windows.Forms.Control.ControlCollection"></see> that can be cast to type <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</summary>
        /// <returns>An empty <see cref="T:System.Windows.Forms.Control.ControlCollection"></see>.</returns>
        protected override Control.ControlCollection CreateControlsInstance()
        {
            return new GridControlCollection(this);
        }

        /// <summary>Creates and returns a new <see cref="T:MControl.GridView.GridRowCollection"></see>.</summary>
        /// <returns>An empty <see cref="T:MControl.GridView.GridRowCollection"></see>.</returns>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected virtual GridRowCollection CreateRowsInstance()
        {
            return new GridRowCollection(this);
        }

        private MControl.Util.NativeMethods.RECT[] CreateScrollableRegion(Rectangle scroll)
        {
            if (this.cachedScrollableRegion == null)
            {
                using (Region region = new Region(scroll))
                {
                    IntPtr zero = IntPtr.Zero;
                    using (Graphics graphics = base.CreateGraphicsInternal())
                    {
                        zero = region.GetHrgn(graphics);
                    }
                    if (zero != IntPtr.Zero)
                    {
                        this.cachedScrollableRegion = System.Windows.Forms.UnsafeNativeMethods.GetRectsFromRegion(zero);
                        System.Windows.Forms.IntSecurity.ObjectFromWin32Handle.Assert();
                        try
                        {
                            region.ReleaseHrgn(zero);
                        }
                        finally
                        {
                            CodeAccessPermission.RevertAssert();
                        }
                    }
                }
            }
            return this.cachedScrollableRegion;
        }

        private void GridHScrolled(object sender, ScrollEventArgs se)
        {
            if (base.Enabled)
            {
                if ((se.Type == ScrollEventType.SmallIncrement) || (se.Type == ScrollEventType.SmallDecrement))
                {
                    int columns = (se.Type == ScrollEventType.SmallIncrement) ? 1 : -1;
                    this.ScrollColumns(columns);
                    se.NewValue = this.HorizontalOffset;
                }
                else if (se.Type != ScrollEventType.EndScroll)
                {
                    this.HorizontalOffset = se.NewValue;
                }
            }
        }

        private void GridVScrolled(object sender, ScrollEventArgs se)
        {
            if (base.Enabled)
            {
                int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                switch (se.Type)
                {
                    case ScrollEventType.SmallDecrement:
                        if (this.vertScrollBar.Value != this.vertScrollBar.Minimum)
                        {
                            this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
                        }
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.SmallIncrement:
                        if ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight)))
                        {
                            this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
                        }
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.LargeDecrement:
                        this.VerticalOffset -= this.vertScrollBar.LargeChange;
                        se.NewValue = this.VerticalOffset;
                        return;

                    case ScrollEventType.LargeIncrement:
                    {
                        int height = this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        this.VerticalOffset += Math.Max(height, this.vertScrollBar.LargeChange);
                        se.NewValue = this.VerticalOffset;
                        return;
                    }
                    case ScrollEventType.ThumbPosition:
                        return;

                    case ScrollEventType.ThumbTrack:
                    case ScrollEventType.First:
                    case ScrollEventType.Last:
                        if (se.NewValue < (this.vertScrollBar.Maximum - this.vertScrollBar.LargeChange))
                        {
                            this.VerticalOffset = se.NewValue;
                            return;
                        }
                        this.VerticalOffset = this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
                        return;
                }
            }
        }

        private void DiscardNewRow()
        {
            GridRowCancelEventArgs e = new GridRowCancelEventArgs(this.Rows[this.newRowIndex]);
            this.OnUserDeletingRow(e);
            if (!e.Cancel)
            {
                GridRow gridRow = this.Rows[this.newRowIndex];
                this.Rows.RemoveAtInternal(this.newRowIndex, false);
                GridRowEventArgs args2 = new GridRowEventArgs(gridRow);
                this.OnUserDeletedRow(args2);
                if (this.AllowUserToAddRowsInternal)
                {
                    this.newRowIndex = this.Rows.Count - 1;
                    this.OnDefaultValuesNeeded(new GridRowEventArgs(this.Rows[this.newRowIndex]));
                    this.InvalidateRowPrivate(this.newRowIndex);
                }
            }
        }

        private void DiscardZonesInScrollingArea(ref Rectangle rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows)
        {
            rectScrollingArea.Width -= emptyBackgroundWidth;
            rectScrollingArea.Height -= emptyBackgroundHeight;
            if (this.RightToLeftInternal)
            {
                rectScrollingArea.X += emptyBackgroundWidth;
            }
            if (discardFrozenColumns)
            {
                int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen);
                if (!this.RightToLeftInternal)
                {
                    rectScrollingArea.X += columnsWidth;
                }
                rectScrollingArea.Width -= columnsWidth;
            }
            if (discardFrozenRows)
            {
                rectScrollingArea.Y += frozenVisibleRowsHeight;
                rectScrollingArea.Height -= frozenVisibleRowsHeight;
            }
        }

        /// <summary>Returns the number of columns displayed to the user.</summary>
        /// <returns>The number of columns displayed to the user.</returns>
        /// <param name="includePartialColumns">true to include partial columns in the displayed column count; otherwise, false. </param>
        /// <filterpriority>1</filterpriority>
        public int DisplayedColumnCount(bool includePartialColumns)
        {
            int width = this.layout.Data.Width;
            int num2 = 0;
            int num3 = 0;
            int num4 = 0;
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
            while ((firstColumn != null) && (num2 < width))
            {
                num4++;
                num2 += firstColumn.Thickness;
                if (num2 <= width)
                {
                    num3++;
                    firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                }
            }
            if ((num2 < width) && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                if (this.negOffset > 0)
                {
                    num2 -= this.negOffset;
                    num3--;
                }
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                while ((firstColumn != null) && (num2 < width))
                {
                    num4++;
                    num2 += firstColumn.Thickness;
                    if (num2 <= width)
                    {
                        num3++;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                    }
                }
            }
            if (!includePartialColumns)
            {
                return num3;
            }
            return num4;
        }

        /// <summary>Returns the number of rows displayed to the user.</summary>
        /// <returns>The number of rows displayed to the user.</returns>
        /// <param name="includePartialRow">true to include partial rows in the displayed row count; otherwise, false. </param>
        /// <filterpriority>1</filterpriority>
        public int DisplayedRowCount(bool includePartialRow)
        {
            if (!includePartialRow)
            {
                return (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows + this.displayedBandsInfo.NumTotallyDisplayedScrollingRows);
            }
            return (this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                this.gridOper[0x100000] = true;
                try
                {
                    for (int i = 0; i < this.Columns.Count; i++)
                    {
                        this.Columns[i].Dispose();
                    }
                    this.Columns.Clear();
                    this.UnwireScrollBarsEvents();
                    if (this.vertScrollBar != null)
                    {
                        this.vertScrollBar.Dispose();
                        this.vertScrollBar = null;
                    }
                    if (this.horizScrollBar != null)
                    {
                        this.horizScrollBar.Dispose();
                        this.horizScrollBar = null;
                    }
                    if (this.pens != null)
                    {
                        if (this.pens.Count > 0)
                        {
                            foreach (Pen pen in this.pens.Values)
                            {
                                pen.Dispose();
                            }
                            this.pens.Clear();
                        }
                        this.pens = null;
                    }
                    if (this.brushes != null)
                    {
                        if (this.brushes.Count > 0)
                        {
                            foreach (SolidBrush brush in this.brushes.Values)
                            {
                                brush.Dispose();
                            }
                            this.brushes.Clear();
                        }
                        this.brushes = null;
                    }
                    this.DisposeCachedGraphics();
                    if (this.placeholderStringFormat != null)
                    {
                        this.placeholderStringFormat.Dispose();
                        this.placeholderStringFormat = null;
                    }
                    if (this.latestEditingControl != null)
                    {
                        this.latestEditingControl.Dispose();
                        this.latestEditingControl = null;
                    }
                    if (this.editingControl != null)
                    {
                        this.editingControl.Dispose();
                        this.editingControl = null;
                    }
                    if (this.editingPanel != null)
                    {
                        this.editingPanel.Dispose();
                        this.editingPanel = null;
                    }
                    if (this.dataConnection != null)
                    {
                        this.dataConnection.Dispose();
                    }
                }
                finally
                {
                    this.gridOper[0x100000] = false;
                }
            }
            base.Dispose(disposing);
        }

        private void DisposeCachedGraphics()
        {
            if (this.cachedGraphics != null)
            {
                this.cachedGraphics.Dispose();
                this.cachedGraphics = null;
            }
        }

        private void DrawColHeaderShadow(Graphics g, int mouseX)
        {
            Rectangle r = this.CalcColRelocationFeedbackRect(mouseX);
            this.DrawShadowRect(r);
            if (this.gridState2[0x400])
            {
                Rectangle rect = new Rectangle(0, this.layout.ColumnHeaders.Top, 3, this.layout.ColumnHeaders.Height);
                if (this.trackColumnEdge == -1)
                {
                    rect.X = this.GetColumnXFromIndex(this.Columns.GetFirstColumn(GridElementStates.Visible).Index);
                    if (this.RightToLeftInternal)
                    {
                        rect.X -= 3;
                    }
                }
                else
                {
                    int num = 0;
                    if (this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], GridElementStates.Visible, GridElementStates.None) == null)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            num = 3;
                        }
                    }
                    else if (this.RightToLeftInternal)
                    {
                        num = 0;
                    }
                    else
                    {
                        num = 2;
                    }
                    if (this.RightToLeftInternal)
                    {
                        rect.X = Math.Max(this.layout.ColumnHeaders.X, (this.GetColumnXFromIndex(this.trackColumnEdge) - this.Columns[this.trackColumnEdge].Width) - num);
                    }
                    else
                    {
                        rect.X = Math.Min((int) ((this.GetColumnXFromIndex(this.trackColumnEdge) + this.Columns[this.trackColumnEdge].Width) - num), (int) (this.layout.ColumnHeaders.Right - 3));
                    }
                }
                if (this.ApplyVisualStylesToHeaderCells)
                {
                    g.FillRectangle(this.GetCachedBrush(SystemColors.HotTrack), rect);
                }
                else
                {
                    ControlPaint.FillReversibleRectangle(base.RectangleToScreen(rect), System.Drawing.Color.White);
                }
            }
        }

        private void DrawColSplitBar(int mouseX)
        {
            Rectangle r = this.CalcColResizeFeedbackRect(mouseX);
            this.DrawSplitBar(r);
        }

        private void DrawRowSplitBar(int mouseY)
        {
            Rectangle r = this.CalcRowResizeFeedbackRect(mouseY);
            this.DrawSplitBar(r);
        }

        private void DrawShadowRect(Rectangle r)
        {
            IntPtr handle = base.Handle;
            IntPtr ptr2 = System.Windows.Forms.UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), MControl.Util.NativeMethods.NullHandleRef, 0x402);
            IntPtr ptr3 = ControlPaint.CreateHalftoneHBRUSH();
            IntPtr ptr4 = System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr3));
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y, r.Width, 3, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, (r.Y + r.Height) - 3, r.Width, 3, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y + 3, 3, r.Height - 6, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), (r.X + r.Width) - 3, r.Y + 3, 3, r.Height - 6, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr4));
            System.Windows.Forms.SafeNativeMethods.DeleteObject(new HandleRef(null, ptr3));
            System.Windows.Forms.UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, ptr2));
        }

        private void DrawSplitBar(Rectangle r)
        {
            IntPtr handle = base.Handle;
            IntPtr ptr2 = System.Windows.Forms.UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), MControl.Util.NativeMethods.NullHandleRef, 0x402);
            IntPtr ptr3 = ControlPaint.CreateHalftoneHBRUSH();
            IntPtr ptr4 = System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr3));
            System.Windows.Forms.SafeNativeMethods.PatBlt(new HandleRef(this, ptr2), r.X, r.Y, r.Width, r.Height, 0x5a0049);
            System.Windows.Forms.SafeNativeMethods.SelectObject(new HandleRef(this, ptr2), new HandleRef(null, ptr4));
            System.Windows.Forms.SafeNativeMethods.DeleteObject(new HandleRef(null, ptr3));
            System.Windows.Forms.UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, ptr2));
        }

        private void EditingControls_Click(object sender, EventArgs e)
        {
            MouseEventArgs args = e as MouseEventArgs;
            if (args != null)
            {
                this.EditingControls_CommonMouseEventHandler(sender, args, GridMouseEvent.Click);
            }
        }

        private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, GridMouseEvent dgvme)
        {
            int x = this.editingPanel.Location.X + e.X;
            int y = this.editingPanel.Location.Y + e.Y;
            if (sender == this.editingControl)
            {
                x += this.editingControl.Location.X;
                y += this.editingControl.Location.Y;
            }
            if ((dgvme == GridMouseEvent.MouseDown) && (e.Clicks == 1))
            {
                this.gridOper[0x1000] = false;
            }
            MouseEventArgs args = new MouseEventArgs(e.Button, e.Clicks, x, y, e.Delta);
            HitTestInfo info = this.HitTest(args.X, args.Y);
            int localX = args.X - info.ColumnX;
            if (this.RightToLeftInternal)
            {
                localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
            }
            GridCellMouseEventArgs args2 = new GridCellMouseEventArgs(info.col, info.row, localX, args.Y - info.RowY, args);
            try
            {
                this.gridState2[0x8000000] = true;
                if ((((dgvme == GridMouseEvent.MouseDown) || (dgvme == GridMouseEvent.Click)) || (dgvme == GridMouseEvent.MouseClick)) && ((((((DateTime.Now.Ticks - this.lastMouseClickInfo.timeStamp) / 0x2710L) <= SystemInformation.DoubleClickTime) && (e.Button == this.lastMouseClickInfo.button)) && ((e.Clicks == 1) && (args2.ColumnIndex == this.lastMouseClickInfo.col))) && (args2.RowIndex == this.lastMouseClickInfo.row)))
                {
                    Size doubleClickSize = SystemInformation.DoubleClickSize;
                    if ((Math.Abs((int) (args2.X - this.lastMouseClickInfo.x)) <= (doubleClickSize.Width / 2)) && (Math.Abs((int) (args2.Y - this.lastMouseClickInfo.y)) <= (doubleClickSize.Height / 2)))
                    {
                        args = new MouseEventArgs(e.Button, 2, x, y, e.Delta);
                        args2 = new GridCellMouseEventArgs(args2.ColumnIndex, args2.RowIndex, args2.X, args2.Y, args);
                        switch (dgvme)
                        {
                            case GridMouseEvent.Click:
                                this.OnDoubleClick(args);
                                if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellDoubleClick(new GridCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                                }
                                return;

                            case GridMouseEvent.DoubleClick:
                            case GridMouseEvent.MouseDoubleClick:
                                return;

                            case GridMouseEvent.MouseClick:
                                this.gridOper[0x1000] = true;
                                this.OnMouseDoubleClick(args);
                                if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellMouseDoubleClick(args2);
                                }
                                return;

                            case GridMouseEvent.MouseDown:
                                this.OnMouseDown(args);
                                if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                                {
                                    this.OnCellMouseDown(args2);
                                }
                                return;
                        }
                        return;
                    }
                }
                if (this.gridOper[0x1000])
                {
                    if (e.Clicks == 2)
                    {
                        args = new MouseEventArgs(e.Button, 1, x, y, e.Delta);
                        args2 = new GridCellMouseEventArgs(info.col, info.row, localX, args.Y - info.RowY, args);
                    }
                    switch (dgvme)
                    {
                        case GridMouseEvent.DoubleClick:
                            dgvme = GridMouseEvent.Click;
                            break;

                        case GridMouseEvent.MouseDoubleClick:
                            dgvme = GridMouseEvent.MouseClick;
                            break;
                    }
                }
                switch (dgvme)
                {
                    case GridMouseEvent.Click:
                        this.OnClick(args);
                        if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellClick(new GridCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                        }
                        return;

                    case GridMouseEvent.DoubleClick:
                        this.OnDoubleClick(args);
                        if (((e.Button == MouseButtons.Left) && (args2.ColumnIndex < this.Columns.Count)) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellDoubleClick(new GridCellEventArgs(args2.ColumnIndex, args2.RowIndex));
                        }
                        return;

                    case GridMouseEvent.MouseClick:
                        this.OnMouseClick(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseClick(args2);
                        }
                        return;

                    case GridMouseEvent.MouseDoubleClick:
                        this.OnMouseDoubleClick(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseDoubleClick(args2);
                        }
                        return;

                    case GridMouseEvent.MouseDown:
                        this.OnMouseDown(args);
                        if ((args2.ColumnIndex < this.Columns.Count) && (args2.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseDown(args2);
                        }
                        return;

                    case GridMouseEvent.MouseUp:
                        break;

                    case GridMouseEvent.MouseMove:
                        this.OnCellMouseMove(args2);
                        return;

                    default:
                        return;
                }
                if (this.gridState2[0x800000])
                {
                    MouseEventArgs args3 = new MouseEventArgs(e.Button, 2, x, y, e.Delta);
                    args2 = new GridCellMouseEventArgs(args2.ColumnIndex, args2.RowIndex, args2.X, args2.Y, args3);
                }
                this.OnCellMouseUp(args2);
                this.OnMouseUp(args);
            }
            finally
            {
                this.gridState2[0x8000000] = false;
            }
        }

        private void EditingControls_DoubleClick(object sender, EventArgs e)
        {
            MouseEventArgs args = e as MouseEventArgs;
            if (args != null)
            {
                this.EditingControls_CommonMouseEventHandler(sender, args, GridMouseEvent.DoubleClick);
            }
        }

        private void EditingControls_MouseClick(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, GridMouseEvent.MouseClick);
        }

        private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, GridMouseEvent.MouseDoubleClick);
        }

        private void EditingControls_MouseDown(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, GridMouseEvent.MouseDown);
        }

        private void EditingControls_MouseEnter(object sender, EventArgs e)
        {
            if (sender == this.editingPanel)
            {
                this.gridState1[0x1000000] = true;
                this.oldCursor = this.Cursor;
                this.CursorInternal = ((IGridEditingControl) this.editingControl).EditingPanelCursor;
            }
            if (this.gridState2[0x20])
            {
                this.OnMouseEnter(EventArgs.Empty);
            }
            this.UpdateMouseEnteredCell(null, null);
        }

        private void EditingControls_MouseLeave(object sender, EventArgs e)
        {
            if ((sender == this.editingPanel) && this.gridState1[0x1000000])
            {
                this.gridState1[0x1000000] = false;
                this.CursorInternal = this.oldCursor;
            }
            this.UpdateMouseEnteredCell(null, null);
            Point pt = base.PointToClient(Control.MousePosition);
            if (!base.ClientRectangle.Contains(pt))
            {
                this.OnMouseLeave(EventArgs.Empty);
            }
        }

        private void EditingControls_MouseMove(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, GridMouseEvent.MouseMove);
        }

        private void EditingControls_MouseUp(object sender, MouseEventArgs e)
        {
            this.EditingControls_CommonMouseEventHandler(sender, e, GridMouseEvent.MouseUp);
        }

        private void EndColumnHeadersResize(MouseEventArgs e)
        {
            try
            {
                if (this.currentRowSplitBar != -1)
                {
                    base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                    this.lastRowSplitBar = this.currentRowSplitBar = -1;
                }
                int num = Math.Min((int) (e.Y + this.mouseBarOffset), (int) (this.layout.Data.Bottom - 1));
                int num2 = ((num - this.layout.ColumnHeaders.Y) - this.ColumnHeadersHeight) + 1;
                if ((this.trackRowAnchor != num) && (num2 != 0))
                {
                    this.ColumnHeadersHeight += num2;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndColumnRelocation(MouseEventArgs e, HitTestInfo hti)
        {
            try
            {
                int num;
                if (this.lastHeaderShadow != -1)
                {
                    this.gridState2[0x400] = false;
                    this.trackColumnEdge = -1;
                    this.lastHeaderShadow = -1;
                    base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
                }
                if (this.ColumnRelocationTarget(e, hti, out num))
                {
                    if (num == -1)
                    {
                        this.Columns[this.trackColumn].DisplayIndex = 0;
                    }
                    else if (this.Columns[this.trackColumn].DisplayIndex > this.Columns[num].DisplayIndex)
                    {
                        this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex + 1;
                    }
                    else
                    {
                        this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex;
                    }
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndColumnResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentColSplitBar != -1)
                {
                    base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                    this.lastColSplitBar = this.currentColSplitBar = -1;
                }
                if (this.RightToLeftInternal)
                {
                    num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.X);
                    num2 = ((this.GetColumnXFromIndex(this.trackColumn) - this.Columns[this.trackColumn].Thickness) - num) + 1;
                }
                else
                {
                    num = Math.Min((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Right - 1));
                    num2 = (num - (this.GetColumnXFromIndex(this.trackColumn) + this.Columns[this.trackColumn].Thickness)) + 1;
                }
                if ((this.trackColAnchor != num) && (num2 != 0))
                {
                    int num3 = this.Columns[this.trackColumn].Thickness + num2;
                    this.Columns[this.trackColumn].Thickness = num3;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        /// <summary>Commits and ends the edit operation on the current cell using the default error context.</summary>
        /// <returns>true if the edit operation is committed and ended; otherwise, false.</returns>
        /// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        public bool EndEdit()
        {
            return this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing);
        }

        /// <summary>Commits and ends the edit operation on the current cell using the specified error context.</summary>
        /// <returns>true if the edit operation is committed and ended; otherwise, false.</returns>
        /// <param name="context">A bitwise combination of <see cref="T:MControl.GridView.GridDataErrorContexts"></see> values that specifies the context in which an error can occur. </param>
        /// <exception cref="T:System.Exception">The cell value could not be committed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        public bool EndEdit(GridDataErrorContexts context)
        {
            if (this.EditMode == GridEditMode.EditOnEnter)
            {
                return this.CommitEdit(context);
            }
            return this.EndEdit(context, GridValidateCellInternal.Never, false, false, false, false, false, true, true, true);
        }

        private bool EndEdit(GridDataErrorContexts context, GridValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell)
        {
            if (this.ptCurrentCell.X == -1)
            {
                return true;
            }
            this.gridOper[0x400000] = true;
            try
            {
                int y = this.ptCurrentCell.Y;
                int x = this.ptCurrentCell.X;
                GridCell currentCellInternal = this.CurrentCellInternal;
                GridDataErrorEventArgs args = this.CommitEdit(ref currentCellInternal, context, validateCell, fireCellLeave, fireCellEnter, fireRowLeave, fireRowEnter, fireLeave);
                if (args != null)
                {
                    if (args.ThrowException)
                    {
                        throw args.Exception;
                    }
                    if (args.Cancel)
                    {
                        return false;
                    }
                    args = this.CancelEditPrivate();
                    if (args != null)
                    {
                        if (args.ThrowException)
                        {
                            throw args.Exception;
                        }
                        if (args.Cancel)
                        {
                            return false;
                        }
                    }
                }
                if (!this.IsCurrentCellInEditMode)
                {
                    return true;
                }
                if ((y != this.ptCurrentCell.Y) || (x != this.ptCurrentCell.X))
                {
                    return true;
                }
                if (this.editingControl != null)
                {
                    this.UnwireEditingControlEvents();
                    this.gridState2[8] = this.MouseOverEditingControl;
                    this.gridState2[0x10] = this.MouseOverEditingPanel;
                    this.gridState1[0x4000] = true;
                    try
                    {
                        currentCellInternal.DetachEditingControl();
                    }
                    finally
                    {
                        this.gridState1[0x4000] = false;
                    }
                    ImeMode imeMode = this.editingControl.ImeMode;
                    this.latestEditingControl = this.editingControl;
                    this.editingControl = null;
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    if ((this.EditMode == GridEditMode.EditOnEnter) && resetCurrentCell)
                    {
                        this.SetCurrentCellAddressCore(-1, -1, resetAnchorCell, false, false);
                    }
                    if (keepFocus)
                    {
                        this.FocusInternal();
                    }
                    base.ImeMode = imeMode;
                }
                else
                {
                    this.gridState1[0x8000] = false;
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
                if (!this.IsInnerCellOutOfBounds(x, y))
                {
                    GridCellEventArgs e = new GridCellEventArgs(x, y);
                    this.OnCellEndEdit(e);
                }
            }
            finally
            {
                this.gridOper[0x400000] = false;
            }
            return true;
        }

        private void EndRowHeadersResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentColSplitBar != -1)
                {
                    base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                    this.lastColSplitBar = this.currentColSplitBar = -1;
                }
                if (this.RightToLeftInternal)
                {
                    num = Math.Max((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Left - 1));
                    num2 = ((this.layout.RowHeaders.Right - this.RowHeadersWidth) - num) - 1;
                }
                else
                {
                    num = Math.Min((int) (e.X + this.mouseBarOffset), (int) (this.layout.Data.Right - 1));
                    num2 = ((num - this.layout.RowHeaders.X) - this.RowHeadersWidth) + 1;
                }
                if ((this.trackColAnchor != num) && (num2 != 0))
                {
                    this.RowHeadersWidth += num2;
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void EndRowResize(MouseEventArgs e)
        {
            try
            {
                int num;
                int num2;
                if (this.currentRowSplitBar != -1)
                {
                    base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                    this.lastRowSplitBar = this.currentRowSplitBar = -1;
                }
                GridRow row = this.Rows.SharedRow(this.trackRow);
                row.GetHeightInfo(this.trackRow, out num, out num2);
                int num3 = Math.Min((int) (e.Y + this.mouseBarOffset), (int) (this.layout.Data.Bottom - 1));
                int num4 = (num3 - (this.GetRowYFromIndex(this.trackRow) + num)) + 1;
                if ((this.trackRowAnchor != num3) && (num4 != 0))
                {
                    int num5 = num + num4;
                    num5 = Math.Max(num5, num2);
                    if (!this.OnRowHeightInfoPushed(this.trackRow, num5, num2))
                    {
                        if (row.Index == -1)
                        {
                            row = this.Rows[this.trackRow];
                        }
                        row.ThicknessInternal = num5;
                    }
                }
            }
            finally
            {
                this.RealeaseMouse();
            }
        }

        private void ExitBulkLayout(bool invalidInAdjustFillingColumns)
        {
            if (this.inBulkLayoutCount > 0)
            {
                this.inBulkLayoutCount--;
                if (this.inBulkLayoutCount == 0)
                {
                    this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
                }
            }
        }

        private void ExitBulkPaint(int columnIndex, int rowIndex)
        {
            if (this.inBulkPaintCount > 0)
            {
                this.inBulkPaintCount--;
                if (this.inBulkPaintCount == 0)
                {
                    if (columnIndex >= 0)
                    {
                        this.InvalidateColumnInternal(columnIndex);
                    }
                    else if (rowIndex >= 0)
                    {
                        this.InvalidateRowPrivate(rowIndex);
                    }
                    else
                    {
                        base.Invalidate();
                    }
                }
            }
        }

        private void FirstVisibleScrollingRowTempted(int rowIndex)
        {
            int height = this.layout.Data.Height;
            if ((height > 0) && (this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen) < height))
            {
                this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
            }
        }

        private void FlushDisplayedChanged()
        {
            if (this.displayedBandsInfo.Dirty && base.Visible)
            {
                if (!this.RowHeadersVisible && (this.Columns.GetColumnCount(GridElementStates.Visible) == 0))
                {
                    this.UpdateRowsDisplayedState(false);
                }
                else
                {
                    int num = Screen.FromControl(this).WorkingArea.Height / 2;
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    if (firstDisplayedScrollingRow != -1)
                    {
                        for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                        {
                            if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None)
                            {
                                this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, true);
                            }
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                        }
                        int num4 = firstDisplayedScrollingRow;
                        for (firstDisplayedScrollingRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, GridElementStates.Visible, GridElementStates.Frozen); (firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None); firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, GridElementStates.Visible, GridElementStates.Frozen))
                        {
                            this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                        }
                        firstDisplayedScrollingRow = num4;
                    }
                    else
                    {
                        firstDisplayedScrollingRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                    }
                    while ((firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None))
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                    }
                    int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
                    firstDisplayedScrollingRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                    while (numDisplayedFrozenRows > 0)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None)
                        {
                            this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, true);
                        }
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible | GridElementStates.Frozen);
                        numDisplayedFrozenRows--;
                    }
                    while ((firstDisplayedScrollingRow != -1) && ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None))
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible | GridElementStates.Frozen);
                    }
                    int lastDisplayedFrozenRowIndex = -1;
                    int lastDisplayedScrollingRowIndex = -1;
                    if (this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
                    {
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                        if (this.displayedBandsInfo.NumDisplayedFrozenRows > 1)
                        {
                            lastDisplayedFrozenRowIndex = this.Rows.GetNextRow(firstRow, GridElementStates.Visible, (int) (this.displayedBandsInfo.NumDisplayedFrozenRows - 2));
                        }
                        else
                        {
                            lastDisplayedFrozenRowIndex = firstRow;
                        }
                    }
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow != -1)
                    {
                        if (this.displayedBandsInfo.NumDisplayedScrollingRows > 1)
                        {
                            lastDisplayedScrollingRowIndex = this.Rows.GetNextRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, GridElementStates.Visible, (int) (this.displayedBandsInfo.NumDisplayedScrollingRows - 2));
                        }
                        else
                        {
                            lastDisplayedScrollingRowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        }
                    }
                    for (firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow; ((firstDisplayedScrollingRow != -1) && (firstDisplayedScrollingRow < this.displayedBandsInfo.FirstDisplayedScrollingRow)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible))
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None)
                        {
                            break;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                    }
                    firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
                    if ((((firstDisplayedScrollingRow != -1) && (firstDisplayedScrollingRow < this.Rows.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingRow == -1) || (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow))) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex))
                    {
                        while (firstDisplayedScrollingRow != -1)
                        {
                            if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None)
                            {
                                break;
                            }
                            this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                        }
                    }
                    if (this.displayedBandsInfo.RowInsertionOccurred)
                    {
                        firstDisplayedScrollingRow = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
                        if (firstDisplayedScrollingRow != -1)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible, (int) (this.displayedBandsInfo.OldNumDisplayedScrollingRows - 1));
                            if (firstDisplayedScrollingRow == -1)
                            {
                                firstDisplayedScrollingRow = this.Rows.GetLastRow(GridElementStates.Visible);
                            }
                            for (int j = 0; ((firstDisplayedScrollingRow != -1) && (j <= num)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); j++)
                            {
                                if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None)
                                {
                                    this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                                }
                                firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                            }
                        }
                        firstDisplayedScrollingRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                        if (firstDisplayedScrollingRow != -1)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible | GridElementStates.Frozen, (int) (this.displayedBandsInfo.OldNumDisplayedFrozenRows - 1));
                            if (firstDisplayedScrollingRow == -1)
                            {
                                firstDisplayedScrollingRow = this.Rows.GetLastRow(GridElementStates.Visible | GridElementStates.Frozen);
                            }
                            for (int k = 0; ((firstDisplayedScrollingRow != -1) && (k <= num)) && !this.RowNeedsDisplayedState(firstDisplayedScrollingRow, lastDisplayedFrozenRowIndex, lastDisplayedScrollingRowIndex); k++)
                            {
                                if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None)
                                {
                                    this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, false);
                                }
                                firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                            }
                        }
                    }
                }
                if (!this.ColumnHeadersVisible && (this.Rows.GetRowCount(GridElementStates.Visible) == 0))
                {
                    this.UpdateColumnsDisplayedState(false);
                }
                else
                {
                    GridColumn firstColumn;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    if (firstDisplayedScrollingCol != -1)
                    {
                        int numDisplayedScrollingCols = this.displayedBandsInfo.NumDisplayedScrollingCols;
                        firstColumn = this.Columns[firstDisplayedScrollingCol];
                        while (numDisplayedScrollingCols > 0)
                        {
                            if (!firstColumn.Displayed)
                            {
                                firstColumn.DisplayedInternal = true;
                            }
                            firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                            numDisplayedScrollingCols--;
                        }
                        GridColumn column2 = firstColumn;
                        for (firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.Frozen); (firstColumn != null) && firstColumn.Displayed; firstColumn = this.Columns.GetPreviousColumn(firstColumn, GridElementStates.Visible, GridElementStates.Frozen))
                        {
                            firstColumn.DisplayedInternal = false;
                        }
                        firstColumn = column2;
                    }
                    else
                    {
                        firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen);
                    }
                    while ((firstColumn != null) && firstColumn.Displayed)
                    {
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                    }
                    int numDisplayedFrozenCols = this.displayedBandsInfo.NumDisplayedFrozenCols;
                    firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
                    while (numDisplayedFrozenCols > 0)
                    {
                        if (!firstColumn.Displayed)
                        {
                            firstColumn.DisplayedInternal = true;
                        }
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                        numDisplayedFrozenCols--;
                    }
                    while ((firstColumn != null) && firstColumn.Displayed)
                    {
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                    }
                    for (firstDisplayedScrollingCol = this.displayedBandsInfo.OldFirstDisplayedScrollingCol; (((firstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol < this.Columns.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol != this.displayedBandsInfo.FirstDisplayedScrollingCol))) && (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) && !this.ColumnNeedsDisplayedState(this.Columns[firstDisplayedScrollingCol])); firstDisplayedScrollingCol = (firstColumn == null) ? -1 : firstColumn.Index)
                    {
                        firstColumn = this.Columns[firstDisplayedScrollingCol];
                        if (!firstColumn.Displayed)
                        {
                            break;
                        }
                        firstColumn.DisplayedInternal = false;
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                    }
                    firstDisplayedScrollingCol = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
                    if ((((firstDisplayedScrollingCol != -1) && (firstDisplayedScrollingCol < this.Columns.Count)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol == -1) || ((this.displayedBandsInfo.FirstDisplayedScrollingCol != firstDisplayedScrollingCol) && this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol)))) && !this.ColumnNeedsDisplayedState(this.Columns[firstDisplayedScrollingCol]))
                    {
                        for (firstColumn = this.Columns[firstDisplayedScrollingCol]; firstColumn != null; firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None))
                        {
                            if (!firstColumn.Displayed)
                            {
                                break;
                            }
                            firstColumn.DisplayedInternal = false;
                        }
                    }
                    if (this.displayedBandsInfo.ColumnInsertionOccurred)
                    {
                        for (firstColumn = this.Columns[this.Columns.Count - 1]; (firstColumn != null) && !this.ColumnNeedsDisplayedState(firstColumn); firstColumn = this.Columns.GetPreviousColumn(firstColumn, GridElementStates.Visible, GridElementStates.None))
                        {
                            if (firstColumn.Displayed)
                            {
                                firstColumn.DisplayedInternal = false;
                            }
                        }
                    }
                }
                this.displayedBandsInfo.Dirty = false;
            }
        }

        private void FlushDisplayIndexChanged(bool raiseEvent)
        {
            foreach (GridColumn column in this.Columns)
            {
                if (column.DisplayIndexHasChanged)
                {
                    column.DisplayIndexHasChanged = false;
                    if (raiseEvent)
                    {
                        this.OnColumnDisplayIndexChanged(column);
                    }
                }
            }
        }

        private void FlushSelectionChanged()
        {
            if (this.gridState2[0x40000])
            {
                this.OnSelectionChanged(EventArgs.Empty);
            }
        }

        protected override AccessibleObject GetAccessibilityObjectById(int objectId)
        {
            return base.AccessibilityObject.GetChild(objectId - 1);
        }

        internal SolidBrush GetCachedBrush(System.Drawing.Color color)
        {
            SolidBrush brush = (SolidBrush) this.brushes[color];
            if (brush == null)
            {
                brush = new SolidBrush(color);
                this.brushes.Add(color, brush);
            }
            return brush;
        }

        internal Pen GetCachedPen(System.Drawing.Color color)
        {
            Pen pen = (Pen) this.pens[color];
            if (pen == null)
            {
                pen = new Pen(color);
                this.pens.Add(color, pen);
            }
            return pen;
        }

        internal TypeConverter GetCachedTypeConverter(System.Type type)
        {
            if (this.converters.ContainsKey(type))
            {
                return (TypeConverter) this.converters[type];
            }
            TypeConverter converter = TypeDescriptor.GetConverter(type);
            this.converters.Add(type, converter);
            return converter;
        }

        internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
        {
            Rectangle rectangle = this.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
            if (this.SingleVerticalBorderAdded && (columnIndex == this.FirstDisplayedColumnIndex))
            {
                if (!this.RightToLeftInternal)
                {
                    rectangle.X--;
                }
                rectangle.Width++;
            }
            if (this.SingleHorizontalBorderAdded && (rowIndex == this.FirstDisplayedRowIndex))
            {
                rectangle.Y--;
                rectangle.Width++;
            }
            return rectangle;
        }

        /// <summary>Gets the number of cells that satisfy the provided filter.</summary>
        /// <returns>The number of cells that match the includeFilter parameter.</returns>
        /// <param name="includeFilter">A bitwise combination of the <see cref="T:MControl.GridView.GridElementStates"></see> values specifying the cells to count.</param>
        /// <exception cref="T:System.ArgumentException">includeFilter includes the value <see cref="F:MControl.GridView.GridElementStates.ResizableSet"></see>.</exception>
        public int GetCellCount(GridElementStates includeFilter)
        {
            bool flag;
            bool flag2;
            bool flag3;
            bool flag4;
            bool flag5;
            if ((includeFilter & ~(GridElementStates.Visible | GridElementStates.Selected | GridElementStates.Resizable | GridElementStates.ReadOnly | GridElementStates.Frozen | GridElementStates.Displayed)) != GridElementStates.None)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_InvalidGridElementStateCombination", new object[] { "includeFilter" }));
            }
            int count = 0;
            if ((includeFilter & GridElementStates.Selected) == GridElementStates.Selected)
            {
                if (includeFilter == GridElementStates.Selected)
                {
                    count = this.individualSelectedCells.Count;
                    switch (this.SelectionMode)
                    {
                        case GridSelectionMode.CellSelect:
                            return count;

                        case GridSelectionMode.FullRowSelect:
                        case GridSelectionMode.RowHeaderSelect:
                            return (count + (this.selectedBandIndexes.Count * this.Columns.Count));

                        case GridSelectionMode.FullColumnSelect:
                        case GridSelectionMode.ColumnHeaderSelect:
                            return (count + (this.selectedBandIndexes.Count * this.Rows.Count));
                    }
                }
                flag = (includeFilter & GridElementStates.Displayed) == GridElementStates.Displayed;
                flag2 = (includeFilter & GridElementStates.Frozen) == GridElementStates.Frozen;
                flag3 = (includeFilter & GridElementStates.Resizable) == GridElementStates.Resizable;
                flag4 = (includeFilter & GridElementStates.ReadOnly) == GridElementStates.ReadOnly;
                flag5 = (includeFilter & GridElementStates.Visible) == GridElementStates.Visible;
                foreach (GridCell cell in (IEnumerable) this.individualSelectedCells)
                {
                    if (this.GetCellCount_CellIncluded(cell, cell.RowIndex, flag, flag2, flag3, flag4, flag5))
                    {
                        count++;
                    }
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        return count;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        foreach (int num4 in (IEnumerable) this.selectedBandIndexes)
                        {
                            foreach (GridCell cell3 in this.Rows.SharedRow(num4).Cells)
                            {
                                if (this.GetCellCount_CellIncluded(cell3, num4, flag, flag2, flag3, flag4, flag5))
                                {
                                    count++;
                                }
                            }
                        }
                        return count;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        for (int j = 0; j < this.Rows.Count; j++)
                        {
                            GridRow row = this.Rows.SharedRow(j);
                            foreach (int num3 in (IEnumerable) this.selectedBandIndexes)
                            {
                                GridCell gridCell = row.Cells[num3];
                                if (this.GetCellCount_CellIncluded(gridCell, j, flag, flag2, flag3, flag4, flag5))
                                {
                                    count++;
                                }
                            }
                        }
                        return count;
                }
            }
            if (((includeFilter == GridElementStates.ReadOnly) && this.ReadOnly) || (includeFilter == GridElementStates.None))
            {
                return (this.Rows.Count * this.Columns.Count);
            }
            flag = (includeFilter & GridElementStates.Displayed) == GridElementStates.Displayed;
            flag2 = (includeFilter & GridElementStates.Frozen) == GridElementStates.Frozen;
            flag3 = (includeFilter & GridElementStates.Resizable) == GridElementStates.Resizable;
            flag4 = (includeFilter & GridElementStates.ReadOnly) == GridElementStates.ReadOnly;
            flag5 = (includeFilter & GridElementStates.Visible) == GridElementStates.Visible;
            for (int i = 0; i < this.Rows.Count; i++)
            {
                GridRow row3 = this.Rows.SharedRow(i);
                if (!flag5 || ((this.Rows.GetRowState(i) & GridElementStates.Visible) != GridElementStates.None))
                {
                    foreach (GridCell cell4 in row3.Cells)
                    {
                        if (this.GetCellCount_CellIncluded(cell4, i, flag, flag2, flag3, flag4, flag5))
                        {
                            count++;
                        }
                    }
                }
            }
            return count;
        }

        private bool GetCellCount_CellIncluded(GridCell gridCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (displayedRequired && !(((rowState & GridElementStates.Displayed) != GridElementStates.None) && gridCell.OwningColumn.Displayed))
            {
                return false;
            }
            if (frozenRequired && !((((rowState & GridElementStates.Frozen) != GridElementStates.None) || gridCell.OwningColumn.Frozen) || gridCell.StateIncludes(GridElementStates.Frozen)))
            {
                return false;
            }
            if ((resizableRequired && !this.RowIsResizable(rowIndex)) && (gridCell.OwningColumn.Resizable != GridTriState.True))
            {
                return false;
            }
            if (readOnlyRequired && !(((this.ReadOnly || ((rowState & GridElementStates.ReadOnly) != GridElementStates.None)) || gridCell.OwningColumn.ReadOnly) || gridCell.StateIncludes(GridElementStates.ReadOnly)))
            {
                return false;
            }
            if (visibleRequired && !(((rowState & GridElementStates.Visible) != GridElementStates.None) && gridCell.OwningColumn.Visible))
            {
                return false;
            }
            return true;
        }

        /// <summary>Returns the rectangle that represents the display area for a cell.</summary>
        /// <returns>The <see cref="T:System.Drawing.Rectangle"></see> that represents the display rectangle of the cell.</returns>
        /// <param name="columnIndex">The column index for the desired cell. </param>
        /// <param name="cutOverflow">true to return the displayed portion of the cell only; false to return the entire cell bounds. </param>
        /// <param name="rowIndex">The row index for the desired cell. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than -1 or greater than the number of columns in the control minus 1.-or-rowIndex is less than -1 or greater than the number of rows in the control minus 1. </exception>
        public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
        {
            Rectangle rowDisplayRectanglePrivate;
            Rectangle columnDisplayRectanglePrivate;
            if (columnIndex >= 0)
            {
                if (columnIndex >= this.Columns.Count)
                {
                    throw new ArgumentOutOfRangeException("columnIndex");
                }
                columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
            }
            else
            {
                if (columnIndex != -1)
                {
                    throw new ArgumentOutOfRangeException("columnIndex");
                }
                if (rowIndex >= 0)
                {
                    columnDisplayRectanglePrivate = this.layout.RowHeaders;
                }
                else
                {
                    columnDisplayRectanglePrivate = this.layout.TopLeftHeader;
                }
            }
            if (rowIndex >= 0)
            {
                if (rowIndex >= this.Rows.Count)
                {
                    throw new ArgumentOutOfRangeException("rowIndex");
                }
                rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
            }
            else
            {
                if (rowIndex != -1)
                {
                    throw new ArgumentOutOfRangeException("rowIndex");
                }
                if (columnIndex >= 0)
                {
                    rowDisplayRectanglePrivate = this.layout.ColumnHeaders;
                }
                else
                {
                    rowDisplayRectanglePrivate = this.layout.TopLeftHeader;
                }
            }
            if (!cutOverflow)
            {
                int num2;
                int num = rowDisplayRectanglePrivate.Bottom - columnDisplayRectanglePrivate.Bottom;
                if (num > 0)
                {
                    columnDisplayRectanglePrivate.Height += num;
                }
                if (this.RightToLeftInternal)
                {
                    num2 = rowDisplayRectanglePrivate.X - columnDisplayRectanglePrivate.X;
                    if (num2 > 0)
                    {
                        rowDisplayRectanglePrivate.Width += num2;
                        rowDisplayRectanglePrivate.X -= num2;
                    }
                }
                else
                {
                    num2 = columnDisplayRectanglePrivate.Right - rowDisplayRectanglePrivate.Right;
                    if (num2 > 0)
                    {
                        rowDisplayRectanglePrivate.Width += num2;
                    }
                }
            }
            rowDisplayRectanglePrivate.Intersect(columnDisplayRectanglePrivate);
            return rowDisplayRectanglePrivate;
        }

        internal GridCell GetCellInternal(int columnIndex, int rowIndex)
        {
            if (rowIndex >= 0)
            {
                GridRow row = this.Rows.SharedRow(rowIndex);
                if (columnIndex >= 0)
                {
                    return row.Cells[columnIndex];
                }
                return row.HeaderCell;
            }
            if (columnIndex >= 0)
            {
                return this.Columns[columnIndex].HeaderCell;
            }
            return this.TopLeftHeaderCell;
        }

        /// <summary>Retrieves the formatted values that represent the contents of the selected cells for copying to the <see cref="T:System.Windows.Forms.Clipboard"></see>.</summary>
        /// <returns>A <see cref="T:System.Windows.Forms.DataObject"></see> that represents the contents of the selected cells.</returns>
        /// <exception cref="T:System.NotSupportedException"><see cref="P:MControl.GridView.Grid.ClipboardCopyMode"></see> is set to <see cref="F:MControl.GridView.GridClipboardCopyMode.Disable"></see>.</exception>
        public virtual DataObject GetClipboardContent()
        {
            GridColumn lastColumn;
            GridColumn column2;
            GridColumn column3;
            int num3;
            bool flag5;
            bool flag6;
            bool flag7;
            if (this.ClipboardCopyMode == GridClipboardCopyMode.Disable)
            {
                throw new NotSupportedException(MControl.GridView.RM.GetString("Grid_DisabledClipboardCopy"));
            }
            if (this.CurrentCellIsEditedAndOnlySelectedCell)
            {
                return null;
            }
            string[] strArray = new string[] { DataFormats.Html, DataFormats.Text, DataFormats.UnicodeText, DataFormats.CommaSeparatedValue };
            DataObject obj2 = new DataObject();
            bool flag = false;
            bool flag2 = false;
            string str = null;
            StringBuilder sbContent = null;
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                case GridSelectionMode.RowHeaderSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                    flag5 = false;
                    flag6 = false;
                    flag7 = false;
                    if (this.SelectionMode != GridSelectionMode.RowHeaderSelect)
                    {
                        if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                        {
                            flag6 = this.Columns.GetColumnCount(GridElementStates.Visible | GridElementStates.Selected) != 0;
                            flag5 = flag6 && (this.Rows.GetRowCount(GridElementStates.Visible) != 0);
                        }
                        break;
                    }
                    flag7 = this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Selected) != 0;
                    flag5 = flag7 && (this.Columns.GetColumnCount(GridElementStates.Visible) != 0);
                    break;

                case GridSelectionMode.FullRowSelect:
                    if (this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Selected) != 0)
                    {
                        if (this.clipboardCopyMode == GridClipboardCopyMode.EnableWithAutoHeaderText)
                        {
                            flag = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Selected) == -1;
                            flag2 = true;
                        }
                        else
                        {
                            flag = flag2 = this.clipboardCopyMode == GridClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                        }
                        flag &= this.ColumnHeadersVisible;
                        flag2 &= this.RowHeadersVisible;
                        foreach (string str2 in strArray)
                        {
                            if (sbContent == null)
                            {
                                sbContent = new StringBuilder(0x400);
                            }
                            else
                            {
                                sbContent.Length = 0;
                            }
                            if (flag)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    lastColumn = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && (column2 == null), true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && (column2 == null), true, false, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, this.Columns.GetColumnCount(GridElementStates.Visible) == 0, true, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, this.Columns.GetColumnCount(GridElementStates.Visible) == 0, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    lastColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2, column3 == null, true, false, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, column3 == null, true, false, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                            }
                            bool flag3 = true;
                            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Selected);
                            int nextRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible | GridElementStates.Selected);
                            while (firstRow != -1)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    lastColumn = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                        str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, true, !flag2 && (column2 == null), !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                            str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, false, !flag2 && (column2 == null), !flag && flag3, nextRow == -1, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(firstRow).HeaderCell.GetClipboardContentInternal(firstRow, this.Columns.GetColumnCount(GridElementStates.Visible) == 0, true, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(firstRow).HeaderCell.GetClipboardContentInternal(firstRow, true, lastColumn == null, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                        str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, !flag2, column3 == null, !flag && flag3, nextRow == -1, str2) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                                            str = this.Rows.SharedRow(firstRow).Cells[lastColumn.Index].GetClipboardContentInternal(firstRow, false, column3 == null, !flag && flag3, nextRow == -1, str2) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                                firstRow = nextRow;
                                if (firstRow != -1)
                                {
                                    nextRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible | GridElementStates.Selected);
                                }
                                flag3 = false;
                            }
                            if (string.Equals(str2, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                            {
                                GetClipboardContentForHtml(sbContent);
                            }
                            obj2.SetData(str2, false, sbContent.ToString());
                        }
                        return obj2;
                    }
                    return null;

                case GridSelectionMode.FullColumnSelect:
                    if (this.Columns.GetColumnCount(GridElementStates.Visible | GridElementStates.Selected) != 0)
                    {
                        if (this.clipboardCopyMode == GridClipboardCopyMode.EnableWithAutoHeaderText)
                        {
                            flag = true;
                            flag2 = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Selected) == null;
                        }
                        else
                        {
                            flag = flag2 = this.clipboardCopyMode == GridClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                        }
                        flag &= this.ColumnHeadersVisible;
                        flag2 &= this.RowHeadersVisible;
                        num3 = this.Rows.GetFirstRow(GridElementStates.Visible);
                        foreach (string str3 in strArray)
                        {
                            if (sbContent == null)
                            {
                                sbContent = new StringBuilder(0x400);
                            }
                            else
                            {
                                sbContent.Length = 0;
                            }
                            if (flag)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    GridColumn column4 = this.Columns.GetLastColumn(GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                    lastColumn = column4;
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && (column2 == null), true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && (column2 == null), true, num3 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, column4 == null, true, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Selected);
                                    if (flag2)
                                    {
                                        str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, lastColumn == null, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                        str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2, column3 == null, true, num3 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, false, column3 == null, true, num3 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                            }
                            bool flag4 = true;
                            int indexStart = num3;
                            int num5 = -1;
                            if (indexStart != -1)
                            {
                                num5 = this.Rows.GetNextRow(indexStart, GridElementStates.Visible);
                            }
                            while (indexStart != -1)
                            {
                                if (this.RightToLeftInternal)
                                {
                                    GridColumn column5 = this.Columns.GetLastColumn(GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                    lastColumn = column5;
                                    if (lastColumn != null)
                                    {
                                        column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                        str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, true, !flag2 && (column2 == null), !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column2 != null)
                                        {
                                            lastColumn = column2;
                                            column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                            str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, false, !flag2 && (column2 == null), !flag && flag4, num5 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(indexStart).HeaderCell.GetClipboardContentInternal(indexStart, column5 == null, true, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                }
                                else
                                {
                                    lastColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Selected);
                                    if (flag2)
                                    {
                                        str = this.Rows.SharedRow(indexStart).HeaderCell.GetClipboardContentInternal(indexStart, true, lastColumn == null, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                    }
                                    if (lastColumn != null)
                                    {
                                        column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                        str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, !flag2, column3 == null, !flag && flag4, num5 == -1, str3) as string;
                                        if (str != null)
                                        {
                                            sbContent.Append(str);
                                        }
                                        while (column3 != null)
                                        {
                                            lastColumn = column3;
                                            column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible | GridElementStates.Selected, GridElementStates.None);
                                            str = this.Rows.SharedRow(indexStart).Cells[lastColumn.Index].GetClipboardContentInternal(indexStart, false, column3 == null, !flag && flag4, num5 == -1, str3) as string;
                                            if (str != null)
                                            {
                                                sbContent.Append(str);
                                            }
                                        }
                                    }
                                }
                                indexStart = num5;
                                if (indexStart != -1)
                                {
                                    num5 = this.Rows.GetNextRow(indexStart, GridElementStates.Visible);
                                }
                                flag4 = false;
                            }
                            if (string.Equals(str3, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                            {
                                GetClipboardContentForHtml(sbContent);
                            }
                            obj2.SetData(str3, false, sbContent.ToString());
                        }
                        return obj2;
                    }
                    return null;

                default:
                    return obj2;
            }
            if (!flag5 && (this.individualSelectedCells.Count > 0))
            {
                foreach (GridCell cell in (IEnumerable) this.individualSelectedCells)
                {
                    if (cell.Visible)
                    {
                        flag5 = true;
                        break;
                    }
                }
            }
            if (!flag5)
            {
                return null;
            }
            if (this.SelectionMode == GridSelectionMode.CellSelect)
            {
                flag = flag2 = this.clipboardCopyMode == GridClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                flag &= this.ColumnHeadersVisible;
                flag2 &= this.RowHeadersVisible;
            }
            else
            {
                flag = flag2 = false;
                if (this.ColumnHeadersVisible)
                {
                    if (this.clipboardCopyMode == GridClipboardCopyMode.EnableWithAutoHeaderText)
                    {
                        if (flag6)
                        {
                            flag = true;
                        }
                    }
                    else
                    {
                        flag = this.clipboardCopyMode == GridClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                    }
                }
                if (this.RowHeadersVisible)
                {
                    if (this.clipboardCopyMode == GridClipboardCopyMode.EnableWithAutoHeaderText)
                    {
                        if (flag7)
                        {
                            flag2 = true;
                        }
                    }
                    else
                    {
                        flag2 = this.clipboardCopyMode == GridClipboardCopyMode.EnableAlwaysIncludeHeaderText;
                    }
                }
            }
            int rowIndex = 0x7fffffff;
            int num7 = -1;
            GridColumn owningColumn = null;
            GridColumn column7 = null;
            if (this.SelectionMode != GridSelectionMode.RowHeaderSelect)
            {
                if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                {
                    num3 = this.Rows.GetFirstRow(GridElementStates.Visible);
                    int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
                    foreach (int num10 in (IEnumerable) this.selectedBandIndexes)
                    {
                        if (!this.Columns[num10].Visible)
                        {
                            continue;
                        }
                        if ((owningColumn == null) || this.Columns.DisplayInOrder(num10, owningColumn.Index))
                        {
                            owningColumn = this.Columns[num10];
                        }
                        if ((column7 == null) || this.Columns.DisplayInOrder(column7.Index, num10))
                        {
                            column7 = this.Columns[num10];
                        }
                        rowIndex = num3;
                        num7 = lastRow;
                    }
                }
            }
            else
            {
                GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                GridColumn column9 = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
                foreach (int num8 in (IEnumerable) this.selectedBandIndexes)
                {
                    if ((this.Rows.GetRowState(num8) & GridElementStates.Visible) == GridElementStates.None)
                    {
                        continue;
                    }
                    if (num8 < rowIndex)
                    {
                        rowIndex = num8;
                    }
                    if (num8 > num7)
                    {
                        num7 = num8;
                    }
                    owningColumn = firstColumn;
                    column7 = column9;
                }
            }
            foreach (GridCell cell2 in (IEnumerable) this.individualSelectedCells)
            {
                if (!cell2.Visible)
                {
                    continue;
                }
                if (cell2.RowIndex < rowIndex)
                {
                    rowIndex = cell2.RowIndex;
                }
                if (cell2.RowIndex > num7)
                {
                    num7 = cell2.RowIndex;
                }
                if ((owningColumn == null) || this.Columns.DisplayInOrder(cell2.ColumnIndex, owningColumn.Index))
                {
                    owningColumn = cell2.OwningColumn;
                }
                if ((column7 == null) || this.Columns.DisplayInOrder(column7.Index, cell2.ColumnIndex))
                {
                    column7 = cell2.OwningColumn;
                }
            }
            foreach (string str4 in strArray)
            {
                if (sbContent == null)
                {
                    sbContent = new StringBuilder(0x400);
                }
                else
                {
                    sbContent.Length = 0;
                }
                if (flag)
                {
                    if (this.RightToLeftInternal)
                    {
                        lastColumn = column7;
                        while (lastColumn != null)
                        {
                            if (lastColumn != owningColumn)
                            {
                                column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                            }
                            else
                            {
                                column2 = null;
                            }
                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, lastColumn == column7, !flag2 && (column2 == null), true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column2;
                        }
                        if (flag2)
                        {
                            str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, false, true, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    else
                    {
                        if (flag2)
                        {
                            str = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, false, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                        lastColumn = owningColumn;
                        while (lastColumn != null)
                        {
                            if (lastColumn != column7)
                            {
                                column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                            }
                            else
                            {
                                column3 = null;
                            }
                            str = lastColumn.HeaderCell.GetClipboardContentInternal(-1, !flag2 && (lastColumn == owningColumn), column3 == null, true, false, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column3;
                        }
                    }
                }
                bool flag8 = true;
                int num11 = rowIndex;
                int num12 = -1;
                while (num11 != -1)
                {
                    if (num11 != num7)
                    {
                        num12 = this.Rows.GetNextRow(num11, GridElementStates.Visible);
                    }
                    else
                    {
                        num12 = -1;
                    }
                    if (this.RightToLeftInternal)
                    {
                        lastColumn = column7;
                        while (lastColumn != null)
                        {
                            if (lastColumn != owningColumn)
                            {
                                column2 = this.Columns.GetPreviousColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                            }
                            else
                            {
                                column2 = null;
                            }
                            str = this.Rows.SharedRow(num11).Cells[lastColumn.Index].GetClipboardContentInternal(num11, lastColumn == column7, !flag2 && (column2 == null), !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                            lastColumn = column2;
                        }
                        if (flag2)
                        {
                            str = this.Rows.SharedRow(num11).HeaderCell.GetClipboardContentInternal(num11, false, true, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    else
                    {
                        if (flag2)
                        {
                            str = this.Rows.SharedRow(num11).HeaderCell.GetClipboardContentInternal(num11, true, false, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                        for (lastColumn = owningColumn; lastColumn != null; lastColumn = column3)
                        {
                            if (lastColumn != column7)
                            {
                                column3 = this.Columns.GetNextColumn(lastColumn, GridElementStates.Visible, GridElementStates.None);
                            }
                            else
                            {
                                column3 = null;
                            }
                            str = this.Rows.SharedRow(num11).Cells[lastColumn.Index].GetClipboardContentInternal(num11, !flag2 && (lastColumn == owningColumn), column3 == null, !flag && flag8, num12 == -1, str4) as string;
                            if (str != null)
                            {
                                sbContent.Append(str);
                            }
                        }
                    }
                    num11 = num12;
                    flag8 = false;
                }
                if (string.Equals(str4, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
                {
                    GetClipboardContentForHtml(sbContent);
                }
                obj2.SetData(str4, false, sbContent.ToString());
            }
            return obj2;
        }

        private static void GetClipboardContentForHtml(StringBuilder sbContent)
        {
            int num = 0x87 + sbContent.Length;
            int num2 = num + 0x24;
            string str = string.Format(CultureInfo.InvariantCulture, "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n", new object[] { num2.ToString("00000000", CultureInfo.InvariantCulture), num.ToString("00000000", CultureInfo.InvariantCulture) }) + "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
            sbContent.Insert(0, str);
            sbContent.Append("\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>");
        }

        /// <summary>Returns the rectangle that represents the display area for a column, as determined by the column index.</summary>
        /// <returns>The <see cref="T:System.Drawing.Rectangle"></see> that represents the display rectangle of the column.</returns>
        /// <param name="columnIndex">The column index for the desired cell. </param>
        /// <param name="cutOverflow">true to return the column rectangle visible in the <see cref="T:MControl.GridView.Grid"></see> bounds; false to return the entire column rectangle. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            return this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
        }

        private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow)
        {
            int right;
            int num2;
            Rectangle rectangle2;
            if (!this.Columns[columnIndex].Displayed)
            {
                return Rectangle.Empty;
            }
            Rectangle data = this.layout.Data;
            bool flag = false;
            if (this.RightToLeftInternal)
            {
                right = data.Right;
            }
            else
            {
                right = data.X;
            }
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
            while ((firstColumn != null) && !flag)
            {
                if ((this.RightToLeftInternal && (right < data.X)) || (!this.RightToLeftInternal && (right > data.Right)))
                {
                    break;
                }
                if (firstColumn.Index == columnIndex)
                {
                    flag = true;
                }
                else
                {
                    if (this.RightToLeftInternal)
                    {
                        right -= firstColumn.Thickness;
                    }
                    else
                    {
                        right += firstColumn.Thickness;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                }
            }
            if (!flag && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                while ((firstColumn != null) && !flag)
                {
                    if ((this.RightToLeftInternal && (right < data.X)) || (!this.RightToLeftInternal && (right > data.Right)))
                    {
                        break;
                    }
                    if (firstColumn.Index == columnIndex)
                    {
                        flag = true;
                    }
                    else
                    {
                        if (this.RightToLeftInternal)
                        {
                            right -= firstColumn.Thickness;
                        }
                        else
                        {
                            right += firstColumn.Thickness;
                        }
                        if (firstColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                        {
                            if (this.RightToLeftInternal)
                            {
                                right += this.negOffset;
                            }
                            else
                            {
                                right -= this.negOffset;
                            }
                        }
                        firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                    }
                }
            }
            if (!flag)
            {
                return Rectangle.Empty;
            }
            int thickness = firstColumn.Thickness;
            if (firstColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
            {
                thickness -= this.negOffset;
            }
            if (cutOverflow && ((!this.RightToLeftInternal && ((right + thickness) > data.Right)) || (this.RightToLeftInternal && ((right - thickness) < data.X))))
            {
                if (this.RightToLeftInternal)
                {
                    num2 = right - data.X;
                }
                else
                {
                    num2 = data.Right - right;
                }
            }
            else
            {
                num2 = thickness;
            }
            if (this.RightToLeftInternal)
            {
                rectangle2 = new Rectangle(right - num2, data.Y, num2, data.Height);
            }
            else
            {
                rectangle2 = new Rectangle(right, data.Y, num2, data.Height);
            }
            if (this.layout.ColumnHeadersVisible)
            {
                rectangle2.Height += this.layout.ColumnHeaders.Height;
                rectangle2.Y -= this.layout.ColumnHeaders.Height;
            }
            return rectangle2;
        }

        private int GetColumnIndexFromX(int x, out int xColumnLeftEdge)
        {
            int num;
            GridColumn column;
            Rectangle data = this.layout.Data;
            if (!this.RightToLeftInternal && (x == (data.X - 1)))
            {
                x++;
            }
            else if (this.RightToLeftInternal && (x == data.Right))
            {
                x--;
            }
            if (this.RightToLeftInternal)
            {
                num = data.Right - 1;
            }
            else
            {
                num = data.X;
            }
            for (column = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen); (column != null) && ((!this.RightToLeftInternal && (num < data.Right)) || (this.RightToLeftInternal && (num >= data.X))); column = this.Columns.GetNextColumn(column, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None))
            {
                if (this.RightToLeftInternal)
                {
                    num -= column.Thickness;
                }
                else
                {
                    num += column.Thickness;
                }
                if (!this.RightToLeftInternal && (num > x))
                {
                    xColumnLeftEdge = num - column.Thickness;
                    return column.Index;
                }
                if (this.RightToLeftInternal && (num < x))
                {
                    xColumnLeftEdge = num + column.Thickness;
                    return column.Index;
                }
            }
            if (this.RightToLeftInternal)
            {
                num += this.negOffset;
            }
            else
            {
                num -= this.negOffset;
            }
            if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
            {
                for (column = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol]; (column != null) && ((!this.RightToLeftInternal && (num < data.Right)) || (this.RightToLeftInternal && (num >= data.X))); column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
                {
                    if (this.RightToLeftInternal)
                    {
                        num -= column.Thickness;
                    }
                    else
                    {
                        num += column.Thickness;
                    }
                    if (!this.RightToLeftInternal && (num > x))
                    {
                        xColumnLeftEdge = num - column.Thickness;
                        return column.Index;
                    }
                    if (this.RightToLeftInternal && (num < x))
                    {
                        xColumnLeftEdge = num + column.Thickness;
                        return column.Index;
                    }
                }
            }
            xColumnLeftEdge = -1;
            return -1;
        }

        private static int GetColumnScrollRate(int xOffset)
        {
            if (xOffset <= 10)
            {
                return 480;
            }
            if (xOffset <= 15)
            {
                return 0x139;
            }
            if (xOffset <= 0x19)
            {
                return 180;
            }
            if (xOffset <= 0x23)
            {
                return 0x7b;
            }
            return Math.Max(1, 0xfa0 / xOffset);
        }

        internal int GetColumnXFromIndex(int index)
        {
            int x;
            if (this.RightToLeftInternal)
            {
                x = this.layout.Data.Right - 1;
            }
            else
            {
                x = this.layout.Data.X;
            }
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
            while (firstColumn != null)
            {
                if (index == firstColumn.Index)
                {
                    return x;
                }
                if (this.RightToLeftInternal)
                {
                    x -= firstColumn.Thickness;
                }
                else
                {
                    x += firstColumn.Thickness;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
            }
            if (this.RightToLeftInternal)
            {
                x += this.negOffset;
            }
            else
            {
                x -= this.negOffset;
            }
            int num2 = x;
            if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
            {
                firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
            }
            else
            {
                firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen);
            }
            while (firstColumn != null)
            {
                if (index == firstColumn.Index)
                {
                    return x;
                }
                if (this.RightToLeftInternal)
                {
                    x -= firstColumn.Thickness;
                }
                else
                {
                    x += firstColumn.Thickness;
                }
                firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
            }
            x = num2;
            firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
            for (firstColumn = this.Columns.GetPreviousColumn(firstColumn, GridElementStates.Visible, GridElementStates.Frozen); firstColumn != null; firstColumn = this.Columns.GetPreviousColumn(firstColumn, GridElementStates.Visible, GridElementStates.Frozen))
            {
                if (this.RightToLeftInternal)
                {
                    x += firstColumn.Thickness;
                }
                else
                {
                    x -= firstColumn.Thickness;
                }
                if (index == firstColumn.Index)
                {
                    return x;
                }
            }
            return 0;
        }

        private int GetNegOffsetFromHorizontalOffset(int horizontalOffset)
        {
            for (GridColumn column = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen); (column != null) && (column.Thickness <= horizontalOffset); column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
            {
                horizontalOffset -= column.Thickness;
            }
            return horizontalOffset;
        }

        private bool GetOutOfBoundCorrectedHitTestInfo(ref HitTestInfo hti, ref int mouseX, ref int mouseY, out int xOffset, out int yOffset)
        {
            xOffset = yOffset = 0;
            Rectangle data = this.layout.Data;
            int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible);
            int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
            int num3 = this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight);
            int num4 = this.ComputeHeightOfTrailingScrollingRows();
            int emptyBackgroundWidth = Math.Max(0, this.layout.Data.Width - this.Columns.GetColumnsWidth(GridElementStates.Visible));
            int emptyBackgroundHeight = Math.Max(0, (this.layout.Data.Height - totalVisibleFrozenHeight) - num4);
            if (this.gridOper[8])
            {
                if (this.layout.RowHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.RowHeaders);
                }
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, false, true);
                if ((mouseY >= data.Top) && (mouseY <= data.Bottom))
                {
                    hti = this.HitTest(this.RightToLeftInternal ? (data.Right - 1) : data.Left, mouseY);
                    if ((((this.ptAnchorCell.Y != -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & GridElementStates.Frozen) != GridElementStates.None)) && ((this.trackRowEdge != -1) && ((this.Rows.GetRowState(this.trackRowEdge) & GridElementStates.Frozen) != GridElementStates.None))) && ((hti.row >= 0) && ((this.Rows.GetRowState(hti.row) & GridElementStates.Frozen) == GridElementStates.None)))
                    {
                        int col;
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                        if (hti.col >= 0)
                        {
                            col = hti.col;
                        }
                        else
                        {
                            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                            col = (firstColumn == null) ? -1 : firstColumn.Index;
                        }
                        if ((col >= 0) && (firstRow >= 0))
                        {
                            if (!this.ScrollIntoView(col, firstRow, false))
                            {
                                return false;
                            }
                            hti = this.HitTest(this.RightToLeftInternal ? data.Right : data.Left, mouseY);
                        }
                    }
                    return true;
                }
                if (mouseY < data.Top)
                {
                    if (((this.ptAnchorCell.Y != -1) && (((this.Rows.GetRowState(this.ptAnchorCell.Y) & GridElementStates.Frozen) == GridElementStates.None) || ((this.trackRowEdge != -1) && ((this.Rows.GetRowState(this.trackRowEdge) & GridElementStates.Frozen) == GridElementStates.None)))) && (this.verticalOffset != 0))
                    {
                        yOffset = mouseY - data.Top;
                        if (this.RightToLeftInternal)
                        {
                            mouseX = data.Right - 1;
                        }
                        else
                        {
                            mouseX = data.Left + 1;
                        }
                    }
                    else
                    {
                        hti = this.HitTest(this.RightToLeftInternal ? data.Right : data.Left, mouseY);
                    }
                }
                else if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && ((this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= ((rowsHeight - totalVisibleFrozenHeight) - num3)))
                {
                    yOffset = mouseY - data.Bottom;
                    if (this.RightToLeftInternal)
                    {
                        mouseX = data.Right - 1;
                    }
                    else
                    {
                        mouseX = data.Left + 1;
                    }
                }
                return true;
            }
            if (this.gridOper[4])
            {
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, true, false);
                if ((mouseX >= data.Left) && (mouseX <= data.Right))
                {
                    hti = this.HitTest(mouseX, data.Top);
                    if ((((this.ptAnchorCell.X != -1) && this.Columns[this.ptAnchorCell.X].Frozen) && ((this.trackColumnEdge != -1) && this.Columns[this.trackColumnEdge].Frozen)) && ((hti.col >= 0) && !this.Columns[hti.col].Frozen))
                    {
                        int row;
                        int index = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen).Index;
                        if (hti.row >= 0)
                        {
                            row = hti.row;
                        }
                        else
                        {
                            row = this.Rows.GetFirstRow(GridElementStates.Visible);
                        }
                        if ((row >= 0) && (index >= 0))
                        {
                            if (!this.ScrollIntoView(index, row, false))
                            {
                                return false;
                            }
                            hti = this.HitTest(mouseX, data.Top);
                        }
                    }
                    return true;
                }
                if ((!this.RightToLeftInternal && (mouseX < data.Left)) || (this.RightToLeftInternal && (mouseX > data.Right)))
                {
                    if (((this.ptAnchorCell.X != -1) && (!this.Columns[this.ptAnchorCell.X].Frozen || ((this.trackColumnEdge != -1) && !this.Columns[this.trackColumnEdge].Frozen))) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.negOffset > 0) || (this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.Frozen) != null))))
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Right - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Left;
                        }
                        mouseY = data.Top + 1;
                    }
                    else
                    {
                        hti = this.HitTest(mouseX, data.Top);
                    }
                }
                else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
                {
                    if ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != 0) && (this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None) == null))
                    {
                        return true;
                    }
                    GridColumn column2 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None);
                    int num11 = 0;
                    for (GridColumn column3 = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen); column3 != column2; column3 = this.Columns.GetNextColumn(column3, GridElementStates.Visible, GridElementStates.None))
                    {
                        num11 += column3.Thickness;
                    }
                    if (this.HorizontalOffset != num11)
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Left - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Right;
                        }
                        mouseY = data.Top + 1;
                    }
                }
                return true;
            }
            if (this.gridOper[0x10])
            {
                bool flag = false;
                this.DiscardZonesInScrollingArea(ref data, emptyBackgroundWidth, emptyBackgroundHeight, totalVisibleFrozenHeight, true, true);
                if (mouseY < data.Top)
                {
                    if ((((this.ptAnchorCell.Y != -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & GridElementStates.Frozen) == GridElementStates.None)) || ((this.ptCurrentCell.Y != -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Frozen) == GridElementStates.None))) && (this.verticalOffset != 0))
                    {
                        yOffset = mouseY - data.Top;
                    }
                    else if (mouseY < this.layout.Data.Top)
                    {
                        mouseY = this.layout.Data.Top + 1;
                        flag = true;
                    }
                }
                else if (mouseY > data.Bottom)
                {
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
                    {
                        if ((this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= ((rowsHeight - totalVisibleFrozenHeight) - num3))
                        {
                            yOffset = mouseY - data.Bottom;
                        }
                        else
                        {
                            mouseY = data.Bottom - 1;
                            flag = true;
                        }
                    }
                    else
                    {
                        mouseY = data.Bottom - 1;
                        flag = true;
                    }
                }
                if ((!this.RightToLeftInternal && (mouseX < data.Left)) || (this.RightToLeftInternal && (mouseX > data.Right)))
                {
                    if ((((this.ptAnchorCell.X != -1) && !this.Columns[this.ptAnchorCell.X].Frozen) || ((this.ptCurrentCell.X != -1) && !this.Columns[this.ptCurrentCell.X].Frozen)) && ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.negOffset > 0) || (this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.Frozen) != null))))
                    {
                        if (this.RightToLeftInternal)
                        {
                            xOffset = data.Right - mouseX;
                        }
                        else
                        {
                            xOffset = mouseX - data.Left;
                        }
                    }
                    else if (!this.RightToLeftInternal && (mouseX < this.layout.Data.Left))
                    {
                        mouseX = this.layout.Data.Left + 1;
                        flag = true;
                    }
                    else if (this.RightToLeftInternal && (mouseX > this.layout.Data.Right))
                    {
                        mouseX = this.layout.Data.Right - 1;
                        flag = true;
                    }
                }
                else if ((!this.RightToLeftInternal && (mouseX > data.Right)) || (this.RightToLeftInternal && (mouseX < data.Left)))
                {
                    if ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == 0) || (this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None) != null)))
                    {
                        GridColumn column4 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None);
                        int num12 = 0;
                        for (GridColumn column5 = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen); column5 != column4; column5 = this.Columns.GetNextColumn(column5, GridElementStates.Visible, GridElementStates.None))
                        {
                            num12 += column5.Thickness;
                        }
                        if (this.HorizontalOffset != num12)
                        {
                            if (this.RightToLeftInternal)
                            {
                                xOffset = data.Left - mouseX;
                            }
                            else
                            {
                                xOffset = mouseX - data.Right;
                            }
                        }
                        else
                        {
                            if (this.RightToLeftInternal)
                            {
                                mouseX = data.Left + 1;
                            }
                            else
                            {
                                mouseX = data.Right - 1;
                            }
                            flag = true;
                        }
                    }
                    else
                    {
                        if (this.RightToLeftInternal)
                        {
                            mouseX = data.Left + 1;
                        }
                        else
                        {
                            mouseX = data.Right - 1;
                        }
                        flag = true;
                    }
                }
                if (flag)
                {
                    hti = this.HitTest(mouseX, mouseY);
                }
            }
            return true;
        }

        //override
        internal  Size GetPreferredSizeCore(Size proposedConstraints)
        {
            int num = 2 * (this.BorderWidth + this.Padding.Size.Width);
            int num2 = 2 * (this.BorderWidth + this.Padding.Size.Height);
            bool flag = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Horizontal);
            bool flag2 = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical);
            int num3 = 0x10 + num;
            if (flag2)
            {
                num3 += this.vertScrollBar.Width;
            }
            if (this.RowHeadersVisible)
            {
                num3 += this.RowHeadersWidth;
            }
            int width = Math.Min(num3 + this.Columns.GetColumnsWidth(GridElementStates.Visible), proposedConstraints.Width);
            if (width < num3)
            {
                width = num3;
            }
            int num5 = 0x10 + num2;
            if (flag)
            {
                num5 += this.horizScrollBar.Height;
            }
            if (this.ColumnHeadersVisible)
            {
                num5 += this.ColumnHeadersHeight;
            }
            int height = Math.Min(num5 + this.Rows.GetRowsHeight(GridElementStates.Visible), proposedConstraints.Height);
            if (height < num5)
            {
                height = num5;
            }
            return new Size(width, height);
        }

        /// <summary>Returns the rectangle that represents the display area for a row, as determined by the row index.</summary>
        /// <returns>The <see cref="T:System.Drawing.Rectangle"></see> that represents the display rectangle of the row.</returns>
        /// <param name="cutOverflow">true to return the row rectangle visible in the <see cref="T:MControl.GridView.Grid"></see> bounds; false to return the entire row rectangle. </param>
        /// <param name="rowIndex">The row index for the desired cell. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1. </exception>
        public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            return this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
        }

        private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow)
        {
            int height;
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Displayed) == GridElementStates.None)
            {
                return Rectangle.Empty;
            }
            Rectangle data = this.layout.Data;
            int y = data.Y;
            bool flag = false;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
            while ((firstRow != -1) && !flag)
            {
                if (y > data.Bottom)
                {
                    break;
                }
                if (firstRow == rowIndex)
                {
                    flag = true;
                }
                else
                {
                    y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible | GridElementStates.Frozen);
                }
            }
            if (!flag && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
            {
                firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                while ((firstRow != -1) && !flag)
                {
                    if (y > data.Bottom)
                    {
                        break;
                    }
                    if (firstRow == rowIndex)
                    {
                        flag = true;
                    }
                    else
                    {
                        y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                        firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible);
                    }
                }
            }
            if (!flag)
            {
                return Rectangle.Empty;
            }
            if (cutOverflow && ((y + this.Rows.SharedRow(firstRow).GetHeight(firstRow)) > data.Bottom))
            {
                height = data.Bottom - y;
            }
            else
            {
                height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
            }
            Rectangle rectangle2 = new Rectangle(data.X, y, data.Width, height);
            if (this.layout.RowHeadersVisible)
            {
                rectangle2.Width += this.layout.RowHeaders.Width;
                if (!this.RightToLeftInternal)
                {
                    rectangle2.X -= this.layout.RowHeaders.Width;
                }
            }
            return rectangle2;
        }

        private int GetRowIndexFromY(int y, out int yRowTopEdge)
        {
            int height;
            int num3;
            Rectangle data = this.layout.Data;
            if (y == (data.Y - 1))
            {
                y++;
            }
            int num2 = data.Y;
            for (num3 = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen); (num3 != -1) && (num2 < data.Bottom); num3 = this.Rows.GetNextRow(num3, GridElementStates.Visible | GridElementStates.Frozen))
            {
                height = this.Rows.SharedRow(num3).GetHeight(num3);
                num2 += height;
                if (num2 > y)
                {
                    yRowTopEdge = num2 - height;
                    return num3;
                }
            }
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                for (num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow; (num3 != -1) && (num2 < data.Bottom); num3 = this.Rows.GetNextRow(num3, GridElementStates.Visible))
                {
                    height = this.Rows.SharedRow(num3).GetHeight(num3);
                    num2 += height;
                    if (num2 > y)
                    {
                        yRowTopEdge = num2 - height;
                        return num3;
                    }
                }
            }
            yRowTopEdge = -1;
            return -1;
        }

        private static int GetRowScrollRate(int yOffset)
        {
            if (yOffset <= 10)
            {
                return 90;
            }
            if (yOffset <= 15)
            {
                return 0x39;
            }
            if (yOffset <= 0x19)
            {
                return 30;
            }
            if (yOffset <= 0x23)
            {
                return 0x12;
            }
            return Math.Max(1, 600 / yOffset);
        }

        internal int GetRowYFromIndex(int index)
        {
            int y = this.layout.Data.Y;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
            while (firstRow != -1)
            {
                if (index == firstRow)
                {
                    return y;
                }
                y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible | GridElementStates.Frozen);
            }
            int num3 = y;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
            {
                if (index >= this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                else
                {
                    firstRow = -1;
                }
            }
            else
            {
                firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
            }
            if (firstRow != -1)
            {
                while (firstRow != -1)
                {
                    if (index == firstRow)
                    {
                        return y;
                    }
                    y += this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible);
                }
            }
            y = num3;
            for (firstRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, GridElementStates.Visible, GridElementStates.Frozen); firstRow != -1; firstRow = this.Rows.GetPreviousRow(firstRow, GridElementStates.Visible, GridElementStates.Frozen))
            {
                y -= this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                if (index == firstRow)
                {
                    return y;
                }
            }
            return 0;
        }

        private bool GetTabKeyEffective(bool shift, bool ctrl)
        {
            if (this.StandardTab)
            {
                if (ctrl)
                {
                    if (!shift && (!this.VisibleCellExists || this.CurrentCellIsLastVisibleCell))
                    {
                        return false;
                    }
                    if (!shift)
                    {
                        return true;
                    }
                    if (this.VisibleCellExists)
                    {
                        return !this.CurrentCellIsFirstVisibleCell;
                    }
                }
                return false;
            }
            if (ctrl)
            {
                return false;
            }
            if (!shift && (!this.VisibleCellExists || this.CurrentCellIsLastVisibleCell))
            {
                return false;
            }
            return (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
        }

        /// <summary>Returns location information, such as row and column indices, given x- and y-coordinates.</summary>
        /// <returns>A <see cref="T:MControl.GridView.Grid.HitTestInfo"></see> that contains the location information. </returns>
        /// <param name="y">The y-coordinate. </param>
        /// <param name="x">The x-coordinate. </param>
        /// <filterpriority>1</filterpriority>
        public HitTestInfo HitTest(int x, int y)
        {
            HitTestInfo info = new HitTestInfo();
            if (this.layout.Inside.Contains(x, y))
            {
                if (((this.horizScrollBar != null) && this.horizScrollBar.Visible) && this.horizScrollBar.Bounds.Contains(x, y))
                {
                    info.type = GridHitTestType.HorizontalScrollBar;
                    return info;
                }
                if (((this.vertScrollBar != null) && this.vertScrollBar.Visible) && this.vertScrollBar.Bounds.Contains(x, y))
                {
                    info.type = GridHitTestType.VerticalScrollBar;
                    return info;
                }
                if (this.layout.TopLeftHeader.Contains(x, y))
                {
                    info.type = GridHitTestType.TopLeftHeader;
                    info.typeInternal = GridHitTestTypeInternal.TopLeftHeader;
                    if (this.RightToLeftInternal)
                    {
                        info.colStart = this.layout.TopLeftHeader.Right - 1;
                    }
                    else
                    {
                        info.colStart = this.layout.TopLeftHeader.Left;
                    }
                    info.rowStart = this.layout.TopLeftHeader.Top;
                    if ((!this.RightToLeftInternal && ((this.layout.TopLeftHeader.Right - x) < 6)) || (this.RightToLeftInternal && ((x - this.layout.TopLeftHeader.Left) < 6)))
                    {
                        if (this.RowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing)
                        {
                            info.typeInternal = GridHitTestTypeInternal.TopLeftHeaderResizeLeft;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = (this.layout.TopLeftHeader.Left - x) - 1;
                                return info;
                            }
                            info.mouseBarOffset = (this.layout.TopLeftHeader.Right - x) - 1;
                        }
                        return info;
                    }
                    if ((((this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height) - y) < 5) && (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.EnableResizing))
                    {
                        info.typeInternal = GridHitTestTypeInternal.TopLeftHeaderResizeTop;
                        info.mouseBarOffset = ((this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height) - y) - 1;
                    }
                    return info;
                }
                if (this.layout.ColumnHeaders.Contains(x, y))
                {
                    int num;
                    info.col = this.GetColumnIndexFromX(x, out num);
                    if (info.col < 0)
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = GridHitTestType.ColumnHeader;
                    info.typeInternal = GridHitTestTypeInternal.ColumnHeader;
                    info.rowStart = this.layout.ColumnHeaders.Top;
                    info.colStart = num;
                    int thickness = this.Columns[info.col].Thickness;
                    if ((!this.RightToLeftInternal && (((num + thickness) - x) < 6)) || (this.RightToLeftInternal && (((x - num) + thickness) < 6)))
                    {
                        if (this.RightToLeftInternal)
                        {
                            info.mouseBarOffset = ((num - thickness) - x) + 1;
                        }
                        else
                        {
                            info.mouseBarOffset = ((num + thickness) - x) - 1;
                        }
                        GridColumn column = this.Columns[info.col];
                        if ((column.Resizable == GridTriState.True) && ((column.InheritedAutoSizeMode == GridAutoSizeColumnMode.None) || (column.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)))
                        {
                            info.typeInternal = GridHitTestTypeInternal.ColumnResizeRight;
                        }
                        else
                        {
                            info.typeInternal = GridHitTestTypeInternal.ColumnHeaderRight;
                        }
                    }
                    else if ((!this.RightToLeftInternal && ((x - num) < 6)) || (this.RightToLeftInternal && ((num - x) < 6)))
                    {
                        GridColumn column2 = null;
                        column2 = this.Columns.GetPreviousColumn(this.Columns[info.col], GridElementStates.Visible, GridElementStates.None);
                        if (column2 != null)
                        {
                            info.adjacentCol = column2.Index;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = (num - x) + 1;
                            }
                            else
                            {
                                info.mouseBarOffset = (num - x) - 1;
                            }
                            if ((column2.Resizable == GridTriState.True) && ((column2.InheritedAutoSizeMode == GridAutoSizeColumnMode.None) || (column2.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)))
                            {
                                info.typeInternal = GridHitTestTypeInternal.ColumnResizeLeft;
                            }
                            else
                            {
                                info.typeInternal = GridHitTestTypeInternal.ColumnHeaderLeft;
                            }
                        }
                        else if (this.RowHeadersVisible && (this.RowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing))
                        {
                            info.typeInternal = GridHitTestTypeInternal.TopLeftHeaderResizeRight;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = num - x;
                            }
                            else
                            {
                                info.mouseBarOffset = (num - x) - 1;
                            }
                        }
                        else
                        {
                            info.typeInternal = GridHitTestTypeInternal.FirstColumnHeaderLeft;
                        }
                    }
                    else if (((this.layout.ColumnHeaders.Bottom - y) < 5) && (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.EnableResizing))
                    {
                        info.typeInternal = GridHitTestTypeInternal.ColumnHeadersResizeBottom;
                        info.mouseBarOffset = (this.layout.ColumnHeaders.Bottom - y) - 1;
                    }
                }
                if (this.layout.RowHeaders.Contains(x, y))
                {
                    int num3;
                    info.row = this.GetRowIndexFromY(y, out num3);
                    if (info.row < 0)
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = GridHitTestType.RowHeader;
                    info.typeInternal = GridHitTestTypeInternal.RowHeader;
                    info.rowStart = num3;
                    if (this.RightToLeftInternal)
                    {
                        info.colStart = this.layout.RowHeaders.Right - 1;
                    }
                    else
                    {
                        info.colStart = this.layout.RowHeaders.Left;
                    }
                    int height = this.Rows.SharedRow(info.row).GetHeight(info.row);
                    if (((num3 + height) - y) < 5)
                    {
                        if (this.RowIsResizable(info.row) && (this.AutoSizeRowsMode == GridAutoSizeRowsMode.None))
                        {
                            info.typeInternal = GridHitTestTypeInternal.RowResizeBottom;
                            info.mouseBarOffset = ((num3 + height) - y) - 1;
                        }
                    }
                    else if ((y - num3) < 5)
                    {
                        int rowIndex = -1;
                        if ((info.row != this.displayedBandsInfo.FirstDisplayedScrollingRow) || (this.displayedBandsInfo.NumDisplayedFrozenRows > 0))
                        {
                            rowIndex = this.Rows.GetPreviousRow(info.row, GridElementStates.Visible);
                        }
                        if (rowIndex != -1)
                        {
                            if (this.RowIsResizable(rowIndex) && (this.AutoSizeRowsMode == GridAutoSizeRowsMode.None))
                            {
                                info.typeInternal = GridHitTestTypeInternal.RowResizeTop;
                                info.adjacentRow = rowIndex;
                                info.mouseBarOffset = (num3 - y) - 1;
                            }
                        }
                        else if (this.ColumnHeadersVisible && (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.EnableResizing))
                        {
                            info.typeInternal = GridHitTestTypeInternal.TopLeftHeaderResizeBottom;
                            info.mouseBarOffset = (num3 - y) - 1;
                        }
                    }
                    else if (((!this.RightToLeftInternal && ((this.layout.RowHeaders.Right - x) < 6)) || (this.RightToLeftInternal && ((x - this.layout.RowHeaders.Left) < 6))) && (this.RowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing))
                    {
                        info.typeInternal = GridHitTestTypeInternal.RowHeadersResizeRight;
                        if (this.RightToLeftInternal)
                        {
                            info.mouseBarOffset = (this.layout.RowHeaders.Left - x) - 1;
                        }
                        else
                        {
                            info.mouseBarOffset = (this.layout.RowHeaders.Right - x) - 1;
                        }
                    }
                }
                if (this.layout.Data.Contains(x, y))
                {
                    int num6;
                    int num7;
                    info.col = this.GetColumnIndexFromX(x, out num6);
                    info.row = this.GetRowIndexFromY(y, out num7);
                    if ((info.col < 0) || (info.row < 0))
                    {
                        return HitTestInfo.Nowhere;
                    }
                    info.type = GridHitTestType.Cell;
                    info.typeInternal = GridHitTestTypeInternal.Cell;
                    info.rowStart = num7;
                    info.colStart = num6;
                    if (!this.ColumnHeadersVisible)
                    {
                        int num8 = this.Columns[info.col].Thickness;
                        if ((!this.RightToLeftInternal && (((num6 + num8) - x) < 6)) || (this.RightToLeftInternal && (((x - num6) + num8) < 6)))
                        {
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = ((num6 - num8) - x) + 1;
                            }
                            else
                            {
                                info.mouseBarOffset = ((num6 + num8) - x) - 1;
                            }
                            GridColumn column3 = this.Columns[info.col];
                            if ((column3.Resizable == GridTriState.True) && ((column3.InheritedAutoSizeMode == GridAutoSizeColumnMode.None) || (column3.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)))
                            {
                                info.typeInternal = GridHitTestTypeInternal.ColumnResizeRight;
                            }
                            return info;
                        }
                        if ((!this.RightToLeftInternal && ((x - num6) < 6)) || (this.RightToLeftInternal && ((num6 - x) < 6)))
                        {
                            GridColumn column4 = null;
                            if ((info.col != this.displayedBandsInfo.FirstDisplayedScrollingCol) || (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0))
                            {
                                column4 = this.Columns.GetPreviousColumn(this.Columns[info.col], GridElementStates.Visible, GridElementStates.None);
                            }
                            if (column4 != null)
                            {
                                info.adjacentCol = column4.Index;
                                if (this.RightToLeftInternal)
                                {
                                    info.mouseBarOffset = (num6 - x) + 1;
                                }
                                else
                                {
                                    info.mouseBarOffset = (num6 - x) - 1;
                                }
                                if ((column4.Resizable == GridTriState.True) && ((column4.InheritedAutoSizeMode == GridAutoSizeColumnMode.None) || (column4.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)))
                                {
                                    info.typeInternal = GridHitTestTypeInternal.ColumnResizeLeft;
                                }
                                return info;
                            }
                            if (this.RowHeadersVisible && (this.RowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing))
                            {
                                info.typeInternal = GridHitTestTypeInternal.RowHeadersResizeLeft;
                                if (this.RightToLeftInternal)
                                {
                                    info.mouseBarOffset = num6 - x;
                                    return info;
                                }
                                info.mouseBarOffset = (num6 - x) - 1;
                                return info;
                            }
                        }
                    }
                    else if ((!this.RightToLeftInternal && ((x - num6) < 6)) || (this.RightToLeftInternal && ((num6 - x) < 6)))
                    {
                        GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                        if (((info.col == firstColumn.Index) && this.RowHeadersVisible) && (this.RowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing))
                        {
                            info.typeInternal = GridHitTestTypeInternal.RowHeadersResizeLeft;
                            if (this.RightToLeftInternal)
                            {
                                info.mouseBarOffset = num6 - x;
                                return info;
                            }
                            info.mouseBarOffset = (num6 - x) - 1;
                            return info;
                        }
                    }
                    if (!this.RowHeadersVisible)
                    {
                        int num9 = this.Rows.SharedRow(info.row).GetHeight(info.row);
                        if (((num7 + num9) - y) < 5)
                        {
                            if (this.RowIsResizable(info.row) && (this.AutoSizeRowsMode == GridAutoSizeRowsMode.None))
                            {
                                info.typeInternal = GridHitTestTypeInternal.RowResizeBottom;
                                info.mouseBarOffset = ((num7 + num9) - y) - 1;
                            }
                            return info;
                        }
                        if ((y - num7) < 5)
                        {
                            int previousRow = -1;
                            if ((info.row != this.displayedBandsInfo.FirstDisplayedScrollingRow) || (this.displayedBandsInfo.NumDisplayedFrozenRows > 0))
                            {
                                previousRow = this.Rows.GetPreviousRow(info.row, GridElementStates.Visible);
                            }
                            if (previousRow == -1)
                            {
                                if (this.ColumnHeadersVisible && (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.EnableResizing))
                                {
                                    info.typeInternal = GridHitTestTypeInternal.ColumnHeadersResizeTop;
                                    info.mouseBarOffset = (num7 - y) - 1;
                                }
                                return info;
                            }
                            if (this.RowIsResizable(previousRow) && (this.AutoSizeRowsMode == GridAutoSizeRowsMode.None))
                            {
                                info.typeInternal = GridHitTestTypeInternal.RowResizeTop;
                                info.adjacentRow = previousRow;
                                info.mouseBarOffset = (num7 - y) - 1;
                            }
                        }
                        return info;
                    }
                    if ((y - num7) < 5)
                    {
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                        if (((info.row == firstRow) && this.ColumnHeadersVisible) && (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.EnableResizing))
                        {
                            info.typeInternal = GridHitTestTypeInternal.ColumnHeadersResizeTop;
                            info.mouseBarOffset = (num7 - y) - 1;
                        }
                    }
                }
            }
            return info;
        }

        private void HorizScrollTimer_Tick(object sender, EventArgs e)
        {
            base.BeginInvoke(new MethodInvoker(this.HorizScrollTimerHandler));
        }

        private void HorizScrollTimerHandler()
        {
            int num;
            int num2;
            Point point = base.PointToClient(Control.MousePosition);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            int x = point.X;
            int y = point.Y;
            if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
            {
                if (num != 0)
                {
                    int xOffset = Math.Abs(num);
                    int columns = num / xOffset;
                    this.ScrollColumns(columns);
                    this.horizScrollTimer.Interval = GetColumnScrollRate(xOffset);
                    if (!this.gridOper[4])
                    {
                        if (this.gridOper[0x10])
                        {
                            if (num2 != 0)
                            {
                                hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), (point.Y - num2) - (num2 / Math.Abs(num2)));
                            }
                            else
                            {
                                hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), y);
                            }
                            if ((hti.col >= 0) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                    else
                    {
                        hti = this.HitTest(point.X + ((this.RightToLeftInternal ? 1 : -1) * (num + columns)), y);
                        if (hti.col >= 0)
                        {
                            this.OnColumnSelectMouseMove(hti);
                        }
                    }
                }
                else
                {
                    if (this.gridOper[4] && (hti.col >= 0))
                    {
                        this.OnColumnSelectMouseMove(hti);
                    }
                    else if ((this.gridOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                    {
                        this.OnCellSelectMouseMove(hti);
                    }
                    this.HorizScrollTimer.Enabled = false;
                }
            }
        }

        private bool InitializeEditingCellValue(ref GridCellStyle gridCellStyle, ref GridCell gridCell)
        {
            GridDataErrorEventArgs e = null;
            this.uneditedFormattedValue = gridCell.GetFormattedValue(this.ptCurrentCell.Y, ref gridCellStyle, GridDataErrorContexts.Formatting);
            this.gridState1[0x200] = true;
            try
            {
                IGridEditingCell cell = gridCell as IGridEditingCell;
                object editingCellFormattedValue = cell.GetEditingCellFormattedValue(GridDataErrorContexts.Formatting);
                if ((((editingCellFormattedValue == null) && (this.uneditedFormattedValue != null)) || ((editingCellFormattedValue != null) && (this.uneditedFormattedValue == null))) || ((editingCellFormattedValue != null) && !this.uneditedFormattedValue.Equals(editingCellFormattedValue)))
                {
                    gridCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
                    cell = gridCell as IGridEditingCell;
                    cell.EditingCellFormattedValue = this.uneditedFormattedValue;
                    cell.EditingCellValueChanged = false;
                }
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
                e = new GridDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, GridDataErrorContexts.InitialValueRestoration);
                this.OnDataErrorInternal(e);
            }
            finally
            {
                this.gridState1[0x200] = false;
            }
            if (e == null)
            {
                return true;
            }
            if (e.ThrowException)
            {
                throw e.Exception;
            }
            return !e.Cancel;
        }

        private bool InitializeEditingControlValue(ref GridCellStyle gridCellStyle, GridCell gridCell)
        {
            GridDataErrorEventArgs e = null;
            object initialFormattedValue = gridCell.GetFormattedValue(this.ptCurrentCell.Y, ref gridCellStyle, GridDataErrorContexts.Formatting);
            this.gridState1[0x4000] = true;
            this.gridState1[0x200] = true;
            try
            {
                gridCell.InitializeEditingControl(this.ptCurrentCell.Y, initialFormattedValue, gridCellStyle);
                ((IGridEditingControl) this.editingControl).EditingControlValueChanged = false;
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
                e = new GridDataErrorEventArgs(exception, this.ptCurrentCell.X, this.ptCurrentCell.Y, GridDataErrorContexts.InitialValueRestoration);
                this.OnDataErrorInternal(e);
            }
            finally
            {
                this.gridState1[0x4000] = false;
                this.gridState1[0x200] = false;
            }
            if (e != null)
            {
                if (e.ThrowException)
                {
                    throw e.Exception;
                }
                return !e.Cancel;
            }
            this.uneditedFormattedValue = initialFormattedValue;
            return true;
        }

        /// <summary>Invalidates the specified cell of the <see cref="T:MControl.GridView.Grid"></see>, forcing it to be repainted.</summary>
        /// <param name="gridCell">The <see cref="T:MControl.GridView.GridCell"></see> to invalidate. </param>
        /// <exception cref="T:System.ArgumentNullException">gridCell is null.</exception>
        /// <exception cref="T:System.ArgumentException">gridCell does not belong to the <see cref="T:MControl.GridView.Grid"></see>. </exception>
        /// <filterpriority>1</filterpriority>
        public void InvalidateCell(GridCell gridCell)
        {
            if (gridCell == null)
            {
                throw new ArgumentNullException("gridCell");
            }
            if (gridCell.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CellDoesNotBelongToGrid"));
            }
            this.InvalidateCellPrivate(gridCell);
        }

        /// <summary>Invalidates the cell with the specified row and column indexes, forcing it to be repainted.</summary>
        /// <param name="columnIndex">The column index of the cell to invalidate.</param>
        /// <param name="rowIndex">The row index of the cell to invalidate. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than -1 or greater than the number of columns in the control minus 1.-or-rowIndex is less than -1 or greater than the number of rows in the control minus 1. </exception>
        /// <filterpriority>1</filterpriority>
        public void InvalidateCell(int columnIndex, int rowIndex)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.InvalidateCellPrivate(columnIndex, rowIndex);
        }

        private void InvalidateCellPrivate(GridCell gridCell)
        {
            this.InvalidateCell(gridCell.ColumnIndex, gridCell.RowIndex);
        }

        private void InvalidateCellPrivate(int columnIndex, int rowIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle rc = this.GetCellAdjustedDisplayRectangle(columnIndex, rowIndex, true);
                if (!rc.IsEmpty)
                {
                    base.Invalidate(rc);
                }
            }
        }

        /// <summary>Invalidates the specified column of the <see cref="T:MControl.GridView.Grid"></see>, forcing it to be repainted.</summary>
        /// <param name="columnIndex">The index of the column to invalidate. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is not in the valid range of 0 to the number of columns minus 1. </exception>
        /// <filterpriority>1</filterpriority>
        public void InvalidateColumn(int columnIndex)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            this.InvalidateColumnInternal(columnIndex);
        }

        internal void InvalidateColumnInternal(int columnIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, true);
                if (!columnDisplayRectanglePrivate.IsEmpty)
                {
                    base.Invalidate(columnDisplayRectanglePrivate);
                }
            }
        }

        private void InvalidateData()
        {
            if (base.IsHandleCreated)
            {
                base.Invalidate(this.layout.Data);
            }
        }

        private void InvalidateInside()
        {
            if (base.IsHandleCreated)
            {
                base.Invalidate(this.layout.Inside);
            }
        }

        /// <summary>Invalidates the specified row of the <see cref="T:MControl.GridView.Grid"></see>, forcing it to be repainted.</summary>
        /// <param name="rowIndex">The index of the row to invalidate. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows minus 1. </exception>
        /// <filterpriority>1</filterpriority>
        public void InvalidateRow(int rowIndex)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.InvalidateRowPrivate(rowIndex);
        }

        private void InvalidateRowHeights()
        {
            this.Rows.InvalidateCachedRowsHeights();
            if (base.IsHandleCreated)
            {
                this.PerformLayoutPrivate(false, false, false, false);
                base.Invalidate();
            }
        }

        private void InvalidateRowPrivate(int rowIndex)
        {
            if (base.IsHandleCreated)
            {
                Rectangle rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, true);
                if (!rowDisplayRectanglePrivate.IsEmpty)
                {
                    base.Invalidate(rowDisplayRectanglePrivate);
                }
            }
        }

        private void InvalidateRows(int lo, int hi)
        {
            if (this.Rows.GetRowCount(GridElementStates.Visible) != 0)
            {
                Rectangle data = this.layout.Data;
                if ((this.Rows.GetRowState(lo) & GridElementStates.Visible) == GridElementStates.None)
                {
                    lo = this.Rows.GetNextRow(lo, GridElementStates.Visible);
                }
                if (lo != -1)
                {
                    int top;
                    int bottom;
                    if ((this.Rows.GetRowState(hi) & GridElementStates.Visible) == GridElementStates.None)
                    {
                        hi = this.Rows.GetPreviousRow(hi, GridElementStates.Visible);
                    }
                    Rectangle rowDisplayRectangle = this.GetRowDisplayRectangle(lo, true);
                    if (rowDisplayRectangle.IsEmpty)
                    {
                        if ((this.Rows.GetRowState(lo) & GridElementStates.Frozen) != GridElementStates.None)
                        {
                            return;
                        }
                        if (this.displayedBandsInfo.NumDisplayedScrollingRows == 0)
                        {
                            return;
                        }
                        if ((lo >= this.displayedBandsInfo.FirstDisplayedScrollingRow) && (this.Rows.GetRowCount(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lo) >= this.displayedBandsInfo.NumDisplayedScrollingRows))
                        {
                            return;
                        }
                        top = this.GetRowDisplayRectangle(this.displayedBandsInfo.FirstDisplayedScrollingRow, true).Top;
                    }
                    else
                    {
                        top = rowDisplayRectangle.Top;
                    }
                    rowDisplayRectangle = this.GetRowDisplayRectangle(hi, true);
                    if (!rowDisplayRectangle.IsEmpty)
                    {
                        bottom = rowDisplayRectangle.Bottom;
                    }
                    else if ((this.Rows.GetRowState(hi) & GridElementStates.Frozen) == GridElementStates.Frozen)
                    {
                        bottom = data.Bottom;
                    }
                    else if (hi > this.displayedBandsInfo.FirstDisplayedScrollingRow)
                    {
                        bottom = data.Bottom;
                    }
                    else
                    {
                        if (this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen) == 0)
                        {
                            return;
                        }
                        bottom = 0;
                        int rowIndex = 0;
                        while (rowIndex < this.displayedBandsInfo.NumDisplayedFrozenRows)
                        {
                            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) != GridElementStates.None)
                            {
                                if (rowIndex == (this.displayedBandsInfo.NumDisplayedFrozenRows - 1))
                                {
                                    bottom = this.GetRowDisplayRectangle(rowIndex, true).Bottom;
                                    break;
                                }
                                rowIndex++;
                            }
                        }
                        if (bottom <= top)
                        {
                            return;
                        }
                    }
                    base.Invalidate(new Rectangle(data.X, top, data.Width, bottom - top));
                }
            }
        }

        private void InvalidateScrollBars()
        {
            if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
            {
                this.horizScrollBar.Invalidate();
            }
            if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
            {
                this.vertScrollBar.Invalidate();
            }
        }

        private bool IsColumnOutOfBounds(int columnIndex)
        {
            if (columnIndex < this.Columns.Count)
            {
                return (columnIndex == -1);
            }
            return true;
        }

        private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex)
        {
            if (((columnIndex < this.Columns.Count) && (rowIndex < this.Rows.Count)) && (columnIndex != -1))
            {
                return (rowIndex == -1);
            }
            return true;
        }

        /// <summary>Determines whether a character is an input character that the <see cref="T:MControl.GridView.Grid"></see> recognizes.</summary>
        /// <returns>true if the character is recognized as an input character; otherwise, false.</returns>
        /// <param name="charCode">The character to test.</param>
        protected override bool IsInputChar(char charCode)
        {
            return (((this.editingControl != null) && this.gridState1[0x20]) || base.IsInputChar(charCode));
        }

        protected override bool IsInputKey(Keys keyData)
        {
            if ((keyData & Keys.Alt) == Keys.Alt)
            {
                return false;
            }
            switch ((keyData & Keys.KeyCode))
            {
                case Keys.Escape:
                    return this.IsEscapeKeyEffective;

                case Keys.Space:
                    if ((((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Shift) || ((this.SelectionMode != GridSelectionMode.ColumnHeaderSelect) && (this.SelectionMode != GridSelectionMode.RowHeaderSelect))) || (this.ptCurrentCell.X == -1))
                    {
                        break;
                    }
                    return true;

                case Keys.Prior:
                case Keys.Next:
                case Keys.End:
                case Keys.Home:
                case Keys.Left:
                case Keys.Up:
                case Keys.Right:
                case Keys.Down:
                case Keys.Delete:
                case Keys.D0:
                case Keys.Return:
                case Keys.NumPad0:
                case Keys.F2:
                    return true;

                case Keys.Insert:
                case Keys.C:
                    if ((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control)
                    {
                        break;
                    }
                    return true;

                case Keys.Tab:
                    return this.GetTabKeyEffective((keyData & Keys.Shift) == Keys.Shift, (keyData & Keys.Control) == Keys.Control);

                case Keys.A:
                    if ((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control)
                    {
                        break;
                    }
                    return true;
            }
            return base.IsInputKey(keyData);
        }

        private bool IsRowOutOfBounds(int rowIndex)
        {
            if (rowIndex < this.Rows.Count)
            {
                return (rowIndex == -1);
            }
            return true;
        }

        private bool IsSharedCellReadOnly(GridCell gridCell, int rowIndex)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            return (((this.ReadOnly || ((rowState & GridElementStates.ReadOnly) != GridElementStates.None)) || ((gridCell.OwningColumn != null) && gridCell.OwningColumn.ReadOnly)) || gridCell.StateIncludes(GridElementStates.ReadOnly));
        }

        internal bool IsSharedCellSelected(GridCell gridCell, int rowIndex)
        {
            return ((((this.Rows.GetRowState(rowIndex) & GridElementStates.Selected) != GridElementStates.None) || ((gridCell.OwningColumn != null) && gridCell.OwningColumn.Selected)) || gridCell.StateIncludes(GridElementStates.Selected));
        }

        internal bool IsSharedCellVisible(GridCell gridCell, int rowIndex)
        {
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) == GridElementStates.None)
            {
                return false;
            }
            return ((gridCell.OwningColumn != null) && gridCell.OwningColumn.Visible);
        }

        private void LayoutScrollBars()
        {
            base.SuspendLayout();
            try
            {
                int firstDisplayedScrollingRow;
                bool flag = ((this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Horizontal)) && this.gridState2[0x2000000];
                bool flag2 = (this.scrollBars == System.Windows.Forms.ScrollBars.Both) || (this.scrollBars == System.Windows.Forms.ScrollBars.Vertical);
                bool flag3 = false;
                bool flag4 = false;
                bool flag5 = false;
                bool rightToLeftInternal = this.RightToLeftInternal;
                int columnCount = this.Columns.GetColumnCount(GridElementStates.Visible);
                int rowCount = this.Rows.GetRowCount(GridElementStates.Visible);
                int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible);
                int num5 = this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen);
                int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible);
                int totalVisibleFrozenHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                int num8 = this.horizScrollBar.Height = SystemInformation.HorizontalScrollBarHeight;
                int num9 = this.vertScrollBar.Width = SystemInformation.VerticalScrollBarWidth;
                if ((flag && (columnsWidth > this.layout.Data.Width)) && ((num5 < this.layout.Data.Width) && (num8 <= this.layout.Data.Height)))
                {
                    int height = this.layout.Data.Height;
                    this.layout.Data.Height -= num8;
                    flag3 = flag4 = true;
                    if (((columnsWidth - this.layout.Data.Width) <= num9) || ((this.layout.Data.Width - num5) <= num9))
                    {
                        firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        this.ComputeVisibleRows();
                        if (((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen)))) && ((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)))
                        {
                            flag4 = num5 < (this.layout.Data.Width - num9);
                        }
                        this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    }
                    if (flag4)
                    {
                        if (this.layout.RowHeadersVisible)
                        {
                            this.layout.RowHeaders.Height -= num8;
                        }
                    }
                    else
                    {
                        this.layout.Data.Height = height;
                    }
                }
                firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                this.ComputeVisibleRows();
                if (((flag2 && (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen))) && ((this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != (rowCount - this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen))) && ((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)))) && ((this.layout.Data.Height > totalVisibleFrozenHeight) && (num9 <= this.layout.Data.Width)))
                {
                    this.layout.Data.Width -= num9;
                    if (rightToLeftInternal)
                    {
                        this.layout.Data.X += num9;
                    }
                    if (this.layout.ColumnHeadersVisible)
                    {
                        this.layout.ColumnHeaders.Width -= num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.ColumnHeaders.X += num9;
                        }
                    }
                    flag5 = true;
                }
                this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
                this.ComputeVisibleColumns();
                if (((flag && flag5) && (!flag4 && (columnsWidth > this.layout.Data.Width))) && ((num5 < this.layout.Data.Width) && (num8 <= this.layout.Data.Height)))
                {
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        this.layout.ColumnHeaders.Width += num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.ColumnHeaders.X -= num9;
                        }
                    }
                    this.layout.Data.Width += num9;
                    if (rightToLeftInternal)
                    {
                        this.layout.Data.X -= num9;
                    }
                    this.layout.Data.Height -= num8;
                    flag5 = false;
                    this.ComputeVisibleRows();
                    if ((((this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen)) && (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount)) && (((rowsHeight - totalVisibleFrozenHeight) != this.ComputeHeightOfFittingTrailingScrollingRows(totalVisibleFrozenHeight)) && (this.layout.Data.Height > totalVisibleFrozenHeight))) && (num9 <= this.layout.Data.Width))
                    {
                        this.layout.Data.Width -= num9;
                        if (rightToLeftInternal)
                        {
                            this.layout.Data.X += num9;
                        }
                        if (this.layout.ColumnHeadersVisible)
                        {
                            this.layout.ColumnHeaders.Width -= num9;
                            if (rightToLeftInternal)
                            {
                                this.layout.ColumnHeaders.X += num9;
                            }
                        }
                        flag5 = true;
                    }
                    if (flag5)
                    {
                        flag4 = true;
                    }
                    else
                    {
                        flag4 = flag3;
                    }
                }
                this.layout.ResizeBoxRect = new Rectangle();
                if (flag5 && flag4)
                {
                    this.layout.ResizeBoxRect = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, this.layout.Data.Bottom, this.vertScrollBar.Width, this.horizScrollBar.Height);
                }
                if (flag4 && (columnCount > 0))
                {
                    int num11 = columnsWidth - this.layout.Data.Width;
                    this.horizScrollBar.Minimum = 0;
                    this.horizScrollBar.Maximum = columnsWidth - num5;
                    this.horizScrollBar.SmallChange = 1;
                    this.horizScrollBar.LargeChange = Math.Max((columnsWidth - num5) - num11, 0);
                    this.horizScrollBar.Enabled = base.Enabled;
                    this.horizScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Inside.X + this.layout.ResizeBoxRect.Width) : this.layout.Inside.X, this.layout.Data.Bottom, this.layout.Inside.Width - this.layout.ResizeBoxRect.Width, this.horizScrollBar.Height);
                    this.horizScrollBar.Visible = true;
                    this.horizScrollBar.Invalidate();
                }
                else
                {
                    this.horizScrollBar.Visible = false;
                    this.HorizontalOffset = 0;
                    this.horizScrollBar.Enabled = false;
                    this.horizScrollBar.Minimum = 0;
                    this.horizScrollBar.Maximum = 1;
                    this.horizScrollBar.SmallChange = 1;
                    this.horizScrollBar.LargeChange = 1;
                    this.horizScrollBar.Value = 0;
                }
                if (flag5)
                {
                    int y = this.layout.Data.Y;
                    int num13 = this.layout.Data.Height;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        y = this.layout.ColumnHeaders.Y;
                        num13 += this.layout.ColumnHeaders.Height;
                    }
                    else if (this.SingleHorizontalBorderAdded)
                    {
                        y--;
                        num13++;
                    }
                    this.vertScrollBar.Minimum = 0;
                    this.vertScrollBar.Maximum = rowsHeight - totalVisibleFrozenHeight;
                    this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
                    this.vertScrollBar.LargeChange = this.layout.Data.Height - totalVisibleFrozenHeight;
                    this.vertScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, y, this.vertScrollBar.Width, num13);
                    this.vertScrollBar.Enabled = base.Enabled;
                    this.vertScrollBar.Visible = true;
                    this.vertScrollBar.Invalidate();
                    this.verticalOffset = this.vertScrollBar.Value;
                }
                else
                {
                    this.vertScrollBar.Visible = false;
                    this.verticalOffset = 0;
                    this.vertScrollBar.Enabled = false;
                    this.vertScrollBar.Minimum = 0;
                    this.vertScrollBar.Maximum = 1;
                    this.vertScrollBar.LargeChange = 1;
                    this.vertScrollBar.Value = 0;
                }
            }
            finally
            {
                base.ResumeLayout(false);
            }
        }

        private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow)
        {
            Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
            if ((firstDisplayedCellAddress.X != -1) && ((includeNewRow || !this.AllowUserToAddRowsInternal) || (firstDisplayedCellAddress.Y != (this.Rows.Count - 1))))
            {
                this.SetAndSelectCurrentCellAddress(firstDisplayedCellAddress.X, firstDisplayedCellAddress.Y, true, false, false, true, false);
            }
        }

        private static GridAutoSizeRowMode MapAutoSizeRowsModeToRowMode(GridAutoSizeRowsMode autoSizeRowsMode)
        {
            switch (autoSizeRowsMode)
            {
                case GridAutoSizeRowsMode.AllHeaders:
                    return GridAutoSizeRowMode.RowHeader;

                case GridAutoSizeRowsMode.AllCellsExceptHeaders:
                    return GridAutoSizeRowMode.AllCellsExceptHeader;

                case GridAutoSizeRowsMode.AllCells:
                    return GridAutoSizeRowMode.AllCells;

                case GridAutoSizeRowsMode.DisplayedHeaders:
                    return GridAutoSizeRowMode.RowHeader;

                case GridAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                    return GridAutoSizeRowMode.AllCellsExceptHeader;

                case GridAutoSizeRowsMode.DisplayedCells:
                    return GridAutoSizeRowMode.AllCells;
            }
            return GridAutoSizeRowMode.RowHeader;
        }

        private void MapGridColumnToDataBoundField(GridColumn gridColumn)
        {
            GridDataConnection dataConnection = this.DataConnection;
            int boundColumnIndex = (dataConnection == null) ? -1 : dataConnection.BoundColumnIndex(gridColumn.DataPropertyName);
            if (boundColumnIndex != -1)
            {
                gridColumn.IsDataBoundInternal = true;
                gridColumn.BoundColumnIndex = boundColumnIndex;
                gridColumn.BoundColumnConverter = dataConnection.BoundColumnConverter(boundColumnIndex);
                gridColumn.ValueType = dataConnection.BoundColumnValueType(boundColumnIndex);
                gridColumn.ReadOnly = dataConnection.DataFieldIsReadOnly(gridColumn.BoundColumnIndex) || gridColumn.ReadOnly;
                this.InvalidateColumnInternal(gridColumn.Index);
                if ((gridColumn.SortMode != GridColumnSortMode.NotSortable) && !this.gridOper[0x400])
                {
                    gridColumn.HeaderCell.SortGlyphDirection = dataConnection.BoundColumnSortOrder(boundColumnIndex);
                    if ((this.sortedColumn == null) && (gridColumn.HeaderCell.SortGlyphDirection != System.Windows.Forms.SortOrder.None))
                    {
                        this.sortedColumn = gridColumn;
                        this.sortOrder = gridColumn.HeaderCell.SortGlyphDirection;
                    }
                }
            }
            else
            {
                gridColumn.IsDataBoundInternal = false;
                gridColumn.BoundColumnIndex = -1;
                gridColumn.BoundColumnConverter = null;
                this.InvalidateColumnInternal(gridColumn.Index);
            }
        }

        private void MoveColumnHeadersOrRowResize(MouseEventArgs e)
        {
            this.lastRowSplitBar = this.currentRowSplitBar;
            this.currentRowSplitBar = e.Y;
            Rectangle rect = this.CalcRowResizeFeedbackRect(this.lastRowSplitBar);
            if (((this.editingControl != null) && !this.gridState1[0x1000]) && this.editingPanel.Bounds.IntersectsWith(rect))
            {
                this.editingPanel.Invalidate();
                this.editingPanel.Update();
                this.editingControl.Invalidate();
                this.editingControl.Update();
            }
            base.Invalidate(rect);
            base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
        }

        private void MoveColumnRelocation(MouseEventArgs e, HitTestInfo hti)
        {
            this.lastHeaderShadow = e.X;
            this.gridState2[0x400] = this.ColumnRelocationTarget(e, hti, out this.trackColumnEdge);
            base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
        }

        private void MoveRowHeadersOrColumnResize(MouseEventArgs e)
        {
            this.lastColSplitBar = this.currentColSplitBar;
            this.currentColSplitBar = e.X;
            Rectangle rect = this.CalcColResizeFeedbackRect(this.lastColSplitBar);
            if (((this.editingControl != null) && !this.gridState1[0x1000]) && this.editingPanel.Bounds.IntersectsWith(rect))
            {
                this.editingPanel.Invalidate();
                this.editingPanel.Update();
                this.editingControl.Invalidate();
                this.editingControl.Update();
            }
            base.Invalidate(rect);
            base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
        }

        /// <summary>Notifies the <see cref="T:MControl.GridView.Grid"></see> that the current cell has uncommitted changes.</summary>
        /// <param name="dirty">true to indicate the cell has uncommitted changes; otherwise, false. </param>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public virtual void NotifyCurrentCellDirty(bool dirty)
        {
            if (!this.gridState1[0x200])
            {
                this.IsCurrentCellDirtyInternal = dirty;
                if ((dirty && (this.editingControl != null)) && ((IGridEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
        }

        internal void OnAddedColumn(GridColumn gridColumn)
        {
            if ((gridColumn.DisplayIndex == -1) || (gridColumn.DisplayIndex >= this.Columns.Count))
            {
                gridColumn.DisplayIndexInternal = gridColumn.Index;
            }
            this.CorrectColumnDisplayIndexesAfterInsertion(gridColumn);
            if (gridColumn.HasHeaderCell)
            {
                gridColumn.HeaderCell.GridInternal = this;
            }
            this.AdjustExpandingRows(gridColumn.Index, false);
            GridAutoSizeColumnMode inheritedAutoSizeMode = gridColumn.InheritedAutoSizeMode;
            bool fixedColumnWidth = (inheritedAutoSizeMode == GridAutoSizeColumnMode.None) || (inheritedAutoSizeMode == GridAutoSizeColumnMode.Fill);
            if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
            {
                this.AutoResizeColumnHeadersHeight(gridColumn.Index, true, fixedColumnWidth);
            }
            if (!fixedColumnWidth)
            {
                gridColumn.CachedThickness = gridColumn.Thickness;
                this.AutoResizeColumnInternal(gridColumn.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(gridColumn.Index, true, true);
                }
            }
            this.OnColumnAdded(new GridColumnEventArgs(gridColumn));
        }

        internal void OnAddedRow_PostNotification(int rowIndex)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & GridElementStates.Visible) != GridElementStates.None)
            {
                bool flag3;
                bool flag = (rowState & GridElementStates.Displayed) != GridElementStates.None;
                GridAutoSizeRowsModeInternal autoSizeRowsMode = (GridAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                bool flag2 = false;
                if ((autoSizeRowsMode != GridAutoSizeRowsModeInternal.None) && (((autoSizeRowsMode & GridAutoSizeRowsModeInternal.DisplayedRows) == GridAutoSizeRowsModeInternal.None) || flag))
                {
                    int height = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                    this.Rows.SharedRow(rowIndex).CachedThickness = height;
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                    flag2 = true;
                }
                GridAutoSizeColumnCriteriaInternal allRows = GridAutoSizeColumnCriteriaInternal.AllRows;
                if (flag)
                {
                    allRows |= GridAutoSizeColumnCriteriaInternal.DisplayedRows;
                }
                if (this.Rows.GetRowCount(GridElementStates.Visible) > 1)
                {
                    flag3 = this.AdjustExpandingColumns(allRows, rowIndex);
                }
                else
                {
                    flag3 = this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                }
                bool fixedColumnHeadersHeight = this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize;
                bool flag5 = (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing);
                if (!flag5 && !flag3)
                {
                    fixedColumnHeadersHeight = true;
                }
                if (flag5)
                {
                    this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, fixedColumnHeadersHeight, true);
                }
                if (!fixedColumnHeadersHeight)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (flag2)
                {
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                }
                if (flag5 && !fixedColumnHeadersHeight)
                {
                    this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
                }
            }
        }

        internal void OnAddedRow_PreNotification(int rowIndex)
        {
            if (this.AllowUserToAddRowsInternal && (this.newRowIndex == -1))
            {
                this.newRowIndex = rowIndex;
            }
            if (((this.Rows.GetRowState(rowIndex) & GridElementStates.ReadOnly) == GridElementStates.None) && !this.ReadOnly)
            {
                foreach (GridCell cell in this.Rows.SharedRow(rowIndex).Cells)
                {
                    if (!cell.OwningColumn.ReadOnly && this.IsSharedCellReadOnly(cell, rowIndex))
                    {
                        this.individualReadOnlyCells.Add(cell);
                    }
                }
            }
        }

        internal void OnAddedRows_PostNotification(GridRow[] gridRows)
        {
            foreach (GridRow row in gridRows)
            {
                this.OnAddedRow_PostNotification(row.Index);
            }
        }

        internal void OnAddedRows_PreNotification(GridRow[] gridRows)
        {
            foreach (GridRow row in gridRows)
            {
                this.OnAddedRow_PreNotification(row.Index);
            }
        }

        internal void OnAddingColumn(GridColumn gridColumn)
        {
            if (gridColumn == null)
            {
                throw new ArgumentNullException("gridColumn");
            }
            if (gridColumn.Grid != null)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_ColumnAlreadyBelongsToGrid"));
            }
            if ((!this.InInitialization && (gridColumn.SortMode == GridColumnSortMode.Automatic)) && ((this.SelectionMode == GridSelectionMode.FullColumnSelect) || (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("GridColumn_SortModeAndSelectionModeClash", new object[] { GridColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
            }
            if (gridColumn.Visible)
            {
                if (!this.ColumnHeadersVisible && ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.ColumnHeader) || ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.ColumnHeader))))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoSizedColumn"));
                }
                if (gridColumn.Frozen && ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.Fill) || ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.Fill))))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoFillColumn"));
                }
                this.gridState2[0x4000000] = true;
            }
            float num = this.Columns.GetColumnsFillWeight(GridElementStates.None) + gridColumn.FillWeight;
            if (num > 65535f)
            {
                object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_WeightSumCannotExceedLongMaxValue", args));
            }
            this.CorrectColumnFrozenState(gridColumn, this.Columns.Count);
            if (this.Rows.Count > 0)
            {
                if (gridColumn.CellType == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddUntypedColumn"));
                }
                if ((gridColumn.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                {
                    GridRow row1 = this.Rows[this.newRowIndex];
                }
                int num2 = this.Columns.Count + 1;
                try
                {
                    for (int i = 0; i < this.Rows.Count; i++)
                    {
                        GridRow row = this.Rows.SharedRow(i);
                        if (row.Cells.Count < num2)
                        {
                            GridCell gridCell = (GridCell) gridColumn.CellTemplate.Clone();
                            row.Cells.AddInternal(gridCell);
                            if (i == this.newRowIndex)
                            {
                                gridCell.SetValueInternal(i, gridCell.DefaultNewRowValue);
                            }
                            gridCell.GridInternal = this;
                            gridCell.OwningRowInternal = row;
                            gridCell.OwningColumnInternal = gridColumn;
                        }
                    }
                }
                catch
                {
                    for (int j = 0; j < this.Rows.Count; j++)
                    {
                        GridRow row2 = this.Rows.SharedRow(j);
                        if (row2.Cells.Count != num2)
                        {
                            break;
                        }
                        row2.Cells.RemoveAtInternal(num2 - 1);
                    }
                    throw;
                }
            }
        }

        internal void OnAddingColumns(GridColumn[] gridColumns)
        {
            float columnsFillWeight = this.Columns.GetColumnsFillWeight(GridElementStates.None);
            foreach (GridColumn column in gridColumns)
            {
                if (column == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_AtLeastOneColumnIsNull"));
                }
                if (column.Grid != null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_ColumnAlreadyBelongsToGrid"));
                }
                if ((this.Rows.Count > 0) && (column.CellType == null))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddUntypedColumn"));
                }
                if ((!this.InInitialization && (column.SortMode == GridColumnSortMode.Automatic)) && ((this.SelectionMode == GridSelectionMode.FullColumnSelect) || (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridColumn_SortModeAndSelectionModeClash", new object[] { GridColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
                }
                if (column.Visible)
                {
                    if (!this.ColumnHeadersVisible && ((column.AutoSizeMode == GridAutoSizeColumnMode.ColumnHeader) || ((column.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.ColumnHeader))))
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoSizedColumn"));
                    }
                    if (column.Frozen && ((column.AutoSizeMode == GridAutoSizeColumnMode.Fill) || ((column.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.Fill))))
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoFillColumn"));
                    }
                    this.gridState2[0x4000000] = true;
                }
                columnsFillWeight += column.FillWeight;
                if (columnsFillWeight > 65535f)
                {
                    object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_WeightSumCannotExceedLongMaxValue", args));
                }
            }
            int length = gridColumns.Length;
            for (int i = 0; i < (length - 1); i++)
            {
                for (int j = i + 1; j < length; j++)
                {
                    if (gridColumns[i] == gridColumns[j])
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddIdenticalColumns"));
                    }
                }
            }
            this.CorrectColumnFrozenStates(gridColumns);
            if (this.Rows.Count > 0)
            {
                foreach (GridColumn column2 in gridColumns)
                {
                    if ((column2.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                    {
                        GridRow row1 = this.Rows[this.newRowIndex];
                        break;
                    }
                }
                int count = this.Columns.Count;
                int num6 = 0;
                try
                {
                    foreach (GridColumn column3 in gridColumns)
                    {
                        num6++;
                        for (int k = 0; k < this.Rows.Count; k++)
                        {
                            GridRow row = this.Rows.SharedRow(k);
                            if (row.Cells.Count < (count + num6))
                            {
                                GridCell gridCell = (GridCell) column3.CellTemplate.Clone();
                                row.Cells.AddInternal(gridCell);
                                if (k == this.newRowIndex)
                                {
                                    gridCell.Value = gridCell.DefaultNewRowValue;
                                }
                                gridCell.GridInternal = this;
                                gridCell.OwningRowInternal = row;
                                gridCell.OwningColumnInternal = column3;
                            }
                        }
                    }
                }
                catch
                {
                    for (int m = 0; m < this.Rows.Count; m++)
                    {
                        GridRow row2 = this.Rows.SharedRow(m);
                        while (row2.Cells.Count > count)
                        {
                            row2.Cells.RemoveAtInternal(row2.Cells.Count - 1);
                        }
                    }
                    throw;
                }
            }
        }

        internal void OnAddingRow(GridRow gridRow, GridElementStates rowState, bool checkFrozenState)
        {
            if (gridRow == null)
            {
                throw new ArgumentNullException("gridRow");
            }
            if (checkFrozenState)
            {
                this.CorrectRowFrozenState(gridRow, rowState, this.Rows.Count);
            }
            if ((this.ReadOnly && (gridRow.Grid == null)) && gridRow.ReadOnly)
            {
                gridRow.ReadOnly = false;
            }
            int num = 0;
            foreach (GridColumn column in this.Columns)
            {
                GridCell cell = gridRow.Cells[num];
                if ((this.ReadOnly || column.ReadOnly) && cell.StateIncludes(GridElementStates.ReadOnly))
                {
                    cell.ReadOnlyInternal = false;
                }
                num++;
            }
        }

        internal void OnAddingRows(GridRow[] gridRows, bool checkFrozenStates)
        {
            foreach (GridRow row in gridRows)
            {
                if (row == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_AtLeastOneRowIsNull"));
                }
                if (row.Grid != null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_RowAlreadyBelongsToGrid"));
                }
                if (row.Selected)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridRowCollection_CannotAddOrInsertSelectedRow"));
                }
                if (row.Cells.Count > this.Columns.Count)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridRowCollection_TooManyCells"));
                }
            }
            int length = gridRows.Length;
            for (int i = 0; i < (length - 1); i++)
            {
                for (int j = i + 1; j < length; j++)
                {
                    if (gridRows[i] == gridRows[j])
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddIdenticalRows"));
                    }
                }
            }
            if (checkFrozenStates)
            {
                this.CorrectRowFrozenStates(gridRows, this.Rows.Count);
            }
            foreach (GridRow row2 in gridRows)
            {
                this.CompleteCellsCollection(row2);
                this.OnAddingRow(row2, row2.State, false);
            }
        }

        internal void OnAdvancedBorderStyleChanged(GridAdvancedBorderStyle dgvabs)
        {
            if (!this.gridOper[0x10000])
            {
                if (dgvabs == this.advancedCellBorderStyle)
                {
                    this.OnCellBorderStyleChanged(EventArgs.Empty);
                }
                else if (dgvabs == this.advancedColumnHeadersBorderStyle)
                {
                    this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
                }
                else if (dgvabs == this.advancedRowHeadersBorderStyle)
                {
                    this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AllowUserToAddRowsChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAllowUserToAddRowsChanged(EventArgs e)
        {
            this.PushAllowUserToAddRows();
            EventHandler handler = base.Events[EVENT_gridALLOWUSERTOADDROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AllowUserToDeleteRowsChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridALLOWUSERTODELETEROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AllowUserToOrderColumnsChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridALLOWUSERTOORDERCOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AllowUserToResizeColumnsChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridALLOWUSERTORESIZECOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AllowUserToResizeRowsChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridALLOWUSERTORESIZEROWSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AlternatingRowsDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
        {
            GridCellStyleChangedEventArgs args = e as GridCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                this.InvalidateData();
            }
            else
            {
                this.OnRowsGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_gridALTERNATINGROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AutoGenerateColumnsChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnAutoGenerateColumnsChanged(EventArgs e)
        {
            if (this.AutoGenerateColumns && (this.DataSource != null))
            {
                this.RefreshColumnsAndRows();
            }
            EventHandler handler = base.Events[EVENT_gridAUTOGENERATECOLUMNSCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AutoSizeColumnModeChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridAutoSizeColumnModeEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.InvalidOperationException">The value of the <see cref="P:MControl.GridView.GridAutoSizeColumnModeEventArgs.Column"></see> property of e is null.</exception>
        protected virtual void OnAutoSizeColumnModeChanged(GridAutoSizeColumnModeEventArgs e)
        {
            GridColumn column = e.Column;
            if (e.Column == null)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("InvalidNullArgument", new object[] { "e.Column" }));
            }
            GridAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
            GridAutoSizeColumnMode previousMode = e.PreviousMode;
            bool flag = ((previousMode != GridAutoSizeColumnMode.Fill) && (previousMode != GridAutoSizeColumnMode.None)) && (previousMode != GridAutoSizeColumnMode.NotSet);
            if ((inheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) || (previousMode == GridAutoSizeColumnMode.Fill))
            {
                this.gridState2[0x4000000] = true;
            }
            bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
            switch (inheritedAutoSizeMode)
            {
                case GridAutoSizeColumnMode.None:
                    if ((column.Thickness != column.CachedThickness) && flag)
                    {
                        column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                    }
                    break;

                case GridAutoSizeColumnMode.Fill:
                    break;

                default:
                    if (!flag)
                    {
                        column.CachedThickness = column.Thickness;
                    }
                    this.AutoResizeColumnInternal(column.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, fixedHeight);
                    break;
            }
            this.PerformLayoutPrivate(false, true, true, false);
            if (!fixedHeight)
            {
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                }
                if ((inheritedAutoSizeMode != GridAutoSizeColumnMode.None) && (inheritedAutoSizeMode != GridAutoSizeColumnMode.Fill))
                {
                    this.AutoResizeColumnInternal(column.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
            GridAutoSizeColumnModeEventHandler handler = base.Events[EVENT_gridAUTOSIZECOLUMNMODECHANGED] as GridAutoSizeColumnModeEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnAutoSizeColumnModeChanged(GridColumn gridColumn, GridAutoSizeColumnMode previousInheritedMode)
        {
            GridAutoSizeColumnModeEventArgs e = new GridAutoSizeColumnModeEventArgs(gridColumn, previousInheritedMode);
            this.OnAutoSizeColumnModeChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AutoSizeColumnsModeChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridAutoSizeColumnsModeEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The number of entries in the array returned by the <see cref="P:MControl.GridView.GridAutoSizeColumnsModeEventArgs.PreviousModes"></see> property of e is not equal to the number of columns in the control.</exception>
        /// <exception cref="T:System.ArgumentNullException">The value of the <see cref="P:MControl.GridView.GridAutoSizeColumnsModeEventArgs.PreviousModes"></see> property of e is null.</exception>
        protected virtual void OnAutoSizeColumnsModeChanged(GridAutoSizeColumnsModeEventArgs e)
        {
            GridAutoSizeColumnMode[] previousModes = e.PreviousModes;
            if (previousModes == null)
            {
                throw new ArgumentNullException("e.PreviousModes");
            }
            if (previousModes.Length != this.Columns.Count)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_PreviousModesHasWrongLength"));
            }
            foreach (GridColumn column in this.Columns)
            {
                bool flag;
                if (column.Visible)
                {
                    GridAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
                    GridAutoSizeColumnMode mode2 = previousModes[column.Index];
                    flag = ((mode2 != GridAutoSizeColumnMode.Fill) && (mode2 != GridAutoSizeColumnMode.None)) && (mode2 != GridAutoSizeColumnMode.NotSet);
                    if ((inheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) || (mode2 == GridAutoSizeColumnMode.Fill))
                    {
                        this.gridState2[0x4000000] = true;
                    }
                    switch (inheritedAutoSizeMode)
                    {
                        case GridAutoSizeColumnMode.None:
                            goto Label_00D3;

                        case GridAutoSizeColumnMode.Fill:
                        {
                            continue;
                        }
                    }
                    if (!flag)
                    {
                        column.CachedThickness = column.Thickness;
                    }
                    this.AutoResizeColumnInternal(column.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None);
                }
                continue;
            Label_00D3:
                if ((column.Thickness != column.CachedThickness) && flag)
                {
                    column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                }
            }
            this.PerformLayoutPrivate(false, true, true, false);
            if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
            {
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                foreach (GridColumn column2 in this.Columns)
                {
                    GridAutoSizeColumnMode mode3 = column2.InheritedAutoSizeMode;
                    if ((mode3 != GridAutoSizeColumnMode.None) && (mode3 != GridAutoSizeColumnMode.Fill))
                    {
                        this.AutoResizeColumnInternal(column2.Index, (GridAutoSizeColumnCriteriaInternal) mode3, true);
                    }
                }
            }
            GridAutoSizeColumnsModeEventHandler handler = base.Events[EVENT_gridAUTOSIZECOLUMNSMODECHANGED] as GridAutoSizeColumnsModeEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.AutoSizeRowsModeChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridAutoSizeModeEventArgs"></see> that contains the event data. </param>
        protected virtual void OnAutoSizeRowsModeChanged(GridAutoSizeModeEventArgs e)
        {
            if (this.autoSizeRowsMode == GridAutoSizeRowsMode.None)
            {
                this.RestoreRowsCachedThickness();
            }
            else
            {
                if (!e.PreviousModeAutoSized)
                {
                    for (int i = this.Rows.GetFirstRow(GridElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, GridElementStates.Visible))
                    {
                        int height = this.Rows.SharedRow(i).GetHeight(i);
                        this.Rows.SharedRow(i).CachedThickness = height;
                    }
                }
                this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
            }
            GridAutoSizeModeEventHandler handler = base.Events[EVENT_gridAUTOSIZEROWSMODECHANGED] as GridAutoSizeModeEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.BackgroundColorChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnBackgroundColorChanged(EventArgs e)
        {
            this.InvalidateInside();
            EventHandler handler = base.Events[EVENT_gridBACKGROUNDCOLORCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnBandContextMenuStripChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnContextMenuStripChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowContextMenuStripChanged(args2);
            }
        }

        internal void OnBandDefaultCellStyleChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnDefaultCellStyleChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowDefaultCellStyleChanged(args2);
            }
        }

        internal void OnBandDividerThicknessChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnDividerWidthChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowDividerHeightChanged(args2);
            }
        }

        internal void OnBandHeaderCellChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnHeaderCellChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowHeaderCellChanged(args2);
            }
        }

        internal void OnBandMinimumThicknessChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnMinimumWidthChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowMinimumHeightChanged(args2);
            }
        }

        internal void OnBandThicknessChanged(GridBand gridBand)
        {
            GridColumn gridColumn = gridBand as GridColumn;
            if (gridColumn != null)
            {
                GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
                this.OnColumnWidthChanged(e);
            }
            else
            {
                GridRowEventArgs args2 = new GridRowEventArgs((GridRow) gridBand);
                this.OnRowHeightChanged(args2);
            }
        }

        internal void OnBandThicknessChanging()
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAlterAutoFillColumnParameter"));
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnBindingContextChanged(EventArgs e)
        {
            if (!this.gridState2[0x1000000])
            {
                this.gridState2[0x1000000] = true;
                try
                {
                    if (this.dataConnection != null)
                    {
                        this.CurrentCell = null;
                        try
                        {
                            this.dataConnection.SetDataConnection(this.DataSource, this.DataMember);
                        }
                        catch (ArgumentException)
                        {
                            if (!base.DesignMode)
                            {
                                throw;
                            }
                            this.DataMember = string.Empty;
                            this.RefreshColumnsAndRows();
                            return;
                        }
                        this.RefreshColumnsAndRows();
                        base.OnBindingContextChanged(e);
                        if (this.dataConnection.CurrencyManager != null)
                        {
                            this.OnDataBindingComplete(ListChangedType.Reset);
                        }
                    }
                    else
                    {
                        base.OnBindingContextChanged(e);
                    }
                }
                finally
                {
                    this.gridState2[0x1000000] = false;
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.BorderStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnBorderStyleChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CancelRowEdit"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs"></see> that contains the event data. </param>
        protected virtual void OnCancelRowEdit(QuestionEventArgs e)
        {
            QuestionEventHandler handler = base.Events[EVENT_gridCANCELROWEDIT] as QuestionEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
                this.CorrectFocus(true);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellBeginEdit"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellCancelEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellCancelEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellCancelEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellBeginEdit(GridCellCancelEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellCancelEventHandler handler = base.Events[EVENT_gridCELLBEGINEDIT] as GridCellCancelEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellBorderStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnCellBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_gridCELLBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellClick(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnClickInternal(e);
            }
            else
            {
                cellInternal.OnClickInternal(e);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLCLICK] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellClickInternal(GridCellEventArgs e)
        {
            this.OnCellClick(e);
        }

        internal void OnCellCommonChange(int columnIndex, int rowIndex)
        {
            if (columnIndex == -1)
            {
                this.OnRowHeaderGlobalAutoSize(rowIndex);
            }
            else if (rowIndex == -1)
            {
                this.OnColumnHeaderGlobalAutoSize(columnIndex);
            }
            else
            {
                this.InvalidateCellPrivate(columnIndex, rowIndex);
                bool flag = false;
                if (rowIndex != -1)
                {
                    flag = (this.Rows.GetRowState(rowIndex) & GridElementStates.Displayed) != GridElementStates.None;
                }
                GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                bool flag2 = (inheritedAutoSizeMode & GridAutoSizeColumnCriteriaInternal.AllRows) != GridAutoSizeColumnCriteriaInternal.NotSet;
                if (flag)
                {
                    flag2 |= (inheritedAutoSizeMode & GridAutoSizeColumnCriteriaInternal.DisplayedRows) != GridAutoSizeColumnCriteriaInternal.NotSet;
                }
                bool flag3 = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None;
                if (flag3)
                {
                    this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), !flag2, true);
                }
                if (flag2)
                {
                    this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                    if (flag3)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellContentClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains information regarding the cell whose content was clicked.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellContentClick(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ContentClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentClickInternal(e);
            }
            else
            {
                cellInternal.OnContentClickInternal(e);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLCONTENTCLICK] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellContentClickInternal(GridCellEventArgs e)
        {
            this.OnCellContentClick(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellContentDoubleClick"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellContentDoubleClick(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.ContentDoubleClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnContentDoubleClickInternal(e);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLCONTENTDOUBLECLICK] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellContentDoubleClickInternal(GridCellEventArgs e)
        {
            this.OnCellContentDoubleClick(e);
        }

        internal void OnCellContextMenuStripChanged(GridCell gridCell)
        {
            GridCellEventArgs e = new GridCellEventArgs(gridCell);
            this.OnCellContextMenuStripChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellContextMenuStripChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellContextMenuStripChanged(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLCONTEXTMENUSTRIPCHANGED] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellContextMenuStripNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellContextMenuStripNeededEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellContextMenuStripNeededEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellContextMenuStripNeededEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellContextMenuStripNeeded(GridCellContextMenuStripNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellContextMenuStripNeededEventHandler handler = base.Events[EVENT_gridCELLCONTEXTMENUSTRIPNEEDED] as GridCellContextMenuStripNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip)
        {
            GridCellContextMenuStripNeededEventArgs e = new GridCellContextMenuStripNeededEventArgs(columnIndex, rowIndex, contextMenuStrip);
            this.OnCellContextMenuStripNeeded(e);
            return e.ContextMenuStrip;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellDoubleClick"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellDoubleClick(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.DoubleClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnDoubleClickInternal(e);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLDOUBLECLICK] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellEndEdit"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellEndEdit(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLENDEDIT] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellEnter"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellEnter(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridCELLENTER] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellEnter(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            this.OnCellEnter(new GridCellEventArgs(columnIndex, rowIndex));
            if (gridCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    gridCell = null;
                }
                else
                {
                    gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        internal void OnCellErrorTextChanged(GridCell gridCell)
        {
            GridCellEventArgs e = new GridCellEventArgs(gridCell);
            this.OnCellErrorTextChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellErrorTextChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is less than -1 or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is less than -1 or greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellErrorTextChanged(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.UpdateCellErrorText(e.ColumnIndex, e.RowIndex);
            GridCellEventHandler handler = base.Events[EVENT_gridCELLERRORTEXTCHANGED] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellErrorTextNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellErrorTextNeededEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellErrorTextNeededEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellErrorTextNeededEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellErrorTextNeeded(GridCellErrorTextNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellErrorTextNeededEventHandler handler = base.Events[EVENT_gridCELLERRORTEXTNEEDED] as GridCellErrorTextNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText)
        {
            GridCellErrorTextNeededEventArgs e = new GridCellErrorTextNeededEventArgs(columnIndex, rowIndex, errorText);
            this.OnCellErrorTextNeeded(e);
            return e.ErrorText;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellFormatting"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellFormattingEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellFormattingEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellFormattingEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellFormatting(GridCellFormattingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellFormattingEventHandler handler = base.Events[EVENT_gridCELLFORMATTING] as GridCellFormattingEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal GridCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, System.Type formattedValueType, GridCellStyle cellStyle)
        {
            GridCellFormattingEventArgs e = new GridCellFormattingEventArgs(columnIndex, rowIndex, val, formattedValueType, cellStyle);
            this.OnCellFormatting(e);
            return e;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellLeave"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellLeave(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridCELLLEAVE] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellLeave(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            this.OnCellLeave(new GridCellEventArgs(columnIndex, rowIndex));
            if (gridCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    gridCell = null;
                }
                else
                {
                    gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseClick(GridCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseClickInternal(e);
            }
            else
            {
                cellInternal.OnMouseClickInternal(e);
            }
            this.gridState2[0x800000] = false;
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCELLMOUSECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseDoubleClick"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseDoubleClick(GridCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseDoubleClickUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDoubleClickInternal(e);
            }
            else
            {
                cellInternal.OnMouseDoubleClickInternal(e);
            }
            this.gridState2[0x800000] = true;
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCELLMOUSEDOUBLECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseDown"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        protected virtual void OnCellMouseDown(GridCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            Keys modifierKeys = Control.ModifierKeys;
            bool isControlDown = ((modifierKeys & Keys.Control) == Keys.Control) && ((modifierKeys & Keys.Alt) == Keys.None);
            bool isShiftDown = (modifierKeys & Keys.Shift) == Keys.Shift;
            bool flag3 = (modifierKeys & Keys.Alt) == Keys.Alt;
            Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            if (!this.gridState2[0x8000000] && (e.Button == MouseButtons.Left))
            {
                switch (hti.typeInternal)
                {
                    case GridHitTestTypeInternal.ColumnResizeLeft:
                    case GridHitTestTypeInternal.ColumnResizeRight:
                    case GridHitTestTypeInternal.RowResizeTop:
                    case GridHitTestTypeInternal.RowResizeBottom:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeLeft:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeRight:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeTop:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeBottom:
                    case GridHitTestTypeInternal.ColumnHeadersResizeBottom:
                    case GridHitTestTypeInternal.ColumnHeadersResizeTop:
                    case GridHitTestTypeInternal.RowHeadersResizeRight:
                    case GridHitTestTypeInternal.RowHeadersResizeLeft:
                        this.gridOper[0x800000] = e.Clicks == 1;
                        break;
                }
            }
            try
            {
                if ((e.RowIndex >= 0) && cellInternal.MouseDownUnsharesRowInternal(e))
                {
                    GridRow row1 = this.Rows[e.RowIndex];
                    this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDownInternal(e);
                }
                else
                {
                    cellInternal.OnMouseDownInternal(e);
                }
                GridCellMouseEventHandler handler = base.Events[EVENT_gridCELLMOUSEDOWN] as GridCellMouseEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                }
                if (this.gridState2[0x8000000] || (e.Button != MouseButtons.Left))
                {
                    return;
                }
                switch (hti.typeInternal)
                {
                    case GridHitTestTypeInternal.Cell:
                        this.OnCellMouseDown(hti, isShiftDown, isControlDown);
                        goto Label_0377;

                    case GridHitTestTypeInternal.ColumnHeader:
                    case GridHitTestTypeInternal.FirstColumnHeaderLeft:
                    case GridHitTestTypeInternal.ColumnHeaderLeft:
                    case GridHitTestTypeInternal.ColumnHeaderRight:
                        if ((!flag3 || !this.AllowUserToOrderColumns) || ((this.SelectionMode != GridSelectionMode.FullColumnSelect) && (this.SelectionMode != GridSelectionMode.ColumnHeaderSelect)))
                        {
                            break;
                        }
                        this.BeginColumnRelocation(point.X, hti.col);
                        goto Label_0377;

                    case GridHitTestTypeInternal.RowHeader:
                        this.OnRowHeaderMouseDown(hti, isShiftDown, isControlDown);
                        goto Label_0377;

                    case GridHitTestTypeInternal.ColumnResizeLeft:
                    case GridHitTestTypeInternal.ColumnResizeRight:
                    {
                        int index = (hti.typeInternal == GridHitTestTypeInternal.ColumnResizeRight) ? hti.col : hti.adjacentCol;
                        if (e.Clicks == 1)
                        {
                            this.BeginColumnResize(point.X, hti.mouseBarOffset, index);
                        }
                        goto Label_0377;
                    }
                    case GridHitTestTypeInternal.RowResizeTop:
                    case GridHitTestTypeInternal.RowResizeBottom:
                    {
                        int num2 = (hti.typeInternal == GridHitTestTypeInternal.RowResizeBottom) ? hti.row : hti.adjacentRow;
                        if (e.Clicks == 1)
                        {
                            this.BeginRowResize(point.Y, hti.mouseBarOffset, num2);
                        }
                        goto Label_0377;
                    }
                    case GridHitTestTypeInternal.TopLeftHeader:
                        this.OnTopLeftHeaderMouseDown();
                        goto Label_0377;

                    case GridHitTestTypeInternal.TopLeftHeaderResizeLeft:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeRight:
                    case GridHitTestTypeInternal.RowHeadersResizeRight:
                    case GridHitTestTypeInternal.RowHeadersResizeLeft:
                        if (e.Clicks == 1)
                        {
                            this.BeginRowHeadersResize(point.X, hti.mouseBarOffset);
                        }
                        goto Label_0377;

                    case GridHitTestTypeInternal.TopLeftHeaderResizeTop:
                    case GridHitTestTypeInternal.TopLeftHeaderResizeBottom:
                    case GridHitTestTypeInternal.ColumnHeadersResizeBottom:
                    case GridHitTestTypeInternal.ColumnHeadersResizeTop:
                        if (e.Clicks == 1)
                        {
                            this.BeginColumnHeadersResize(point.Y, hti.mouseBarOffset);
                        }
                        goto Label_0377;

                    default:
                        goto Label_0377;
                }
                this.OnColumnHeaderMouseDown(hti, isShiftDown, isControlDown);
            Label_0377:
                if (this.ptCurrentCell.X == -1)
                {
                    this.MakeFirstDisplayedCellCurrentCell(true);
                }
            }
            finally
            {
                this.gridOper[0x800000] = false;
            }
        }

        private void OnCellMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            if ((this.ptCurrentCell.X >= 0) && ((this.ptCurrentCell.X != hti.col) || (this.ptCurrentCell.Y != hti.row)))
            {
                Point ptCurrentCell = this.ptCurrentCell;
                if (!this.CommitEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, (this.ptCurrentCell.X != hti.col) || (this.ptCurrentCell.Y != hti.row), this.ptCurrentCell.Y != hti.row))
                {
                    return;
                }
                if (this.ptCurrentCell != ptCurrentCell)
                {
                    isShiftDown = isControlDown = false;
                }
            }
            if (hti.col >= this.Columns.Count)
            {
                GridColumn lastColumn = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
                if ((this.ptCurrentCell.X != -1) || (lastColumn == null))
                {
                    return;
                }
                hti.col = lastColumn.Index;
            }
            if (hti.row >= this.Rows.Count)
            {
                int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
                if ((this.ptCurrentCell.X != -1) || (lastRow == -1))
                {
                    return;
                }
                hti.row = lastRow;
            }
            bool flag = true;
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        if ((isControlDown && this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0279;
                        }
                        if ((!this.MultiSelect || !isControlDown) && (!this.MultiSelect || !isShiftDown))
                        {
                            this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                        }
                        if (!this.MultiSelect)
                        {
                            break;
                        }
                        if (this.gridOper[0x200])
                        {
                            this.gridOper[0x10] = true;
                        }
                        if (isShiftDown)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
                        }
                        else
                        {
                            this.SetSelectedCellCore(hti.col, hti.row, true);
                        }
                        goto Label_028C;

                    case GridSelectionMode.FullRowSelect:
                    {
                        if (isControlDown && ((this.Rows.GetRowState(hti.row) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0806;
                        }
                        bool flag5 = false;
                        this.trackRow = hti.row;
                        this.trackRowEdge = -1;
                        if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.Y > -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & GridElementStates.Selected) != GridElementStates.None)))
                        {
                            flag5 = true;
                        }
                        if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                        {
                            int num7 = 0;
                            bool flag6 = false;
                            if (this.selectedBandIndexes.Count > 8)
                            {
                                this.inBulkPaintCount++;
                                flag6 = true;
                            }
                            try
                            {
                                while (num7 < this.selectedBandIndexes.Count)
                                {
                                    if (this.selectedBandIndexes[num7] != hti.row)
                                    {
                                        this.SetSelectedRowCore(this.selectedBandIndexes[num7], false);
                                    }
                                    else
                                    {
                                        num7++;
                                    }
                                }
                            }
                            finally
                            {
                                if (flag6)
                                {
                                    this.ExitBulkPaint(-1, -1);
                                }
                            }
                        }
                        if (this.MultiSelect && this.gridOper[0x200])
                        {
                            this.gridOper[8] = true;
                        }
                        if (flag5)
                        {
                            if (hti.row >= this.ptAnchorCell.Y)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
                            }
                            else
                            {
                                this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
                            }
                        }
                        else if ((this.Rows.GetRowState(hti.row) & GridElementStates.Selected) == GridElementStates.None)
                        {
                            this.SetSelectedRowCore(hti.row, true);
                        }
                        goto Label_0813;
                    }
                    case GridSelectionMode.FullColumnSelect:
                    {
                        if (isControlDown && this.Columns[hti.col].Selected)
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_043F;
                        }
                        bool flag2 = false;
                        this.trackColumn = hti.col;
                        this.trackColumnEdge = -1;
                        if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.X > -1) && this.Columns[this.ptAnchorCell.X].Selected))
                        {
                            flag2 = true;
                        }
                        if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                        {
                            int num4 = 0;
                            bool flag3 = false;
                            if (this.selectedBandIndexes.Count > 8)
                            {
                                this.inBulkPaintCount++;
                                flag3 = true;
                            }
                            try
                            {
                                while (num4 < this.selectedBandIndexes.Count)
                                {
                                    if (this.selectedBandIndexes[num4] != hti.col)
                                    {
                                        this.SetSelectedColumnCore(this.selectedBandIndexes[num4], false);
                                    }
                                    else
                                    {
                                        num4++;
                                    }
                                }
                            }
                            finally
                            {
                                if (flag3)
                                {
                                    this.ExitBulkPaint(-1, -1);
                                }
                            }
                        }
                        if (this.MultiSelect && this.gridOper[0x200])
                        {
                            this.gridOper[4] = true;
                        }
                        if (flag2)
                        {
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
                            }
                            else
                            {
                                this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
                            }
                        }
                        else if (!this.selectedBandIndexes.Contains(hti.col))
                        {
                            this.SetSelectedColumnCore(hti.col, true);
                        }
                        goto Label_044C;
                    }
                    case GridSelectionMode.RowHeaderSelect:
                        if ((isControlDown && (((this.Rows.GetRowState(hti.row) & GridElementStates.Selected) != GridElementStates.None) || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row))) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_09D2;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_08D4;
                        }
                        if (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        else
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(hti.col, hti.row, true);
                        goto Label_0A24;

                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((isControlDown && (this.Columns[hti.col].Selected || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row))) && (!isShiftDown || !this.MultiSelect))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_060D;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_050F;
                        }
                        if (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        else
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(hti.col, hti.row, true);
                        goto Label_065F;

                    default:
                        return;
                }
                this.SetSelectedCellCore(hti.col, hti.row, true);
                goto Label_028C;
            Label_0279:
                this.SetSelectedCellCore(hti.col, hti.row, false);
            Label_028C:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_043F:
                this.SetSelectedColumnCore(hti.col, false);
            Label_044C:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_050F:
                if (!isControlDown && !isShiftDown)
                {
                    bool flag4 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag4 = true;
                    }
                    try
                    {
                        while (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                    }
                    finally
                    {
                        if (flag4)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.gridOper[0x200])
                {
                    this.gridOper[0x10] = true;
                }
                if (isShiftDown)
                {
                    int oldEdgeColumnIndex = this.ptCurrentCell.X;
                    int oldEdgeRowIndex = this.ptCurrentCell.Y;
                    if (this.ptAnchorCell.X == -1)
                    {
                        return;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, hti.col, this.ptAnchorCell.Y, ref oldEdgeRowIndex, hti.row);
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, true);
                }
                goto Label_065F;
            Label_060D:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(hti.col, hti.row, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, false);
                }
            Label_065F:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_0806:
                this.SetSelectedRowCore(hti.row, false);
            Label_0813:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
                return;
            Label_08D4:
                if (!isControlDown && !isShiftDown)
                {
                    bool flag7 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag7 = true;
                    }
                    try
                    {
                        while (this.selectedBandIndexes.Count > 0)
                        {
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        this.RemoveIndividuallySelectedCells(hti.col, hti.row);
                    }
                    finally
                    {
                        if (flag7)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.gridOper[0x200])
                {
                    this.gridOper[0x10] = true;
                }
                if (isShiftDown)
                {
                    int num8 = this.ptCurrentCell.X;
                    int num9 = this.ptCurrentCell.Y;
                    if (this.ptAnchorCell.X == -1)
                    {
                        return;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, hti.col, this.ptAnchorCell.Y, ref num9, hti.row);
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, true);
                }
                goto Label_0A24;
            Label_09D2:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(hti.col, hti.row, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(hti.col, hti.row, false);
                }
            Label_0A24:
                this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseEnter"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseEnter(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.ptMouseEnteredCell.X = e.ColumnIndex;
            this.ptMouseEnteredCell.Y = e.RowIndex;
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseEnterUnsharesRowInternal(e.RowIndex))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseEnterInternal(e.RowIndex);
            }
            else
            {
                cellInternal.OnMouseEnterInternal(e.RowIndex);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLMOUSEENTER] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseLeave"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseLeave(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.ptMouseEnteredCell.X = -2;
            this.ptMouseEnteredCell.Y = -2;
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseLeaveUnsharesRowInternal(e.RowIndex))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseLeaveInternal(e.RowIndex);
            }
            else
            {
                cellInternal.OnMouseLeaveInternal(e.RowIndex);
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLMOUSELEAVE] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseMove"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseMove(GridCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseMoveUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseMoveInternal(e);
            }
            else
            {
                cellInternal.OnMouseMoveInternal(e);
            }
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCELLMOUSEMOVE] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((((!this.gridState1[0x800] && !this.gridOper[1]) && (!this.gridOper[2] && !this.gridOper[0x20])) && ((!this.gridOper[0x80] && !this.gridOper[0x100]) && (this.AllowUserToOrderColumns && (this.SelectionMode != GridSelectionMode.FullColumnSelect)))) && ((((this.SelectionMode != GridSelectionMode.ColumnHeaderSelect) && (e.Button == MouseButtons.Left)) && ((this.ptMouseDownCell.Y == -1) && (this.ptMouseDownCell.X >= 0))) && (this.ptMouseDownCell.X < this.Columns.Count)))
            {
                Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
                switch (this.HitTest(point.X, point.Y).typeInternal)
                {
                    case GridHitTestTypeInternal.ColumnHeaderLeft:
                    case GridHitTestTypeInternal.ColumnHeaderRight:
                    case GridHitTestTypeInternal.ColumnHeader:
                    case GridHitTestTypeInternal.FirstColumnHeaderLeft:
                        if ((Math.Abs((int) (this.ptMouseDownGridCoord.X - point.X)) >= DragSize.Width) || (Math.Abs((int) (this.ptMouseDownGridCoord.Y - point.Y)) >= DragSize.Height))
                        {
                            this.BeginColumnRelocation(this.ptMouseDownGridCoord.X, this.ptMouseDownCell.X);
                        }
                        return;

                    default:
                        return;
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellMouseUp"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellMouseUp(GridCellMouseEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
            if ((e.RowIndex >= 0) && cellInternal.MouseUpUnsharesRowInternal(e))
            {
                GridRow row1 = this.Rows[e.RowIndex];
                this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseUpInternal(e);
            }
            else
            {
                cellInternal.OnMouseUpInternal(e);
            }
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCELLMOUSEUP] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellPainting"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellPaintingEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellPaintingEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellPaintingEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected internal virtual void OnCellPainting(GridCellPaintingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellPaintingEventHandler handler = base.Events[EVENT_gridCELLPAINTING] as GridCellPaintingEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellParsing"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellParsingEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellParsingEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellParsingEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellParsing(GridCellParsingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellParsingEventHandler handler = base.Events[EVENT_gridCELLPARSING] as GridCellParsingEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal GridCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, System.Type valueType, GridCellStyle cellStyle)
        {
            GridCellParsingEventArgs e = new GridCellParsingEventArgs(rowIndex, columnIndex, formattedValue, valueType, cellStyle);
            this.OnCellParsing(e);
            return e;
        }

        private void OnCellSelectMouseMove(HitTestInfo hti)
        {
            int x = this.ptCurrentCell.X;
            int y = this.ptCurrentCell.Y;
            if (((hti.col == this.ptCurrentCell.X) && (hti.row == this.ptCurrentCell.Y)) || this.CommitEditForOperation(hti.col, hti.row, true))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if ((this.ptAnchorCell.X != -1) && !this.IsInnerCellOutOfBounds(hti.col, hti.row))
                    {
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
                        if ((hti.col != this.ptCurrentCell.X) || (hti.row != this.ptCurrentCell.Y))
                        {
                            this.SetCurrentCellAddressCore(hti.col, hti.row, false, false, false);
                        }
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellStateChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellStateChangedEventArgs"></see> that contains the event data. </param>
        protected virtual void OnCellStateChanged(GridCellStateChangedEventArgs e)
        {
            GridCell gridCell = e.Cell;
            if ((e.StateChanged == GridElementStates.Selected) && (this.inBulkPaintCount == 0))
            {
                this.InvalidateCellPrivate(gridCell);
            }
            GridCellStateChangedEventHandler handler = base.Events[EVENT_gridCELLSTATECHANGED] as GridCellStateChangedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((((e.StateChanged == GridElementStates.ReadOnly) && (this.ptCurrentCell.X == gridCell.ColumnIndex)) && ((this.ptCurrentCell.Y == gridCell.RowIndex) && (gridCell.RowIndex > -1))) && !this.gridOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((!gridCell.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X)) && !this.IsCurrentCellInEditMode) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnCellStyleChanged(GridCell gridCell)
        {
            GridCellEventArgs e = new GridCellEventArgs(gridCell);
            this.OnCellStyleChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellStyleChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellStyleChanged(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
            GridCellEventHandler handler = base.Events[EVENT_gridCELLSTYLECHANGED] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellStyleContentChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellStyleContentChangedEventArgs"></see> that contains the event data. </param>
        protected virtual void OnCellStyleContentChanged(GridCellStyleContentChangedEventArgs e)
        {
            bool flag = false;
            if (((e.CellStyleScope & GridCellStyleScopes.Cell) == GridCellStyleScopes.Cell) && ((e.CellStyleScope & GridCellStyleScopes.Grid) == GridCellStyleScopes.None))
            {
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    this.OnGlobalAutoSize();
                }
                else
                {
                    base.Invalidate();
                }
            }
            if ((e.CellStyleScope & GridCellStyleScopes.Column) == GridCellStyleScopes.Column)
            {
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    this.OnColumnsGlobalAutoSize();
                }
                else
                {
                    this.InvalidateData();
                }
            }
            if ((((e.CellStyleScope & GridCellStyleScopes.Row) == GridCellStyleScopes.Row) && ((e.CellStyleScope & GridCellStyleScopes.Rows) == GridCellStyleScopes.None)) && ((e.CellStyleScope & GridCellStyleScopes.AlternatingRows) == GridCellStyleScopes.None))
            {
                this.InvalidateData();
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = true;
                    if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                    }
                    this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.DisplayedRows | GridAutoSizeColumnCriteriaInternal.AllRows, true);
                    if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                }
            }
            if ((e.CellStyleScope & GridCellStyleScopes.Grid) == GridCellStyleScopes.Grid)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & GridCellStyleScopes.ColumnHeaders) == GridCellStyleScopes.ColumnHeaders)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & GridCellStyleScopes.RowHeaders) == GridCellStyleScopes.RowHeaders)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & GridCellStyleScopes.Rows) == GridCellStyleScopes.Rows)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if ((e.CellStyleScope & GridCellStyleScopes.AlternatingRows) == GridCellStyleScopes.AlternatingRows)
            {
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
                if (e.ChangeAffectsPreferredSize)
                {
                    flag = false;
                }
                this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
            if (flag && (this.editingControl != null))
            {
                this.PositionEditingControl(true, true, false);
            }
            GridCellStyleContentChangedEventHandler handler = base.Events[EVENT_gridCELLSTYLECONTENTCHANGED] as GridCellStyleContentChangedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellStyleContentChanged(GridCellStyle gridCellStyle, GridCellStyle.GridCellStylePropertyInternal property)
        {
            switch (property)
            {
                case GridCellStyle.GridCellStylePropertyInternal.Font:
                    if (((gridCellStyle.Scope & GridCellStyleScopes.Grid) != GridCellStyleScopes.None) && this.gridState1[0x2000000])
                    {
                        this.gridState1[0x2000000] = false;
                    }
                    if (((gridCellStyle.Scope & GridCellStyleScopes.ColumnHeaders) != GridCellStyleScopes.None) && this.gridState1[0x4000000])
                    {
                        this.gridState1[0x4000000] = false;
                    }
                    if (((gridCellStyle.Scope & GridCellStyleScopes.RowHeaders) != GridCellStyleScopes.None) && this.gridState1[0x8000000])
                    {
                        this.gridState1[0x8000000] = false;
                    }
                    break;

                case GridCellStyle.GridCellStylePropertyInternal.ForeColor:
                    if (((gridCellStyle.Scope & GridCellStyleScopes.Grid) != GridCellStyleScopes.None) && this.gridState1[0x400])
                    {
                        this.gridState1[0x400] = false;
                    }
                    break;
            }
            GridCellStyleContentChangedEventArgs e = new GridCellStyleContentChangedEventArgs(gridCellStyle, (property != GridCellStyle.GridCellStylePropertyInternal.Color) && (property != GridCellStyle.GridCellStylePropertyInternal.ForeColor));
            this.OnCellStyleContentChanged(e);
        }

        internal void OnCellToolTipTextChanged(GridCell gridCell)
        {
            GridCellEventArgs e = new GridCellEventArgs(gridCell);
            this.OnCellToolTipTextChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellToolTipTextChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains information about the cell.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellToolTipTextChanged(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellEventHandler handler = base.Events[EVENT_gridCELLTOOLTIPTEXTCHANGED] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellToolTipTextNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellToolTipTextNeededEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellToolTipTextNeededEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellToolTipTextNeededEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellToolTipTextNeeded(GridCellToolTipTextNeededEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellToolTipTextNeededEventHandler handler = base.Events[EVENT_gridCELLTOOLTIPTEXTNEEDED] as GridCellToolTipTextNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText)
        {
            GridCellToolTipTextNeededEventArgs e = new GridCellToolTipTextNeededEventArgs(columnIndex, rowIndex, toolTipText);
            this.OnCellToolTipTextNeeded(e);
            return e.ToolTipText;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellValidated"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellValidated(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridCELLVALIDATED] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        internal void OnCellValidated(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            this.OnCellValidated(new GridCellEventArgs(columnIndex, rowIndex));
            if (gridCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    gridCell = null;
                }
                else
                {
                    gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellValidating"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellValidatingEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellValidatingEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellValidatingEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellValidating(GridCellValidatingEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            try
            {
                this.noDimensionChangeCount++;
                this.gridOper[0x8000] = true;
                GridCellValidatingEventHandler handler = base.Events[EVENT_gridCELLVALIDATING] as GridCellValidatingEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.gridOper[0x8000] = false;
            }
        }

        internal bool OnCellValidating(ref GridCell gridCell, int columnIndex, int rowIndex, GridDataErrorContexts context)
        {
            GridCell cell = (gridCell == null) ? this.CurrentCellInternal : gridCell;
            GridCellStyle gridCellStyle = cell.GetInheritedStyle(null, rowIndex, false);
            object valueInternal = cell.GetValueInternal(rowIndex);
            object formattedValue = cell.GetEditedFormattedValue(valueInternal, rowIndex, ref gridCellStyle, context);
            GridCellValidatingEventArgs e = new GridCellValidatingEventArgs(columnIndex, rowIndex, formattedValue);
            this.OnCellValidating(e);
            if (gridCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    gridCell = null;
                }
                else
                {
                    gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
            return e.Cancel;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellValueChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellEventArgs.ColumnIndex"></see> property of e is greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellEventArgs.RowIndex"></see> property of e is greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellValueChanged(GridCellEventArgs e)
        {
            if (e.ColumnIndex >= this.Columns.Count)
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if (e.RowIndex >= this.Rows.Count)
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
            GridCellEventHandler handler = base.Events[EVENT_gridCELLVALUECHANGED] as GridCellEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellValueChangedInternal(GridCellEventArgs e)
        {
            this.OnCellValueChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellValueNeeded"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellValueEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellValueEventArgs.ColumnIndex"></see> property of e is less than zero or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellValueEventArgs.RowIndex"></see> property of e is less than zero or greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellValueNeeded(GridCellValueEventArgs e)
        {
            if ((e.ColumnIndex < 0) || (e.ColumnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if ((e.RowIndex < 0) || (e.RowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellValueEventHandler handler = base.Events[EVENT_gridCELLVALUENEEDED] as GridCellValueEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal object OnCellValueNeeded(int columnIndex, int rowIndex)
        {
            GridCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
            cellValueEventArgs.SetProperties(columnIndex, rowIndex, null);
            this.OnCellValueNeeded(cellValueEventArgs);
            return cellValueEventArgs.Value;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CellValuePushed"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellValueEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellValueEventArgs.ColumnIndex"></see> property of e is less than zero or greater than the number of columns in the control minus one.-or-The value of the <see cref="P:MControl.GridView.GridCellValueEventArgs.RowIndex"></see> property of e is less than zero or greater than the number of rows in the control minus one.</exception>
        protected virtual void OnCellValuePushed(GridCellValueEventArgs e)
        {
            if ((e.ColumnIndex < 0) || (e.ColumnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("e.ColumnIndex");
            }
            if ((e.RowIndex < 0) || (e.RowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("e.RowIndex");
            }
            GridCellValueEventHandler handler = base.Events[EVENT_gridCELLVALUEPUSHED] as GridCellValueEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnCellValuePushed(int columnIndex, int rowIndex, object value)
        {
            GridCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
            cellValueEventArgs.SetProperties(columnIndex, rowIndex, value);
            this.OnCellValuePushed(cellValueEventArgs);
        }

        internal void OnClearedRows()
        {
            foreach (GridRow row in this.lstRows)
            {
                if (row.Displayed)
                {
                    row.DisplayedInternal = false;
                    GridRowStateChangedEventArgs e = new GridRowStateChangedEventArgs(row, GridElementStates.Displayed);
                    this.OnRowStateChanged(-1, e);
                }
            }
            this.lstRows.Clear();
        }

        internal void OnClearingColumns()
        {
            this.CurrentCell = null;
            this.Rows.ClearInternal(false);
            this.sortedColumn = null;
            this.sortOrder = System.Windows.Forms.SortOrder.None;
        }

        internal void OnClearingRows()
        {
            this.lstRows.Clear();
            int num = this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
            if (num > 0)
            {
                this.lstRows.Capacity = num;
                int firstRow = this.Rows.GetFirstRow(GridElementStates.Displayed);
                while ((num > 0) && (firstRow != -1))
                {
                    this.lstRows.Add(this.Rows[firstRow]);
                    num--;
                    if (num > 0)
                    {
                        firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Displayed);
                    }
                }
            }
            this.CurrentCell = null;
            this.newRowIndex = -1;
            this.gridState2[0x40000] = (this.selectedBandIndexes.Count > 0) || (this.individualSelectedCells.Count > 0);
            this.selectedBandIndexes.Clear();
            if (this.selectedBandSnapshotIndexes != null)
            {
                this.selectedBandSnapshotIndexes.Clear();
            }
            this.individualSelectedCells.Clear();
            this.individualReadOnlyCells.Clear();
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnAdded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnAdded(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNADDED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnCollectionChanged_PostNotification(GridColumn gridColumn)
        {
            if ((this.Columns.Count != 0) && (this.Rows.Count == 0))
            {
                if ((this.DataSource != null) && !this.gridOper[0x400])
                {
                    this.RefreshRows(true);
                }
                else if (this.AllowUserToAddRowsInternal)
                {
                    this.AddNewRow(false);
                }
            }
            if (this.AutoSize && ((gridColumn == null) || gridColumn.Visible))
            {
                LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
            }
        }

        internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea)
        {
            if ((this.DataSource != null) && !this.gridOper[0x400])
            {
                if (ccea.Action == CollectionChangeAction.Add)
                {
                    GridColumn element = (GridColumn) ccea.Element;
                    if (element.DataPropertyName.Length != 0)
                    {
                        this.MapGridColumnToDataBoundField(element);
                    }
                }
                else if (ccea.Action == CollectionChangeAction.Refresh)
                {
                    for (int i = 0; i < this.Columns.Count; i++)
                    {
                        if (this.Columns[i].DataPropertyName.Length != 0)
                        {
                            this.MapGridColumnToDataBoundField(this.Columns[i]);
                        }
                    }
                }
            }
            this.ResetUIState(false, false);
        }

        internal void OnColumnCommonChange(int columnIndex)
        {
            this.OnColumnGlobalAutoSize(columnIndex);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnContextMenuStripChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnContextMenuStripChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNCONTEXTMENUSTRIPCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDataPropertyNameChanged(GridColumn gridColumn)
        {
            this.OnColumnDataPropertyNameChanged(new GridColumnEventArgs(gridColumn));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnDataPropertyNameChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnDataPropertyNameChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            if (((this.DataSource != null) && (e.Column.DataPropertyName.Length != 0)) && !this.gridOper[0x400])
            {
                this.MapGridColumnToDataBoundField(e.Column);
            }
            else if (((this.DataSource != null) && (e.Column.DataPropertyName.Length == 0)) && e.Column.IsDataBound)
            {
                e.Column.IsDataBoundInternal = false;
                e.Column.BoundColumnIndex = -1;
                e.Column.BoundColumnConverter = null;
                this.InvalidateColumnInternal(e.Column.Index);
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNDATAPROPERTYNAMECHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnDefaultCellStyleChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            this.OnColumnGlobalAutoSize(e.Column.Index);
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNDEFAULTCELLSTYLECHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDisplayIndexChanged(GridColumn gridColumn)
        {
            GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
            this.OnColumnDisplayIndexChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnDisplayIndexChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnDisplayIndexChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNDISPLAYINDEXCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnDisplayIndexChanged_PostNotification()
        {
            this.FlushDisplayIndexChanged(true);
        }

        internal void OnColumnDisplayIndexChanged_PreNotification()
        {
            this.Columns.InvalidateCachedColumnsOrder();
            this.PerformLayoutPrivate(false, false, true, false);
            if (this.editingControl != null)
            {
                this.PositionEditingControl(true, true, false);
            }
            base.Invalidate(Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data));
        }

        internal void OnColumnDisplayIndexChanging(GridColumn gridColumn, int newDisplayIndex)
        {
            if (this.gridOper[0x800])
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAlterDisplayIndexWithinAdjustments"));
            }
            this.CorrectColumnFrozenStatesForMove(gridColumn, newDisplayIndex);
            try
            {
                this.gridOper[0x800] = true;
                if (newDisplayIndex < gridColumn.DisplayIndex)
                {
                    foreach (GridColumn column in this.Columns)
                    {
                        if ((newDisplayIndex <= column.DisplayIndex) && (column.DisplayIndex < gridColumn.DisplayIndex))
                        {
                            column.DisplayIndexInternal = column.DisplayIndex + 1;
                            column.DisplayIndexHasChanged = true;
                        }
                    }
                }
                else
                {
                    foreach (GridColumn column2 in this.Columns)
                    {
                        if ((gridColumn.DisplayIndex < column2.DisplayIndex) && (column2.DisplayIndex <= newDisplayIndex))
                        {
                            column2.DisplayIndexInternal = column2.DisplayIndex - 1;
                            column2.DisplayIndexHasChanged = true;
                        }
                    }
                }
            }
            finally
            {
                this.gridOper[0x800] = false;
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnDividerDoubleClick"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnDividerDoubleClickEventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnDividerDoubleClick(GridColumnDividerDoubleClickEventArgs e)
        {
            GridColumnDividerDoubleClickEventHandler handler = base.Events[EVENT_gridCOLUMNDIVIDERDOUBLECLICK] as GridColumnDividerDoubleClickEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((!e.Handled && (e.Button == MouseButtons.Left)) && (e.ColumnIndex < this.Columns.Count))
            {
                if (e.ColumnIndex == -1)
                {
                    this.AutoResizeRowHeadersWidth(GridRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true, true);
                }
                else
                {
                    GridAutoSizeColumnMode inheritedAutoSizeMode = this.Columns[e.ColumnIndex].InheritedAutoSizeMode;
                    switch (inheritedAutoSizeMode)
                    {
                        case GridAutoSizeColumnMode.None:
                        case GridAutoSizeColumnMode.Fill:
                            this.AutoResizeColumnInternal(e.ColumnIndex, GridAutoSizeColumnCriteriaInternal.AllRows | GridAutoSizeColumnCriteriaInternal.Header, true);
                            return;
                    }
                    this.AutoResizeColumnInternal(e.ColumnIndex, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnDividerWidthChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnDividerWidthChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            this.OnColumnGlobalAutoSize(e.Column.Index);
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNDIVIDERWIDTHCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnFillWeightChanged(GridColumn gridColumn)
        {
            if (gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
            {
                this.gridState2[0x4000000] = true;
                this.PerformLayoutPrivate(false, true, false, false);
            }
        }

        internal void OnColumnFillWeightChanging(GridColumn gridColumn, float fillWeight)
        {
            if (this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAlterAutoFillColumnParameter"));
            }
            float num = (this.Columns.GetColumnsFillWeight(GridElementStates.None) - gridColumn.FillWeight) + fillWeight;
            if (num > 65535f)
            {
                object[] args = new object[] { ((ushort) 0xffff).ToString(CultureInfo.CurrentCulture) };
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_WeightSumCannotExceedLongMaxValue", args));
            }
        }

        private void OnColumnGlobalAutoSize(int columnIndex)
        {
            if (this.Columns[columnIndex].Visible)
            {
                this.InvalidateColumnInternal(columnIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
                    GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                    if ((inheritedAutoSizeMode != GridAutoSizeColumnCriteriaInternal.None) && (inheritedAutoSizeMode != GridAutoSizeColumnCriteriaInternal.Fill))
                    {
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, fixedHeight);
                    }
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
                    }
                    if ((!fixedHeight && (inheritedAutoSizeMode != GridAutoSizeColumnCriteriaInternal.None)) && (inheritedAutoSizeMode != GridAutoSizeColumnCriteriaInternal.Fill))
                    {
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeaderCellChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnHeaderCellChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            this.OnColumnHeaderGlobalAutoSize(e.Column.Index);
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNHEADERCELLCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeaderGlobalAutoSize(int columnIndex)
        {
            if (this.ColumnHeadersVisible)
            {
                this.InvalidateCellPrivate(columnIndex, -1);
                if (this.noAutoSizeCount <= 0)
                {
                    GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) this.Columns[columnIndex].InheritedAutoSizeMode;
                    GridAutoSizeColumnCriteriaInternal internal3 = inheritedAutoSizeMode & GridAutoSizeColumnCriteriaInternal.Header;
                    bool fixedColumnWidth = internal3 == GridAutoSizeColumnCriteriaInternal.NotSet;
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(columnIndex, true, fixedColumnWidth);
                    }
                    if (!fixedColumnWidth)
                    {
                        bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
                        this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, fixedHeight);
                        if (!fixedHeight)
                        {
                            this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                            this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
                        }
                        if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                        {
                            this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
                        }
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeaderMouseClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The value of the <see cref="P:MControl.GridView.GridCellMouseEventArgs.ColumnIndex"></see> property of e is less than zero or greater than the number of columns in the control minus one.</exception>
        protected virtual void OnColumnHeaderMouseClick(GridCellMouseEventArgs e)
        {
            if (((e.Button == MouseButtons.Left) && (this.SelectionMode != GridSelectionMode.FullColumnSelect)) && (this.SelectionMode != GridSelectionMode.ColumnHeaderSelect))
            {
                GridColumn gridColumn = this.Columns[e.ColumnIndex];
                if ((gridColumn.SortMode == GridColumnSortMode.Automatic) && (!this.VirtualMode || gridColumn.IsDataBound))
                {
                    ListSortDirection ascending = ListSortDirection.Ascending;
                    if ((this.sortedColumn == gridColumn) && (this.sortOrder == System.Windows.Forms.SortOrder.Ascending))
                    {
                        ascending = ListSortDirection.Descending;
                    }
                    if ((this.DataSource == null) || (((this.DataSource != null) && (this.dataConnection.List is IBindingList)) && (((IBindingList) this.dataConnection.List).SupportsSorting && gridColumn.IsDataBound)))
                    {
                        this.Sort(gridColumn, ascending);
                    }
                }
            }
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCOLUMNHEADERMOUSECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeaderMouseDoubleClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains information about the cell and the position of the mouse pointer.</param>
        protected virtual void OnColumnHeaderMouseDoubleClick(GridCellMouseEventArgs e)
        {
            GridCellMouseEventHandler handler = base.Events[EVENT_gridCOLUMNHEADERMOUSEDOUBLECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            this.noSelectionChangeCount++;
            try
            {
                int firstRow;
                int x;
                int y;
                GridCell cell;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        return;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                    {
                        bool flag = true;
                        if (isControlDown && this.Columns[hti.col].Selected)
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_0385;
                        }
                        firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                        if ((firstRow <= -1) || (hti.col == this.ptCurrentCell.X))
                        {
                            goto Label_015C;
                        }
                        x = this.ptCurrentCell.X;
                        y = this.ptCurrentCell.Y;
                        if (this.EndEdit(GridDataErrorContexts.CurrentCellChange | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, true, true, firstRow != this.ptCurrentCell.Y, firstRow != this.ptCurrentCell.Y, false, this.EditMode != GridEditMode.EditOnEnter, true, false))
                        {
                            if ((firstRow == y) || (y == -1))
                            {
                                goto Label_015C;
                            }
                            cell = null;
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                if (!this.OnRowValidating(ref cell, x, y))
                                {
                                    break;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowEnter(ref cell, x, y, true, true);
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnCellEnter(ref cell, x, y);
                                    }
                                }
                            }
                        }
                        return;
                    }
                    default:
                        return;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return;
                }
                this.OnRowValidated(ref cell, x, y);
            Label_015C:
                if (!this.IsColumnOutOfBounds(hti.col))
                {
                    bool flag2 = false;
                    this.trackColumn = hti.col;
                    this.trackColumnEdge = -1;
                    if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.X > -1) && this.Columns[this.ptAnchorCell.X].Selected))
                    {
                        flag2 = true;
                    }
                    if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                    {
                        int num4 = 0;
                        bool flag3 = false;
                        if (this.selectedBandIndexes.Count > 8)
                        {
                            this.inBulkPaintCount++;
                            flag3 = true;
                        }
                        try
                        {
                            while (num4 < this.selectedBandIndexes.Count)
                            {
                                if (this.selectedBandIndexes[num4] != hti.col)
                                {
                                    this.SetSelectedColumnCore(this.selectedBandIndexes[num4], false);
                                }
                                else
                                {
                                    num4++;
                                }
                            }
                            if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                            {
                                this.RemoveIndividuallySelectedCells();
                            }
                        }
                        finally
                        {
                            if (flag3)
                            {
                                this.ExitBulkPaint(-1, -1);
                            }
                        }
                    }
                    if (this.MultiSelect && this.gridOper[0x200])
                    {
                        this.gridOper[4] = true;
                    }
                    if (flag2)
                    {
                        if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
                        {
                            this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
                        }
                        else
                        {
                            this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
                        }
                    }
                    else if (!this.selectedBandIndexes.Contains(hti.col))
                    {
                        this.SetSelectedColumnCore(hti.col, true);
                    }
                    if (firstRow != -1)
                    {
                        if (hti.col != this.ptCurrentCell.X)
                        {
                            if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
                            {
                                this.ScrollIntoView(hti.col, firstRow, false);
                                if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
                                {
                                    this.SetCurrentCellAddressCore(hti.col, firstRow, !isShiftDown, false, true);
                                }
                            }
                        }
                        else if (-1 != this.ptCurrentCell.X)
                        {
                            this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                        }
                    }
                }
                return;
            Label_0385:
                this.SetSelectedColumnCore(hti.col, false);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeadersBorderStyleChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_gridCOLUMNHEADERSBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeadersDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
        {
            if (this.ColumnHeadersVisible)
            {
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
                GridCellStyleChangedEventArgs args = e as GridCellStyleChangedEventArgs;
                if ((args == null) || args.ChangeAffectsPreferredSize)
                {
                    this.OnColumnHeadersGlobalAutoSize();
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
            }
            EventHandler handler = base.Events[EVENT_gridCOLUMNHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnHeadersGlobalAutoSize()
        {
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing);
                bool flag2 = this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize;
                if (!flag2)
                {
                    this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, false);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, false);
                }
                bool flag3 = this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.Header, false);
                if (!fixedRowHeadersWidth || flag3)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if (!flag2)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.Header, true);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeadersHeightChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnHeadersHeightChanged(EventArgs e)
        {
            if (this.editingControl != null)
            {
                this.PositionEditingControl(true, false, false);
            }
            this.UpdateMouseEnteredCell(null, null);
            this.OnColumnHeadersGlobalAutoSize();
            EventHandler handler = base.Events[EVENT_gridCOLUMNHEADERSHEIGHTCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnHeadersHeightSizeModeChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridAutoSizeModeEventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnHeadersHeightSizeModeChanged(GridAutoSizeModeEventArgs e)
        {
            if (this.columnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
            {
                if (!e.PreviousModeAutoSized)
                {
                    this.cachedColumnHeadersHeight = this.ColumnHeadersHeight;
                }
                this.AutoResizeColumnHeadersHeight(true, true);
            }
            else if (e.PreviousModeAutoSized)
            {
                this.ColumnHeadersHeight = this.cachedColumnHeadersHeight;
            }
            GridAutoSizeModeEventHandler handler = base.Events[EVENT_gridCOLUMNHEADERSHEIGHTSIZEMODECHANGED] as GridAutoSizeModeEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnHidden(GridColumn gridColumn)
        {
            if (gridColumn.Displayed)
            {
                gridColumn.DisplayedInternal = false;
                GridColumnStateChangedEventArgs e = new GridColumnStateChangedEventArgs(gridColumn, GridElementStates.Displayed);
                this.OnColumnStateChanged(e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnMinimumWidthChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnMinimumWidthChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            if (e.Column.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)
            {
                this.PerformLayoutPrivate(false, true, false, false);
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNMINIMUMWIDTHCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnMinimumWidthChanging(GridColumn gridColumn, int minimumWidth)
        {
            if ((gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill) && (gridColumn.Width < minimumWidth))
            {
                try
                {
                    this.gridState2[0x4000000] = true;
                    gridColumn.DesiredMinimumWidth = minimumWidth;
                    this.PerformLayoutPrivate(false, true, true, false);
                }
                finally
                {
                    gridColumn.DesiredMinimumWidth = 0;
                }
            }
        }

        internal void OnColumnNameChanged(GridColumn gridColumn)
        {
            GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
            this.OnColumnNameChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnNameChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnNameChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumn column = e.Column;
            if ((column.HasHeaderCell && (column.HeaderCell.Value is string)) && (string.Compare((string) column.HeaderCell.Value, column.Name, false, CultureInfo.InvariantCulture) == 0))
            {
                this.InvalidateCellPrivate(column.Index, -1);
                GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                bool fixedColumnWidth = ((inheritedAutoSizeMode & GridAutoSizeColumnCriteriaInternal.Header) == GridAutoSizeColumnCriteriaInternal.NotSet) || !this.ColumnHeadersVisible;
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, fixedColumnWidth);
                }
                if (!fixedColumnWidth)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
                    this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                        this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                    }
                }
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNNAMECHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnColumnRemoved(GridColumn gridColumn)
        {
            this.OnColumnRemoved(new GridColumnEventArgs(gridColumn));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnRemoved"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        protected virtual void OnColumnRemoved(GridColumnEventArgs e)
        {
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNREMOVED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnColumnSelectMouseMove(HitTestInfo hti)
        {
            if ((((this.ptCurrentCell.X == -1) || (hti.col == this.ptCurrentCell.X)) || this.CommitEditForOperation(hti.col, this.ptCurrentCell.Y, true)) && !this.IsColumnOutOfBounds(hti.col))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if (((this.trackColumnEdge >= 0) && (this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) || (this.trackColumnEdge == this.trackColumn))) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col))
                    {
                        GridColumn column = this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(column.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge)) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge)) && (this.Columns.DisplayInOrder(this.trackColumn, hti.col) || (hti.col == this.trackColumn)))
                    {
                        GridColumn column2 = this.Columns.GetNextColumn(this.Columns[hti.col], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(column2.Index, this.trackColumnEdge, false);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((this.trackColumnEdge == -1) && this.Columns.DisplayInOrder(this.trackColumn, hti.col))
                    {
                        GridColumn column3 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(column3.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && (this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) || (this.trackColumnEdge == this.trackColumn))) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge))
                    {
                        GridColumn column4 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumnEdge], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(hti.col, column4.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn)) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col)) && (this.Columns.DisplayInOrder(hti.col, this.trackColumn) || (hti.col == this.trackColumn)))
                    {
                        GridColumn column5 = this.Columns.GetPreviousColumn(this.Columns[hti.col], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(this.trackColumnEdge, column5.Index, false);
                        this.trackColumnEdge = hti.col;
                    }
                    else if ((this.trackColumnEdge == -1) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
                    {
                        GridColumn column6 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(hti.col, column6.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge)) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
                    {
                        GridColumn column7 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(column7.Index, this.trackColumnEdge, false);
                        column7 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(hti.col, column7.Index, true);
                        this.trackColumnEdge = hti.col;
                    }
                    else if (((this.trackColumnEdge >= 0) && this.Columns.DisplayInOrder(this.trackColumn, hti.col)) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn))
                    {
                        GridColumn column8 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(this.trackColumnEdge, column8.Index, false);
                        column8 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], GridElementStates.Visible, GridElementStates.None);
                        this.SelectColumnRange(column8.Index, hti.col, true);
                        this.trackColumnEdge = hti.col;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
                if (((this.ptCurrentCell.X != -1) && (hti.col != this.ptCurrentCell.X)) && ((this.ptCurrentCell.Y != -1) && !this.IsColumnOutOfBounds(hti.col)))
                {
                    this.SetCurrentCellAddressCore(hti.col, this.ptCurrentCell.Y, false, false, false);
                }
            }
        }

        private void OnColumnsGlobalAutoSize()
        {
            this.InvalidateData();
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
                bool flag2 = this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.DisplayedRows | GridAutoSizeColumnCriteriaInternal.AllRows, fixedHeight);
                if (!fixedHeight)
                {
                    if (flag2)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.DisplayedRows | GridAutoSizeColumnCriteriaInternal.AllRows, true);
                }
            }
        }

        internal void OnColumnSortModeChanged(GridColumn gridColumn)
        {
            GridColumnEventArgs e = new GridColumnEventArgs(gridColumn);
            this.OnColumnSortModeChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnSortModeChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnSortModeChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumn column = e.Column;
            if (column.HasHeaderCell)
            {
                if ((column.SortMode == GridColumnSortMode.NotSortable) || ((column.SortMode == GridColumnSortMode.Programmatic) && (this.SortedColumn == column)))
                {
                    column.HeaderCell.SortGlyphDirection = System.Windows.Forms.SortOrder.None;
                }
                GridAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (GridAutoSizeColumnCriteriaInternal) column.InheritedAutoSizeMode;
                bool fixedColumnWidth = ((inheritedAutoSizeMode & GridAutoSizeColumnCriteriaInternal.Header) == GridAutoSizeColumnCriteriaInternal.NotSet) || !this.ColumnHeadersVisible;
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(column.Index, true, fixedColumnWidth);
                }
                if (!fixedColumnWidth)
                {
                    bool fixedHeight = (this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) == GridAutoSizeRowsMode.None;
                    this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, fixedHeight);
                    if (!fixedHeight)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                        this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(column.Index, true, true);
                    }
                }
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNSORTMODECHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnStateChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnStateChangedEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.InvalidCastException">The column changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        protected virtual void OnColumnStateChanged(GridColumnStateChangedEventArgs e)
        {
            bool flag;
            bool flag2;
            GridAutoSizeColumnMode inheritedAutoSizeMode;
            GridColumnStateChangedEventHandler handler;
            GridColumn column = e.Column;
            switch (e.StateChanged)
            {
                case GridElementStates.Frozen:
                    if (column.Visible)
                    {
                        if (column.Frozen)
                        {
                            if (this.horizontalOffset >= column.Thickness)
                            {
                                this.horizontalOffset -= column.Thickness;
                            }
                            else
                            {
                                this.horizontalOffset = this.negOffset = 0;
                            }
                        }
                        else
                        {
                            this.horizontalOffset = this.negOffset = 0;
                        }
                        if (this.horizScrollBar.Enabled)
                        {
                            this.horizScrollBar.Value = this.horizontalOffset;
                        }
                        this.gridState2[0x4000000] = true;
                        this.PerformLayoutPrivate(false, false, true, true);
                        base.Invalidate();
                    }
                    break;

                case GridElementStates.Selected:
                    if (column.Visible && (this.inBulkPaintCount == 0))
                    {
                        this.InvalidateColumnInternal(column.Index);
                    }
                    break;

                case GridElementStates.Visible:
                {
                    if (!column.Visible && column.Displayed)
                    {
                        column.DisplayedInternal = false;
                    }
                    this.gridState2[0x4000000] = true;
                    this.PerformLayoutPrivate(false, false, true, true);
                    flag = ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None) || (((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 1)) != GridAutoSizeRowsMode.None) && this.RowHeadersVisible);
                    flag2 = false;
                    inheritedAutoSizeMode = column.InheritedAutoSizeMode;
                    switch (inheritedAutoSizeMode)
                    {
                        case GridAutoSizeColumnMode.None:
                        case GridAutoSizeColumnMode.Fill:
                            goto Label_01A3;
                    }
                    int thicknessInternal = column.ThicknessInternal;
                    if (column.Visible)
                    {
                        column.CachedThickness = thicknessInternal;
                        this.AutoResizeColumnInternal(column.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, !flag);
                        flag2 = true;
                    }
                    else if (thicknessInternal != column.CachedThickness)
                    {
                        column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
                    }
                    goto Label_01A3;
                }
            }
            goto Label_01E5;
        Label_01A3:
            if (flag)
            {
                if (column.Visible)
                {
                    this.AdjustExpandingRows(column.Index, true);
                }
                else
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if (flag2)
                {
                    this.AutoResizeColumnInternal(column.Index, (GridAutoSizeColumnCriteriaInternal) inheritedAutoSizeMode, true);
                }
            }
            else
            {
                base.Invalidate();
            }
        Label_01E5:
            handler = base.Events[EVENT_gridCOLUMNSTATECHANGED] as GridColumnStateChangedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (((e.StateChanged == GridElementStates.ReadOnly) && (column.Index == this.ptCurrentCell.X)) && !this.gridOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((!column.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X)) && (((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.ReadOnly) == GridElementStates.None) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnColumnToolTipTextChanged(GridColumn gridColumn)
        {
            this.OnColumnToolTipTextChanged(new GridColumnEventArgs(gridColumn));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnToolTipTextChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains information about the column.</param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnToolTipTextChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNTOOLTIPTEXTCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ColumnWidthChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridColumnEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The column indicated by the <see cref="P:MControl.GridView.GridColumnEventArgs.Column"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnColumnWidthChanged(GridColumnEventArgs e)
        {
            if (e.Column.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            this.Columns.InvalidateCachedColumnsWidths();
            if (e.Column.Visible && base.IsHandleCreated)
            {
                this.PerformLayoutPrivate(false, false, false, false);
                Rectangle data = this.layout.Data;
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                else if (this.SingleHorizontalBorderAdded)
                {
                    data.Y--;
                    data.Height++;
                }
                if ((data.Width > 0) && (data.Height > 0))
                {
                    int columnXFromIndex = this.GetColumnXFromIndex(e.Column.Index);
                    if (this.RightToLeftInternal)
                    {
                        data.Width -= data.Right - columnXFromIndex;
                    }
                    else
                    {
                        data.Width -= columnXFromIndex - data.X;
                        data.X = columnXFromIndex;
                    }
                    if ((data.Width > 0) && (data.Height > 0))
                    {
                        base.Invalidate(data);
                    }
                }
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(this.ptCurrentCell.X != e.Column.Index, true, false);
                }
                this.UpdateMouseEnteredCell(null, null);
                if (this.AutoSize)
                {
                    LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
                }
            }
            GridColumnEventHandler handler = base.Events[EVENT_gridCOLUMNWIDTHCHANGED] as GridColumnEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (!this.InAdjustFillingColumns)
            {
                this.OnColumnGlobalAutoSize(e.Column.Index);
            }
        }

        internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick)
        {
            if ((this.ptMouseDownCell.X == -2) || (((this.gridState2[0x10000000] && (this.ptMouseDownCell.X == columnIndex)) && (this.ptMouseDownCell.Y == rowIndex)) && (((this.ptMouseDownCell.X == -1) || (this.ptMouseDownCell.Y == -1)) || ((columnIndex == this.ptCurrentCell.X) && (rowIndex == this.ptCurrentCell.Y)))))
            {
                GridCellEventArgs e = new GridCellEventArgs(columnIndex, rowIndex);
                if (doubleClick)
                {
                    this.OnCellContentDoubleClick(e);
                }
                else
                {
                    this.OnCellContentClick(e);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CurrentCellChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        protected virtual void OnCurrentCellChanged(EventArgs e)
        {
            base.VerifyImeRestrictedModeChanged();
            EventHandler handler = base.Events[EVENT_gridCURRENTCELLCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.CurrentCellDirtyStateChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e)
        {
            if (this.RowHeadersVisible && this.ShowEditingIcon)
            {
                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
            }
            if (this.IsCurrentCellDirty && (this.newRowIndex == this.ptCurrentCell.Y))
            {
                this.newRowIndex = -1;
                this.AddNewRow(true);
            }
            EventHandler handler = base.Events[EVENT_gridCURRENTCELLDIRTYSTATECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged"></see> event and updates the <see cref="P:MControl.GridView.Grid.UserSetCursor"></see> property if the cursor was changed in user code.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnCursorChanged(EventArgs e)
        {
            base.OnCursorChanged(e);
            if (!this.gridState2[0x200000])
            {
                this.oldCursor = this.Cursor;
            }
        }

        internal void OnDataBindingComplete(ListChangedType listChangedType)
        {
            this.OnDataBindingComplete(new GridBindingCompleteEventArgs(listChangedType));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DataBindingComplete"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridBindingCompleteEventArgs"></see> that contains the event data.</param>
        protected virtual void OnDataBindingComplete(GridBindingCompleteEventArgs e)
        {
            GridBindingCompleteEventHandler handler = base.Events[EVENT_gridDATABINDINGCOMPLETE] as GridBindingCompleteEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DataError"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridDataErrorEventArgs"></see> that contains the event data. </param>
        /// <param name="displayErrorDialogIfNoHandler">true to display an error dialog box if there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event.</param>
        protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, GridDataErrorEventArgs e)
        {
            GridDataErrorEventHandler handler = base.Events[EVENT_gridDATAERROR] as GridDataErrorEventHandler;
            if (!this.gridOper[0x100000] && !base.IsDisposed)
            {
                if (handler == null)
                {
                    if (displayErrorDialogIfNoHandler)
                    {
                        string str;
                        if (e.Exception == null)
                        {
                            str = MControl.GridView.RM.GetString("Grid_ErrorMessageText_NoException");
                        }
                        else
                        {
                            str = MControl.GridView.RM.GetString("Grid_ErrorMessageText_WithException", new object[] { e.Exception });
                        }
                        if (this.RightToLeftInternal)
                        {
                            MessageBox.Show(str, MControl.GridView.RM.GetString("Grid_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RtlReading | MessageBoxOptions.RightAlign);
                        }
                        else
                        {
                            MessageBox.Show(str, MControl.GridView.RM.GetString("Grid_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
                        }
                        this.CorrectFocus(true);
                    }
                }
                else
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
        }

        internal void OnDataErrorInternal(GridDataErrorEventArgs e)
        {
            this.OnDataError(!base.DesignMode, e);
        }

        internal void OnGridElementStateChanged(GridElement element, int index, GridElementStates elementState)
        {
            GridColumn gridColumn = element as GridColumn;
            if (gridColumn != null)
            {
                GridColumnStateChangedEventArgs e = new GridColumnStateChangedEventArgs(gridColumn, elementState);
                this.OnColumnStateChanged(e);
            }
            else
            {
                GridRow gridRow = element as GridRow;
                if (gridRow != null)
                {
                    if (((base.Events[EVENT_gridROWSTATECHANGED] is GridRowStateChangedEventHandler) && (gridRow.Grid != null)) && (gridRow.Index == -1))
                    {
                        gridRow = this.Rows[index];
                    }
                    GridRowStateChangedEventArgs args2 = new GridRowStateChangedEventArgs(gridRow, elementState);
                    this.OnRowStateChanged((gridRow.Index == -1) ? index : gridRow.Index, args2);
                }
                else
                {
                    GridCell gridCell = element as GridCell;
                    if (gridCell != null)
                    {
                        GridCellStateChangedEventArgs args3 = new GridCellStateChangedEventArgs(gridCell, elementState);
                        this.OnCellStateChanged(args3);
                    }
                }
            }
            if ((elementState & GridElementStates.Selected) == GridElementStates.Selected)
            {
                if (this.noSelectionChangeCount > 0)
                {
                    this.gridState2[0x40000] = true;
                }
                else
                {
                    this.OnSelectionChanged(EventArgs.Empty);
                }
            }
        }

        internal void OnGridElementStateChanging(GridElement element, int index, GridElementStates elementState)
        {
            GridColumn gridColumn = element as GridColumn;
            if (gridColumn != null)
            {
                switch (elementState)
                {
                    case GridElementStates.Frozen:
                    case GridElementStates.Visible:
                        if (elementState == GridElementStates.Visible)
                        {
                            if ((!gridColumn.Visible && (gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.ColumnHeader)) && !this.ColumnHeadersVisible)
                            {
                                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotMakeAutoSizedColumnVisible"));
                            }
                            if ((!gridColumn.Visible && gridColumn.Frozen) && (gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill))
                            {
                                gridColumn.AutoSizeMode = GridAutoSizeColumnMode.None;
                            }
                            else if (gridColumn.Visible && (this.ptCurrentCell.X == gridColumn.Index))
                            {
                                this.ResetCurrentCell();
                            }
                        }
                        if (((elementState == GridElementStates.Frozen) && !gridColumn.Frozen) && (gridColumn.Visible && (gridColumn.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill)))
                        {
                            gridColumn.AutoSizeMode = GridAutoSizeColumnMode.None;
                        }
                        this.CorrectColumnFrozenStates(gridColumn, elementState == GridElementStates.Frozen);
                        return;

                    case (GridElementStates.Frozen | GridElementStates.Displayed):
                        return;

                    case GridElementStates.ReadOnly:
                        if ((((this.ptCurrentCell.X == gridColumn.Index) && this.IsCurrentCellInEditMode) && (!gridColumn.ReadOnly && !this.gridOper[0x4000])) && !this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, false, false, false, false, false, true, false, false))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CommitFailedCannotCompleteOperation"));
                        }
                        return;
                }
            }
            else
            {
                GridRow gridRow = element as GridRow;
                if (gridRow != null)
                {
                    int rowIndex = (gridRow.Index > -1) ? gridRow.Index : index;
                    switch (elementState)
                    {
                        case GridElementStates.Frozen:
                        case GridElementStates.Visible:
                            if ((elementState == GridElementStates.Visible) && (this.ptCurrentCell.Y == rowIndex))
                            {
                                if (this.DataSource != null)
                                {
                                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CurrencyManagerRowCannotBeInvisible"));
                                }
                                this.ResetCurrentCell();
                            }
                            this.CorrectRowFrozenStates(gridRow, rowIndex, elementState == GridElementStates.Frozen);
                            return;

                        case (GridElementStates.Frozen | GridElementStates.Displayed):
                            return;

                        case GridElementStates.ReadOnly:
                            if ((((this.ptCurrentCell.Y == rowIndex) && ((this.Rows.GetRowState(rowIndex) & GridElementStates.ReadOnly) == GridElementStates.None)) && (!this.ReadOnly && this.IsCurrentCellInEditMode)) && (!this.gridOper[0x4000] && !this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, false, false, false, false, false, true, false, false)))
                            {
                                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CommitFailedCannotCompleteOperation"));
                            }
                            return;
                    }
                }
                else
                {
                    GridCell cell = element as GridCell;
                    if (cell != null)
                    {
                        GridElementStates states3 = elementState;
                        if ((states3 == GridElementStates.ReadOnly) && ((((this.ptCurrentCell.X == cell.ColumnIndex) && (this.ptCurrentCell.Y == cell.RowIndex)) && (this.IsCurrentCellInEditMode && !cell.ReadOnly)) && (!this.gridOper[0x4000] && !this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, false, false, false, false, false, true, false, false))))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CommitFailedCannotCompleteOperation"));
                        }
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DataMemberChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnDataMemberChanged(EventArgs e)
        {
            this.RefreshColumnsAndRows();
            EventHandler handler = base.Events[EVENT_gridDATAMEMBERCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((this.dataConnection != null) && (this.dataConnection.CurrencyManager != null))
            {
                this.OnDataBindingComplete(ListChangedType.Reset);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DataSourceChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnDataSourceChanged(EventArgs e)
        {
            this.RefreshColumnsAndRows();
            this.InvalidateRowHeights();
            EventHandler handler = base.Events[EVENT_gridDATASOURCECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((this.dataConnection != null) && (this.dataConnection.CurrencyManager != null))
            {
                this.OnDataBindingComplete(ListChangedType.Reset);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnDefaultCellStyleChanged(EventArgs e)
        {
            GridCellStyleChangedEventArgs args = e as GridCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                base.Invalidate();
            }
            else
            {
                this.OnGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_gridDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.DefaultValuesNeeded"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        protected virtual void OnDefaultValuesNeeded(GridRowEventArgs e)
        {
            GridRowEventHandler handler = base.Events[EVENT_gridDEFAULTVALUESNEEDED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnDoubleClick(EventArgs e)
        {
            base.OnDoubleClick(e);
            if ((!this.gridState2[0x8000000] && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                MouseEventArgs args = e as MouseEventArgs;
                if (args != null)
                {
                    HitTestInfo info = this.HitTest(args.X, args.Y);
                    if (((info.Type != GridHitTestType.None) && (info.Type != GridHitTestType.HorizontalScrollBar)) && ((info.Type != GridHitTestType.VerticalScrollBar) && (args.Button == MouseButtons.Left)))
                    {
                        this.OnCellDoubleClick(new GridCellEventArgs(info.col, info.row));
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.EditingControlShowing"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridEditingControlShowingEventArgs"></see> that contains information about the editing control.</param>
        protected virtual void OnEditingControlShowing(GridEditingControlShowingEventArgs e)
        {
            GridEditingControlShowingEventHandler handler = base.Events[EVENT_gridEDITINGCONTROLSHOWING] as GridEditingControlShowingEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.EditModeChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.InvalidCastException">When entering edit mode, the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        protected virtual void OnEditModeChanged(EventArgs e)
        {
            if ((this.Focused && (this.EditMode == GridEditMode.EditOnEnter)) && ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode))
            {
                this.BeginEditInternal(true);
            }
            EventHandler handler = base.Events[EVENT_gridEDITMODECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        protected override void OnEnabledChanged(EventArgs e)
        {
            base.OnEnabledChanged(e);
            if (!base.GetAnyDisposingInHierarchy() && (base.IsHandleCreated && base.Enabled))
            {
                if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
                {
                    this.vertScrollBar.Enabled = true;
                }
                if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
                {
                    this.horizScrollBar.Enabled = true;
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Enter"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.InvalidCastException">The control is configured to enter edit mode when it receives focus, but upon entering focus, the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        protected override void OnEnter(EventArgs e)
        {
            if ((this.editingControl == null) || !this.editingControl.ContainsFocus)
            {
                base.OnEnter(e);
                if (!base.DesignMode)
                {
                    this.gridState1[0x40] = false;
                    if (this.ptCurrentCell.X > -1)
                    {
                        GridCell gridCell = null;
                        this.OnRowEnter(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false);
                        if (this.ptCurrentCell.X == -1)
                        {
                            return;
                        }
                        this.OnCellEnter(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    }
                    else if (!this.gridOper[0x2000])
                    {
                        this.MakeFirstDisplayedCellCurrentCell(true);
                    }
                    if ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode)
                    {
                        if ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))
                        {
                            this.BeginEditInternal(true);
                            if (((this.ptCurrentCell.X > -1) && (this.CurrentCellInternal.EditType == null)) && !this.gridOper[0x2000])
                            {
                                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            }
                        }
                        else if (!this.gridOper[0x2000])
                        {
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                        }
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.FontChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnFontChanged(EventArgs e)
        {
            base.OnFontChanged(e);
            if (!base.GetAnyDisposingInHierarchy())
            {
                if (this.gridState1[0x4000000] && (this.ColumnHeadersDefaultCellStyle.Font != base.Font))
                {
                    this.ColumnHeadersDefaultCellStyle.Font = base.Font;
                    this.gridState1[0x4000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
                if (this.gridState1[0x8000000] && (this.RowHeadersDefaultCellStyle.Font != base.Font))
                {
                    this.RowHeadersDefaultCellStyle.Font = base.Font;
                    this.gridState1[0x8000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
                if (this.gridState1[0x2000000] && (this.DefaultCellStyle.Font != base.Font))
                {
                    this.DefaultCellStyle.Font = base.Font;
                    this.gridState1[0x2000000] = true;
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
                    this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ForeColorChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnForeColorChanged(EventArgs e)
        {
            base.OnForeColorChanged(e);
            if (!base.GetAnyDisposingInHierarchy() && (this.gridState1[0x400] && (this.DefaultCellStyle.ForeColor != base.ForeColor)))
            {
                this.DefaultCellStyle.ForeColor = base.ForeColor;
                this.gridState1[0x400] = true;
                this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = false;
                this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
            }
        }

        private void OnGlobalAutoSize()
        {
            base.Invalidate();
            if (this.noAutoSizeCount <= 0)
            {
                bool flag = (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing);
                if (flag)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize, this.autoSizeRowsMode == GridAutoSizeRowsMode.None);
                }
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, false);
                }
                if (this.autoSizeRowsMode != GridAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.DisplayedRows | GridAutoSizeColumnCriteriaInternal.AllRows | GridAutoSizeColumnCriteriaInternal.Header, true);
                if (flag && ((this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize) || (this.autoSizeRowsMode != GridAutoSizeRowsMode.None)))
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                if (this.autoSizeRowsMode != GridAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
            }
        }

        protected override void OnGotFocus(EventArgs e)
        {
            base.OnGotFocus(e);
            if (this.ptCurrentCell.X != -1)
            {
                this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            if (((!this.gridOper[0x20000] && (!this.gridOper[0x400000] || (this.EditMode != GridEditMode.EditOnEnter))) && (!this.gridOper[0x2000] || (this.EditMode != GridEditMode.EditOnEnter))) && (this.ptCurrentCell.X > -1))
            {
                this.AccessibilityNotifyCurrentCellChanged(this.ptCurrentCell);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.GridColorChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnGridColorChanged(EventArgs e)
        {
            this.InvalidateInside();
            EventHandler handler = base.Events[EVENT_gridGRIDCOLORCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnHandleCreated(EventArgs e)
        {
            base.OnHandleCreated(e);
            this.DisposeCachedGraphics();
            if (this.layout.dirty)
            {
                this.PerformLayoutPrivate(false, true, false, false);
            }
            if (this.ptCurrentCell.X == -1)
            {
                this.MakeFirstDisplayedCellCurrentCell(false);
            }
            else
            {
                this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
            }
            if (this.gridState2[0x100000])
            {
                this.gridState2[0x100000] = false;
                this.OnGlobalAutoSize();
            }
            SystemEvents.UserPreferenceChanged += new UserPreferenceChangedEventHandler(this.OnUserPreferenceChanged);
        }

        protected override void OnHandleDestroyed(EventArgs e)
        {
            SystemEvents.UserPreferenceChanged -= new UserPreferenceChangedEventHandler(this.OnUserPreferenceChanged);
            base.OnHandleDestroyed(e);
        }

        internal void OnInsertedColumn_PostNotification(Point newCurrentCell)
        {
            if (newCurrentCell.X != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Columns.GetColumnCount(GridElementStates.Visible) == 1);
            }
        }

        internal void OnInsertedColumn_PreNotification(GridColumn gridColumn)
        {
            this.displayedBandsInfo.CorrectColumnIndexAfterInsertion(gridColumn.Index, 1);
            this.CorrectColumnIndexesAfterInsertion(gridColumn, 1);
            this.OnAddedColumn(gridColumn);
        }

        internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion)
        {
            this.OnAddedRow_PostNotification(rowIndex);
            if (lastInsertion && (newCurrentCell.Y != -1))
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Rows.GetRowCount(GridElementStates.Visible) == 1);
            }
        }

        internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, insertionCount);
            this.CorrectRowIndexesAfterInsertion(rowIndex, insertionCount);
            this.OnAddedRow_PreNotification(rowIndex);
        }

        internal void OnInsertedRows_PostNotification(GridRow[] gridRows, Point newCurrentCell)
        {
            this.OnAddedRows_PostNotification(gridRows);
            if (newCurrentCell.Y != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
        }

        internal void OnInsertedRows_PreNotification(int rowIndex, GridRow[] gridRows)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, gridRows.Length);
            this.CorrectRowIndexesAfterInsertion(rowIndex, gridRows.Length);
            this.OnAddedRows_PreNotification(gridRows);
        }

        internal void OnInsertingColumn(int columnIndexInserted, GridColumn gridColumn, out Point newCurrentCell)
        {
            if (gridColumn.Grid != null)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_ColumnAlreadyBelongsToGrid"));
            }
            if ((!this.InInitialization && (gridColumn.SortMode == GridColumnSortMode.Automatic)) && ((this.SelectionMode == GridSelectionMode.FullColumnSelect) || (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("GridColumn_SortModeAndSelectionModeClash", new object[] { GridColumnSortMode.Automatic.ToString(), this.SelectionMode.ToString() }));
            }
            if (gridColumn.Visible)
            {
                if (!this.ColumnHeadersVisible && ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.ColumnHeader) || ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.ColumnHeader))))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoSizedColumn"));
                }
                if (gridColumn.Frozen && ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.Fill) || ((gridColumn.AutoSizeMode == GridAutoSizeColumnMode.NotSet) && (this.AutoSizeColumnsMode == GridAutoSizeColumnsMode.Fill))))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddAutoFillColumn"));
                }
            }
            this.CorrectColumnFrozenState(gridColumn, columnIndexInserted);
            if (this.ptCurrentCell.X != -1)
            {
                newCurrentCell = new Point((columnIndexInserted <= this.ptCurrentCell.X) ? (this.ptCurrentCell.X + 1) : this.ptCurrentCell.X, this.ptCurrentCell.Y);
                this.ResetCurrentCell();
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            if (this.Rows.Count > 0)
            {
                if (gridColumn.CellType == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAddUntypedColumn"));
                }
                if ((gridColumn.CellTemplate.DefaultNewRowValue != null) && (this.newRowIndex != -1))
                {
                    GridRow row1 = this.Rows[this.newRowIndex];
                }
                int num = this.Columns.Count + 1;
                try
                {
                    for (int i = 0; i < this.Rows.Count; i++)
                    {
                        GridRow row = this.Rows.SharedRow(i);
                        if (row.Cells.Count < num)
                        {
                            GridCell gridCell = (GridCell) gridColumn.CellTemplate.Clone();
                            row.Cells.InsertInternal(columnIndexInserted, gridCell);
                            if (i == this.newRowIndex)
                            {
                                gridCell.Value = gridCell.DefaultNewRowValue;
                            }
                            gridCell.GridInternal = this;
                            gridCell.OwningRowInternal = row;
                            gridCell.OwningColumnInternal = gridColumn;
                        }
                    }
                }
                catch
                {
                    for (int j = 0; j < this.Rows.Count; j++)
                    {
                        GridRow row2 = this.Rows.SharedRow(j);
                        if (row2.Cells.Count != num)
                        {
                            break;
                        }
                        row2.Cells.RemoveAtInternal(columnIndexInserted);
                    }
                    throw;
                }
            }
            switch (this.SelectionMode)
            {
                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num5 = 0;
                    while (num5 < count)
                    {
                        int num6 = this.selectedBandIndexes[num5];
                        if (columnIndexInserted <= num6)
                        {
                            this.selectedBandIndexes[num5] = num6 + 1;
                        }
                        num5++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num5 = 0; num5 < count; num5++)
                        {
                            int num7 = this.selectedBandSnapshotIndexes[num5];
                            if (columnIndexInserted <= num7)
                            {
                                this.selectedBandSnapshotIndexes[num5] = num7 + 1;
                            }
                        }
                    }
                    break;
                }
                case GridSelectionMode.RowHeaderSelect:
                    break;

                default:
                    return;
            }
        }

        internal void OnInsertingRow(int rowIndexInserted, GridRow gridRow, GridElementStates rowState, ref Point newCurrentCell, bool firstInsertion, int insertionCount, bool force)
        {
            if (firstInsertion)
            {
                if ((this.ptCurrentCell.Y != -1) && (rowIndexInserted <= this.ptCurrentCell.Y))
                {
                    newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + insertionCount);
                    if (force)
                    {
                        this.gridState1[0x400000] = true;
                        this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                    }
                    else
                    {
                        this.ResetCurrentCell();
                    }
                }
                else
                {
                    newCurrentCell = new Point(-1, -1);
                }
            }
            else if (newCurrentCell.Y != -1)
            {
                newCurrentCell.Y += insertionCount;
            }
            this.OnAddingRow(gridRow, rowState, false);
            this.CorrectRowFrozenState(gridRow, rowState, rowIndexInserted);
            switch (this.SelectionMode)
            {
                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num2 = 0;
                    while (num2 < count)
                    {
                        int num3 = this.selectedBandIndexes[num2];
                        if (rowIndexInserted <= num3)
                        {
                            this.selectedBandIndexes[num2] = num3 + insertionCount;
                        }
                        num2++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num2 = 0; num2 < count; num2++)
                        {
                            int num4 = this.selectedBandSnapshotIndexes[num2];
                            if (rowIndexInserted <= num4)
                            {
                                this.selectedBandSnapshotIndexes[num2] = num4 + insertionCount;
                            }
                        }
                    }
                    break;
                }
                case GridSelectionMode.FullColumnSelect:
                    break;

                default:
                    return;
            }
        }

        internal void OnInsertingRows(int rowIndexInserted, GridRow[] gridRows, ref Point newCurrentCell)
        {
            if ((this.ptCurrentCell.Y != -1) && (rowIndexInserted <= this.ptCurrentCell.Y))
            {
                newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + gridRows.Length);
                this.ResetCurrentCell();
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            this.OnAddingRows(gridRows, false);
            this.CorrectRowFrozenStates(gridRows, rowIndexInserted);
            switch (this.SelectionMode)
            {
                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num2 = 0;
                    while (num2 < count)
                    {
                        int num3 = this.selectedBandIndexes[num2];
                        if (rowIndexInserted <= num3)
                        {
                            this.selectedBandIndexes[num2] = num3 + 1;
                        }
                        num2++;
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        for (num2 = 0; num2 < count; num2++)
                        {
                            int num4 = this.selectedBandSnapshotIndexes[num2];
                            if (rowIndexInserted <= num4)
                            {
                                this.selectedBandSnapshotIndexes[num2] = num4 + 1;
                            }
                        }
                    }
                    break;
                }
                case GridSelectionMode.FullColumnSelect:
                    break;

                default:
                    return;
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyDown"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.Exception">This action would cause the control to enter edit mode but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyDown(KeyEventArgs e)
        {
            base.OnKeyDown(e);
            if (e.Handled)
            {
                return;
            }
            if (this.ptCurrentCell.X != -1)
            {
                GridCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyDownUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    GridRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
                }
            }
            if (e.Handled)
            {
                return;
            }
            Keys keys = e.KeyData & Keys.KeyCode;
            if (keys <= Keys.D0)
            {
                if (keys != Keys.Tab)
                {
                    switch (keys)
                    {
                        case Keys.Escape:
                        case Keys.Space:
                        case Keys.Prior:
                        case Keys.Next:
                        case Keys.End:
                        case Keys.Home:
                        case Keys.Left:
                        case Keys.Up:
                        case Keys.Right:
                        case Keys.Down:
                        case Keys.Insert:
                        case Keys.Delete:
                        case Keys.D0:
                        case Keys.Return:
                            goto Label_012A;

                        case Keys.IMEConvert:
                        case Keys.IMENonconvert:
                        case Keys.IMEAccept:
                        case Keys.IMEModeChange:
                        case Keys.Select:
                        case Keys.Print:
                        case Keys.Execute:
                        case Keys.Snapshot:
                        case Keys.Help:
                            return;
                    }
                    return;
                }
            }
            else
            {
                switch (keys)
                {
                    case Keys.A:
                    case Keys.C:
                    case Keys.NumPad0:
                    case Keys.F2:
                        goto Label_012A;

                    case Keys.B:
                        return;
                }
                return;
            }
        Label_012A:
            e.Handled = this.ProcessGridKey(e);
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyPress"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs"></see> that contains the event data. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyPress(KeyPressEventArgs e)
        {
            base.OnKeyPress(e);
            if (!e.Handled && (this.ptCurrentCell.X != -1))
            {
                GridCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyPressUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    GridRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"></see> that contains the event data. </param>
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        protected override void OnKeyUp(KeyEventArgs e)
        {
            base.OnKeyUp(e);
            if (!e.Handled && (this.ptCurrentCell.X != -1))
            {
                GridCell currentCellInternal = this.CurrentCellInternal;
                if (currentCellInternal.KeyUpUnsharesRowInternal(e, this.ptCurrentCell.Y))
                {
                    GridRow row1 = this.Rows[this.ptCurrentCell.Y];
                    this.CurrentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
                }
                else
                {
                    currentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Layout"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.LayoutEventArgs"></see> that contains the event data. </param>
        protected override void OnLayout(LayoutEventArgs e)
        {
            if (!this.gridState1[0x4000])
            {
                base.OnLayout(e);
                this.PerformLayoutPrivate(false, false, false, false);
                if (this.RightToLeftInternal)
                {
                    base.Invalidate();
                }
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Leave"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnLeave(EventArgs e)
        {
            if ((this.ptCurrentCell.X > -1) && !this.gridState1[0x40])
            {
                GridCell gridCell = null;
                this.OnCellLeave(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                if (this.ptCurrentCell.X == -1)
                {
                    return;
                }
                this.OnRowLeave(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            if (!this.gridState1[0x40])
            {
                base.OnLeave(e);
                if ((this.ptCurrentCell.X > -1) && (this.ptCurrentCell.Y > -1))
                {
                    this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                }
            }
        }

        protected override void OnLostFocus(EventArgs e)
        {
            base.OnLostFocus(e);
            if (this.ptCurrentCell.X != -1)
            {
                this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        protected override void OnMouseClick(MouseEventArgs e)
        {
            bool flag = false;
            if (((!this.gridState2[0x8000000] && !this.gridOper[0x100000]) && (!base.IsDisposed && !this.gridOper[1])) && ((!this.gridOper[2] && !this.gridOper[0x80]) && !this.gridOper[0x100]))
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if (((this.ptMouseDownCell.X == info.col) && (this.ptMouseDownCell.Y == info.row)) && (((e.Button != MouseButtons.Left) || (this.ptMouseDownCell.X == -1)) || ((this.ptMouseDownCell.Y == -1) || ((this.ptMouseDownCell.X == this.ptCurrentCell.X) && (this.ptMouseDownCell.Y == this.ptCurrentCell.Y)))))
                {
                    GridCellMouseEventArgs dgvcme = null;
                    if (((info.Type != GridHitTestType.None) && (info.Type != GridHitTestType.HorizontalScrollBar)) && (info.Type != GridHitTestType.VerticalScrollBar))
                    {
                        int localX = e.X - info.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                        }
                        dgvcme = new GridCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                        this.RecordCellMouseClick(dgvcme);
                        if (e.Button == MouseButtons.Left)
                        {
                            this.OnCellClick(new GridCellEventArgs(info.col, info.row));
                        }
                        base.OnMouseClick(e);
                        flag = true;
                        if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseClick(dgvcme);
                        }
                    }
                    else
                    {
                        base.OnMouseClick(e);
                        flag = true;
                    }
                    if (!this.gridOper[0x20])
                    {
                        switch (info.typeInternal)
                        {
                            case GridHitTestTypeInternal.ColumnHeader:
                            case GridHitTestTypeInternal.FirstColumnHeaderLeft:
                            case GridHitTestTypeInternal.ColumnHeaderLeft:
                            case GridHitTestTypeInternal.ColumnHeaderRight:
                                if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                                {
                                    this.OnColumnHeaderMouseClick(dgvcme);
                                }
                                break;

                            case GridHitTestTypeInternal.RowHeader:
                                if ((dgvcme.ColumnIndex < this.Columns.Count) && (dgvcme.RowIndex < this.Rows.Count))
                                {
                                    this.OnRowHeaderMouseClick(dgvcme);
                                }
                                break;
                        }
                    }
                }
            }
            if (!flag)
            {
                base.OnMouseClick(e);
            }
        }

        protected override void OnMouseDoubleClick(MouseEventArgs e)
        {
            base.OnMouseDoubleClick(e);
            if (((!this.gridState2[0x8000000] && !this.gridOper[1]) && (!this.gridOper[2] && !this.gridOper[0x80])) && !this.gridOper[0x100])
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if ((this.ptMouseDownCell.X == info.col) && (this.ptMouseDownCell.Y == info.row))
                {
                    GridCellMouseEventArgs args = null;
                    if (((info.Type != GridHitTestType.None) && (info.Type != GridHitTestType.HorizontalScrollBar)) && (info.Type != GridHitTestType.VerticalScrollBar))
                    {
                        int localX = e.X - info.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                        }
                        args = new GridCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                        this.OnCellMouseDoubleClick(args);
                    }
                    if (!this.gridOper[0x20])
                    {
                        switch (info.typeInternal)
                        {
                            case GridHitTestTypeInternal.ColumnHeader:
                            case GridHitTestTypeInternal.FirstColumnHeaderLeft:
                            case GridHitTestTypeInternal.ColumnHeaderLeft:
                            case GridHitTestTypeInternal.ColumnHeaderRight:
                                if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                                {
                                    this.OnColumnHeaderMouseDoubleClick(args);
                                }
                                return;

                            case GridHitTestTypeInternal.RowHeader:
                                if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                                {
                                    this.OnRowHeaderMouseDoubleClick(args);
                                }
                                return;

                            case GridHitTestTypeInternal.ColumnResizeLeft:
                            case GridHitTestTypeInternal.ColumnResizeRight:
                            {
                                int columnIndex = (info.typeInternal == GridHitTestTypeInternal.ColumnResizeRight) ? info.col : info.adjacentCol;
                                if (columnIndex < this.Columns.Count)
                                {
                                    HandledMouseEventArgs args2 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                    GridColumnDividerDoubleClickEventArgs args3 = new GridColumnDividerDoubleClickEventArgs(columnIndex, args2);
                                    this.OnColumnDividerDoubleClick(args3);
                                }
                                return;
                            }
                            case GridHitTestTypeInternal.RowResizeTop:
                            case GridHitTestTypeInternal.RowResizeBottom:
                            {
                                int rowIndex = (info.typeInternal == GridHitTestTypeInternal.RowResizeBottom) ? info.row : info.adjacentRow;
                                if (rowIndex < this.Rows.Count)
                                {
                                    HandledMouseEventArgs args6 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                    GridRowDividerDoubleClickEventArgs args7 = new GridRowDividerDoubleClickEventArgs(rowIndex, args6);
                                    this.OnRowDividerDoubleClick(args7);
                                }
                                return;
                            }
                            case GridHitTestTypeInternal.TopLeftHeader:
                                return;

                            case GridHitTestTypeInternal.TopLeftHeaderResizeLeft:
                            case GridHitTestTypeInternal.TopLeftHeaderResizeRight:
                            case GridHitTestTypeInternal.RowHeadersResizeRight:
                            case GridHitTestTypeInternal.RowHeadersResizeLeft:
                            {
                                HandledMouseEventArgs args8 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                GridColumnDividerDoubleClickEventArgs args9 = new GridColumnDividerDoubleClickEventArgs(-1, args8);
                                this.OnColumnDividerDoubleClick(args9);
                                return;
                            }
                            case GridHitTestTypeInternal.TopLeftHeaderResizeTop:
                            case GridHitTestTypeInternal.TopLeftHeaderResizeBottom:
                            case GridHitTestTypeInternal.ColumnHeadersResizeBottom:
                            case GridHitTestTypeInternal.ColumnHeadersResizeTop:
                            {
                                HandledMouseEventArgs args4 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
                                GridRowDividerDoubleClickEventArgs args5 = new GridRowDividerDoubleClickEventArgs(-1, args4);
                                this.OnRowDividerDoubleClick(args5);
                                return;
                            }
                        }
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseDown"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.Exception">The control is configured to enter edit mode when it receives focus, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        protected override void OnMouseDown(MouseEventArgs e)
        {
            if (!this.gridState2[0x8000000])
            {
                this.gridOper[0x200] = true;
            }
            base.OnMouseDown(e);
            if (!this.gridState2[0x8000000] && (this.ptMouseDownCell.X == -2))
            {
                HitTestInfo info = this.HitTest(e.X, e.Y);
                if (((info.Type != GridHitTestType.None) && (info.Type != GridHitTestType.HorizontalScrollBar)) && (info.Type != GridHitTestType.VerticalScrollBar))
                {
                    this.ptMouseDownCell.X = info.col;
                    this.ptMouseDownCell.Y = info.row;
                    this.ptMouseDownGridCoord = new Point(e.X, e.Y);
                    int localX = e.X - info.ColumnX;
                    if (this.RightToLeftInternal)
                    {
                        localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                    }
                    GridCellMouseEventArgs args = new GridCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                    this.OnCellMouseDown(args);
                }
            }
        }

        protected override void OnMouseEnter(EventArgs e)
        {
            if ((!this.gridState2[8] && !this.gridState2[0x10]) && (this.gridState2[0x20] && !this.toolTipControl.Activated))
            {
                base.OnMouseEnter(e);
            }
            this.gridState2[8] = false;
            this.gridState2[0x10] = false;
            this.gridState2[0x20] = false;
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnMouseLeave(EventArgs e)
        {
            if (this.gridState1[0x1000000])
            {
                this.gridState1[0x1000000] = false;
                this.CursorInternal = this.oldCursor;
            }
            bool mouseOverEditingControl = this.MouseOverEditingControl;
            bool mouseOverEditingPanel = this.MouseOverEditingPanel;
            bool flag3 = this.toolTipControl.Activated && base.ClientRectangle.Contains(base.PointToClient(Control.MousePosition));
            if ((!mouseOverEditingPanel && !mouseOverEditingControl) && (!flag3 && (this.ptMouseEnteredCell.X != -2)))
            {
                if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                {
                    GridCellEventArgs args = new GridCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                    this.OnCellMouseLeave(args);
                }
                else
                {
                    this.ptMouseEnteredCell.X = this.ptMouseEnteredCell.Y = -2;
                }
            }
            this.ResetTrackingState();
            this.gridOper[0x200] = false;
            if ((!mouseOverEditingPanel && !mouseOverEditingControl) && (!flag3 && !this.MouseOverScrollBar))
            {
                this.toolTipControl.Activate(false);
                base.OnMouseLeave(e);
                this.gridState2[0x20] = true;
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseMove"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data. </param>
        protected override void OnMouseMove(MouseEventArgs e)
        {
            base.OnMouseMove(e);
            HitTestInfo hti = this.HitTest(e.X, e.Y);
            this.UpdateMouseEnteredCell(hti, e);
            if (this.gridOper[1])
            {
                this.MoveRowHeadersOrColumnResize(e);
            }
            else if (this.gridOper[2])
            {
                this.MoveColumnHeadersOrRowResize(e);
            }
            else if (this.gridOper[0x20])
            {
                this.MoveColumnRelocation(e, hti);
            }
            else if (this.gridOper[0x80])
            {
                this.MoveColumnHeadersOrRowResize(e);
            }
            else if (this.gridOper[0x100])
            {
                this.MoveRowHeadersOrColumnResize(e);
            }
            if ((this.gridOper[1] || this.gridOper[0x100]) || (((((hti.typeInternal == GridHitTestTypeInternal.ColumnResizeLeft) || (hti.typeInternal == GridHitTestTypeInternal.TopLeftHeaderResizeLeft)) || ((hti.typeInternal == GridHitTestTypeInternal.TopLeftHeaderResizeRight) || (hti.typeInternal == GridHitTestTypeInternal.ColumnResizeRight))) || ((hti.typeInternal == GridHitTestTypeInternal.RowHeadersResizeLeft) || (hti.typeInternal == GridHitTestTypeInternal.RowHeadersResizeRight))) && (((!this.gridOper[0x80] && !this.gridOper[0x20]) && (!this.gridOper[4] && !this.gridOper[8])) && !this.gridOper[0x10])))
            {
                if (!this.gridState1[0x1000000])
                {
                    this.gridState1[0x1000000] = true;
                    this.oldCursor = this.Cursor;
                }
                this.CursorInternal = Cursors.SizeWE;
            }
            else if ((this.gridOper[2] || this.gridOper[0x80]) || (((((hti.typeInternal == GridHitTestTypeInternal.RowResizeBottom) || (hti.typeInternal == GridHitTestTypeInternal.TopLeftHeaderResizeTop)) || ((hti.typeInternal == GridHitTestTypeInternal.TopLeftHeaderResizeBottom) || (hti.typeInternal == GridHitTestTypeInternal.RowResizeTop))) || ((hti.typeInternal == GridHitTestTypeInternal.ColumnHeadersResizeTop) || (hti.typeInternal == GridHitTestTypeInternal.ColumnHeadersResizeBottom))) && (((!this.gridOper[0x100] && !this.gridOper[0x20]) && (!this.gridOper[4] && !this.gridOper[8])) && !this.gridOper[0x10])))
            {
                if (!this.gridState1[0x1000000])
                {
                    this.gridState1[0x1000000] = true;
                    this.oldCursor = this.Cursor;
                }
                this.CursorInternal = Cursors.SizeNS;
            }
            else
            {
                if (this.gridState1[0x1000000])
                {
                    this.gridState1[0x1000000] = false;
                    this.CursorInternal = this.oldCursor;
                }
                if ((this.gridOper[4] || this.gridOper[8]) || this.gridOper[0x10])
                {
                    int num;
                    int num2;
                    int x = e.X;
                    int y = e.Y;
                    if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
                    {
                        if (num == 0)
                        {
                            if ((this.horizScrollTimer != null) && this.horizScrollTimer.Enabled)
                            {
                                this.horizScrollTimer.Enabled = false;
                            }
                        }
                        else if ((this.horizScrollTimer == null) || !this.horizScrollTimer.Enabled)
                        {
                            this.HorizScrollTimer.Interval = GetColumnScrollRate(Math.Abs(num));
                            this.HorizScrollTimer.Enabled = true;
                        }
                        if (num2 == 0)
                        {
                            if ((this.vertScrollTimer != null) && this.vertScrollTimer.Enabled)
                            {
                                this.vertScrollTimer.Enabled = false;
                            }
                        }
                        else if ((this.vertScrollTimer == null) || !this.vertScrollTimer.Enabled)
                        {
                            this.VertScrollTimer.Interval = GetRowScrollRate(Math.Abs(num2));
                            this.VertScrollTimer.Enabled = true;
                        }
                        if (this.HorizScrollTimer.Enabled || this.VertScrollTimer.Enabled)
                        {
                            return;
                        }
                        if (((hti.Type != GridHitTestType.None) && (hti.Type != GridHitTestType.HorizontalScrollBar)) && (hti.Type != GridHitTestType.VerticalScrollBar))
                        {
                            if (this.gridOper[4] && (hti.col >= 0))
                            {
                                this.OnColumnSelectMouseMove(hti);
                            }
                            else if (this.gridOper[8] && (hti.row >= 0))
                            {
                                this.OnRowSelectMouseMove(hti);
                            }
                            else if ((this.gridOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                }
                if (!this.toolTipControl.Activated)
                {
                    this.ptToolTipCell = new Point(-1, -1);
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.MouseUp"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs"></see> that contains the event data. </param>
        protected override void OnMouseUp(MouseEventArgs e)
        {
            if (!this.gridState2[0x8000000])
            {
                this.gridState1[0x800] = false;
                HitTestInfo hti = this.HitTest(e.X, e.Y);
                if (((!this.gridOper[1] && !this.gridOper[2]) && (!this.gridOper[0x20] && !this.gridOper[0x80])) && !this.gridOper[0x100])
                {
                    if (((hti.Type != GridHitTestType.None) && (hti.Type != GridHitTestType.HorizontalScrollBar)) && (hti.Type != GridHitTestType.VerticalScrollBar))
                    {
                        GridCellMouseEventArgs args;
                        int localX = e.X - hti.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            localX += (hti.col == -1) ? this.RowHeadersWidth : this.Columns[hti.col].Thickness;
                        }
                        if (this.gridState2[0x800000])
                        {
                            MouseEventArgs args2 = new MouseEventArgs(e.Button, 2, e.X, e.Y, e.Delta);
                            args = new GridCellMouseEventArgs(hti.col, hti.row, localX, e.Y - hti.RowY, args2);
                        }
                        else
                        {
                            args = new GridCellMouseEventArgs(hti.col, hti.row, localX, e.Y - hti.RowY, e);
                        }
                        if ((((hti.col >= 0) && (this.ptMouseDownCell.X == hti.col)) && ((hti.row >= 0) && (this.ptMouseDownCell.Y == hti.row))) && ((this.EditMode == GridEditMode.EditOnEnter) && (this.editingControl != null)))
                        {
                            this.OnClick(e);
                            this.OnMouseClick(e);
                        }
                        this.CorrectFocus(true);
                        if ((args.ColumnIndex < this.Columns.Count) && (args.RowIndex < this.Rows.Count))
                        {
                            this.OnCellMouseUp(args);
                        }
                    }
                    else if (hti.Type == GridHitTestType.None)
                    {
                        this.CorrectFocus(true);
                    }
                }
                else
                {
                    if (this.gridOper[1])
                    {
                        this.EndColumnResize(e);
                    }
                    if (this.gridOper[2])
                    {
                        this.EndRowResize(e);
                    }
                    if (this.gridOper[0x20])
                    {
                        this.EndColumnRelocation(e, hti);
                    }
                    if (this.gridOper[0x80])
                    {
                        this.EndColumnHeadersResize(e);
                    }
                    if (this.gridOper[0x100])
                    {
                        this.EndRowHeadersResize(e);
                    }
                    this.CorrectFocus(true);
                    hti = this.HitTest(e.X, e.Y);
                    if (((hti.Type != GridHitTestType.None) && (hti.Type != GridHitTestType.HorizontalScrollBar)) && (hti.Type != GridHitTestType.VerticalScrollBar))
                    {
                        int num2 = e.X - hti.ColumnX;
                        if (this.RightToLeftInternal)
                        {
                            num2 += (hti.col == -1) ? this.RowHeadersWidth : this.Columns[hti.col].Thickness;
                        }
                        this.OnCellMouseUp(new GridCellMouseEventArgs(hti.col, hti.row, num2, e.Y - hti.RowY, e));
                    }
                }
                this.ResetTrackingState();
            }
            base.OnMouseUp(e);
        }

        protected override void OnMouseWheel(MouseEventArgs e)
        {
            base.OnMouseWheel(e);
            HandledMouseEventArgs args = e as HandledMouseEventArgs;
            if (((args == null) || !args.Handled) && (((Control.ModifierKeys & (Keys.Alt | Keys.Shift)) == Keys.None) && (Control.MouseButtons == MouseButtons.None)))
            {
                bool flag = (Control.ModifierKeys & Keys.Control) == Keys.None;
                System.Windows.Forms.ScrollBar bar = flag ? ((System.Windows.Forms.ScrollBar) this.vertScrollBar) : ((System.Windows.Forms.ScrollBar) this.horizScrollBar);
                if (bar.Visible && bar.Enabled)
                {
                    if (args != null)
                    {
                        args.Handled = true;
                    }
                    int mouseWheelScrollLines = SystemInformation.MouseWheelScrollLines;
                    if (mouseWheelScrollLines != 0)
                    {
                        float num2;
                        if (flag)
                        {
                            this.cumulativeVerticalWheelDelta += e.Delta;
                            num2 = ((float) this.cumulativeVerticalWheelDelta) / 120f;
                        }
                        else
                        {
                            this.cumulativeHorizontalWheelDelta += e.Delta;
                            num2 = ((float) this.cumulativeHorizontalWheelDelta) / 120f;
                        }
                        int num3 = (int) num2;
                        if (mouseWheelScrollLines == -1)
                        {
                            if ((num3 != 0) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, false, false)))
                            {
                                if (flag)
                                {
                                    int verticalOffset = this.VerticalOffset;
                                    this.VerticalOffset -= num3 * this.vertScrollBar.LargeChange;
                                    if (Math.Abs((int) (this.VerticalOffset - verticalOffset)) >= Math.Abs((int) (num3 * this.vertScrollBar.LargeChange)))
                                    {
                                        this.cumulativeVerticalWheelDelta -= num3 * 120;
                                    }
                                    else
                                    {
                                        this.cumulativeVerticalWheelDelta = 0;
                                    }
                                }
                                else
                                {
                                    int horizontalOffset = this.HorizontalOffset;
                                    this.HorizontalOffset -= num3 * this.horizScrollBar.LargeChange;
                                    if (Math.Abs((int) (this.HorizontalOffset - horizontalOffset)) >= Math.Abs((int) (num3 * this.horizScrollBar.LargeChange)))
                                    {
                                        this.cumulativeHorizontalWheelDelta -= num3 * 120;
                                    }
                                    else
                                    {
                                        this.cumulativeHorizontalWheelDelta = 0;
                                    }
                                }
                            }
                        }
                        else
                        {
                            int num6 = (int) (mouseWheelScrollLines * num2);
                            if ((num6 != 0) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, false, false)))
                            {
                                int num7;
                                if (flag)
                                {
                                    if (num6 > 0)
                                    {
                                        for (num7 = num6; (this.vertScrollBar.Value != this.vertScrollBar.Minimum) && (num7 > 0); num7--)
                                        {
                                            this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
                                        }
                                        if (this.vertScrollBar.Value == this.vertScrollBar.Minimum)
                                        {
                                            this.cumulativeVerticalWheelDelta = 0;
                                        }
                                        else
                                        {
                                            this.cumulativeVerticalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                        }
                                    }
                                    else
                                    {
                                        num7 = -num6;
                                        int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                                        while ((num7 > 0) && ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) <= (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))))
                                        {
                                            this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
                                            num7--;
                                        }
                                        if ((this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow)) > (this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight)))
                                        {
                                            this.cumulativeVerticalWheelDelta = 0;
                                        }
                                        else
                                        {
                                            this.cumulativeVerticalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                        }
                                    }
                                }
                                else
                                {
                                    int minimum;
                                    int num10;
                                    if (num6 > 0)
                                    {
                                        minimum = this.horizScrollBar.Minimum;
                                        num10 = -1;
                                    }
                                    else
                                    {
                                        minimum = this.horizScrollBar.Maximum;
                                        num10 = 1;
                                    }
                                    for (num7 = Math.Abs(num6); (this.horizScrollBar.Value != minimum) && (num7 > 0); num7--)
                                    {
                                        this.ScrollColumns(num10);
                                    }
                                    if (this.horizScrollBar.Value == minimum)
                                    {
                                        this.cumulativeHorizontalWheelDelta = 0;
                                    }
                                    else
                                    {
                                        this.cumulativeHorizontalWheelDelta -= (int) (num6 * (120f / ((float) mouseWheelScrollLines)));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        internal void OnMouseWheelInternal(MouseEventArgs e)
        {
            this.OnMouseWheel(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.MultiSelectChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnMultiSelectChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridMULTISELECTCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.NewRowNeeded"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnNewRowNeeded(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            GridRowEventHandler handler = base.Events[EVENT_gridNEWROWNEEDED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Paint"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.Exception">Any exceptions that occur during this method are ignored unless they are one of the following exceptions:<see cref="T:System.NullReferenceException"></see><see cref="T:System.StackOverflowException"></see><see cref="T:System.OutOfMemoryException"></see><see cref="T:System.Threading.ThreadAbortException"></see><see cref="T:System.ExecutionEngineException"></see><see cref="T:System.IndexOutOfRangeException"></see><see cref="T:System.AccessViolationException"></see></exception>
        protected override void OnPaint(PaintEventArgs e)
        {
            try
            {
                if (this.layout.dirty)
                {
                    this.PerformLayoutPrivate(false, true, false, false);
                }
                Graphics graphics = e.Graphics;
                bool singleVerticalBorderAdded = false;
                bool singleHorizontalBorderAdded = false;
                Rectangle clipRectangle = e.ClipRectangle;
                Rectangle data = this.layout.Data;
                if (this.layout.RowHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.RowHeaders);
                }
                else if (this.SingleVerticalBorderAdded)
                {
                    singleVerticalBorderAdded = true;
                    if (!this.RightToLeftInternal)
                    {
                        data.X--;
                    }
                    data.Width++;
                }
                if (this.layout.ColumnHeadersVisible)
                {
                    data = Rectangle.Union(data, this.layout.ColumnHeaders);
                }
                else if (this.SingleHorizontalBorderAdded)
                {
                    singleHorizontalBorderAdded = true;
                    if (data.Y == this.layout.Data.Y)
                    {
                        data.Y--;
                        data.Height++;
                    }
                }
                if (this.currentRowSplitBar != -1)
                {
                    clipRectangle = Rectangle.Union(clipRectangle, this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
                }
                else if (this.currentColSplitBar != -1)
                {
                    clipRectangle = Rectangle.Union(clipRectangle, this.CalcColResizeFeedbackRect(this.currentColSplitBar));
                }
                if (clipRectangle.IntersectsWith(data))
                {
                    using (Region region = graphics.Clip)
                    {
                        graphics.SetClip(data);
                        this.PaintBackground(graphics, clipRectangle, data);
                        this.PaintGrid(graphics, data, clipRectangle, singleVerticalBorderAdded, singleHorizontalBorderAdded);
                        graphics.Clip = region;
                    }
                }
                this.PaintBorder(graphics, clipRectangle, this.layout.ClientRectangle);
                if (clipRectangle.IntersectsWith(this.layout.ResizeBoxRect))
                {
                    graphics.FillRectangle(SystemBrushes.Control, this.layout.ResizeBoxRect);
                }
                base.OnPaint(e);
            }
            catch (Exception exception)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                {
                    throw;
                }
            }
        }

        //internal override void OnParentBecameInvisible()
        //{
        //    base.OnParentBecameInvisible();
        //    if (base.GetState(2))
        //    {
        //        this.OnVisibleChangedPrivate();
        //    }
        //}

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.ReadOnlyChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.InvalidCastException">The control changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        protected virtual void OnReadOnlyChanged(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridREADONLYCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            base.VerifyImeRestrictedModeChanged();
            if ((((!this.ReadOnly && (this.ptCurrentCell.X != -1)) && (this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))) && !this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X].ReadOnly)
            {
                this.BeginEditInternal(true);
            }
        }

        internal void OnRemovedColumn_PostNotification(GridColumn gridColumn, Point newCurrentCell)
        {
            if (newCurrentCell.X != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
            this.FlushSelectionChanged();
            this.OnColumnHidden(gridColumn);
            GridAutoSizeColumnMode inheritedAutoSizeMode = gridColumn.GetInheritedAutoSizeMode(this);
            if (((inheritedAutoSizeMode != GridAutoSizeColumnMode.None) && (inheritedAutoSizeMode != GridAutoSizeColumnMode.Fill)) && (gridColumn.ThicknessInternal != gridColumn.CachedThickness))
            {
                gridColumn.ThicknessInternal = Math.Max(gridColumn.MinimumWidth, gridColumn.CachedThickness);
            }
            this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
        }

        internal void OnRemovedColumn_PreNotification(GridColumn gridColumn)
        {
            if (gridColumn.HasHeaderCell)
            {
                gridColumn.HeaderCell.SortGlyphDirectionInternal = System.Windows.Forms.SortOrder.None;
            }
            this.CorrectColumnIndexesAfterDeletion(gridColumn);
            this.CorrectColumnDisplayIndexesAfterDeletion(gridColumn);
            this.displayedBandsInfo.CorrectRowIndexAfterDeletion(gridColumn.Index);
            this.OnColumnRemoved(gridColumn);
        }

        internal void OnRemovedRow_PostNotification(GridRow gridRow, Point newCurrentCell)
        {
            if (newCurrentCell.Y != -1)
            {
                this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
            }
            this.FlushSelectionChanged();
            bool flag = (gridRow.Grid == null) && gridRow.Displayed;
            if (flag)
            {
                gridRow.DisplayedInternal = false;
                GridRowStateChangedEventArgs e = new GridRowStateChangedEventArgs(gridRow, GridElementStates.Displayed);
                this.OnRowStateChanged(-1, e);
            }
            if ((this.autoSizeRowsMode != GridAutoSizeRowsMode.None) && (gridRow.ThicknessInternal != gridRow.CachedThickness))
            {
                gridRow.ThicknessInternal = Math.Max(gridRow.MinimumHeight, gridRow.CachedThickness);
            }
            GridAutoSizeColumnCriteriaInternal allRows = GridAutoSizeColumnCriteriaInternal.AllRows;
            if (flag)
            {
                allRows |= GridAutoSizeColumnCriteriaInternal.DisplayedRows;
            }
            bool flag2 = this.AutoResizeAllVisibleColumnsInternal(allRows, true);
            bool flag3 = this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize;
            bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing);
            if (fixedRowHeadersWidth && !flag2)
            {
                flag3 = true;
            }
            if (!flag3)
            {
                this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
            }
            if (!fixedRowHeadersWidth)
            {
                this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
            }
            if (!flag3 && !fixedRowHeadersWidth)
            {
                this.AutoResizeColumnHeadersHeight(true, true);
            }
        }

        internal void OnRemovedRow_PreNotification(int rowIndexDeleted)
        {
            this.displayedBandsInfo.CorrectRowIndexAfterDeletion(rowIndexDeleted);
            this.CorrectRowIndexesAfterDeletion(rowIndexDeleted);
            this.ComputeVisibleRows();
        }

        internal unsafe void OnRemovingColumn(GridColumn gridColumn, out Point newCurrentCell, bool force)
        {
            //ref 
            BitVector32 vectorRef;
            this.gridState1[0x400000] = false;
            int index = gridColumn.Index;
            if (this.ptCurrentCell.X != -1)
            {
                int x = this.ptCurrentCell.X;
                if (index == this.ptCurrentCell.X)
                {
                    GridColumn column = this.Columns.GetNextColumn(this.Columns[index], GridElementStates.Visible, GridElementStates.None);
                    if (column != null)
                    {
                        if (column.Index > index)
                        {
                            x = column.Index - 1;
                        }
                        else
                        {
                            x = column.Index;
                        }
                    }
                    else
                    {
                        GridColumn column2 = this.Columns.GetPreviousColumn(this.Columns[index], GridElementStates.Visible, GridElementStates.None);
                        if (column2 != null)
                        {
                            if (column2.Index > index)
                            {
                                x = column2.Index - 1;
                            }
                            else
                            {
                                x = column2.Index;
                            }
                        }
                        else
                        {
                            x = -1;
                        }
                    }
                }
                else if (index < this.ptCurrentCell.X)
                {
                    x = this.ptCurrentCell.X - 1;
                }
                newCurrentCell = new Point(x, (x == -1) ? -1 : this.ptCurrentCell.Y);
                if (index == this.ptCurrentCell.X)
                {
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else if (force)
                {
                    this.gridState1[0x400000] = true;
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else
                {
                    this.ResetCurrentCell();
                }
            }
            else
            {
                newCurrentCell = new Point(-1, -1);
            }
            if (this.Columns.Count == 1)
            {
                this.Rows.ClearInternal(false);
            }
            int num3 = this.Columns.Count - 1;
            for (int i = 0; i < this.Rows.Count; i++)
            {
                GridRow row = this.Rows.SharedRow(i);
                if (row.Cells.Count > num3)
                {
                    row.Cells.RemoveAtInternal(index);
                }
            }
            if (gridColumn.HasHeaderCell)
            {
                gridColumn.HeaderCell.GridInternal = null;
            }
            if (gridColumn == this.sortedColumn)
            {
                this.sortedColumn = null;
                this.sortOrder = System.Windows.Forms.SortOrder.None;
                if (gridColumn.IsDataBound)
                {
                    for (int j = 0; j < this.Columns.Count; j++)
                    {
                        if (((gridColumn != this.Columns[j]) && (this.Columns[j].SortMode != GridColumnSortMode.NotSortable)) && (string.Compare(gridColumn.DataPropertyName, this.Columns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                        {
                            this.sortedColumn = this.Columns[j];
                            this.sortOrder = this.Columns[j].HeaderCell.SortGlyphDirection;
                            break;
                        }
                    }
                }
            }
            if ((gridColumn.Visible && !gridColumn.Frozen) && (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0))
            {
                if (this.displayedBandsInfo.FirstDisplayedScrollingCol == gridColumn.Index)
                {
                    this.horizontalOffset -= this.negOffset;
                    this.negOffset = 0;
                }
                else if (this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, gridColumn.Index))
                {
                    if (this.horizScrollBar.Enabled)
                    {
                        int num6 = (this.horizScrollBar.Maximum - this.horizScrollBar.LargeChange) - gridColumn.Thickness;
                        if ((num6 >= 0) && (num6 < this.horizScrollBar.Value))
                        {
                            this.horizontalOffset = num6;
                            this.negOffset = this.GetNegOffsetFromHorizontalOffset(this.horizontalOffset);
                        }
                    }
                    else
                    {
                        this.horizontalOffset = this.negOffset = 0;
                    }
                }
                else
                {
                    this.horizontalOffset -= gridColumn.Thickness;
                }
                if (this.horizScrollBar.Enabled)
                {
                    this.horizScrollBar.Value = this.horizontalOffset;
                }
            }
            bool flag = false;
            switch (this.SelectionMode)
            {
                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int num8 = 0;
                    while (num8 < count)
                    {
                        int num9 = this.selectedBandIndexes[num8];
                        if (index == num9)
                        {
                            this.selectedBandIndexes.RemoveAt(num8);
                            count--;
                            flag = true;
                        }
                        else
                        {
                            if (index < num9)
                            {
                                this.selectedBandIndexes[num8] = num9 - 1;
                            }
                            num8++;
                        }
                    }
                    break;
                }
            }
            (vectorRef = (BitVector32) &this.gridState2)[0x40000] = vectorRef[0x40000] | ((this.individualSelectedCells.RemoveAllCellsAtBand(true, index) > 0) || flag);
            this.individualReadOnlyCells.RemoveAllCellsAtBand(true, index);
        }

        internal unsafe void OnRemovingRow(int rowIndexDeleted, out Point newCurrentCell, bool force)
        {
            //ref 
            BitVector32 vectorRef;
            this.gridState1[0x400000] = false;
            newCurrentCell = new Point(-1, -1);
            if ((this.ptCurrentCell.Y != -1) && (rowIndexDeleted <= this.ptCurrentCell.Y))
            {
                int num;
                if (rowIndexDeleted == this.ptCurrentCell.Y)
                {
                    int previousRow = this.Rows.GetPreviousRow(rowIndexDeleted, GridElementStates.Visible);
                    int nextRow = this.Rows.GetNextRow(rowIndexDeleted, GridElementStates.Visible);
                    if ((previousRow > -1) && this.AllowUserToAddRowsInternal)
                    {
                        if ((nextRow > -1) && (nextRow < (this.Rows.Count - 1)))
                        {
                            num = nextRow - 1;
                        }
                        else
                        {
                            num = previousRow;
                        }
                    }
                    else if (nextRow > -1)
                    {
                        num = nextRow - 1;
                    }
                    else
                    {
                        num = previousRow;
                    }
                    this.IsCurrentCellDirtyInternal = false;
                    this.IsCurrentRowDirtyInternal = false;
                }
                else
                {
                    num = this.ptCurrentCell.Y - 1;
                }
                newCurrentCell = new Point(this.ptCurrentCell.X, num);
                if (rowIndexDeleted == this.ptCurrentCell.Y)
                {
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else if (force)
                {
                    this.gridState1[0x400000] = true;
                    this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                }
                else
                {
                    this.ResetCurrentCell();
                }
            }
            bool flag = false;
            switch (this.SelectionMode)
            {
                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                {
                    int count = this.selectedBandIndexes.Count;
                    int index = 0;
                    while (index < count)
                    {
                        int num6 = this.selectedBandIndexes[index];
                        if (rowIndexDeleted == num6)
                        {
                            flag = true;
                            this.selectedBandIndexes.RemoveAt(index);
                            count--;
                        }
                        else
                        {
                            if (rowIndexDeleted < num6)
                            {
                                this.selectedBandIndexes[index] = num6 - 1;
                            }
                            index++;
                        }
                    }
                    if (this.selectedBandSnapshotIndexes != null)
                    {
                        count = this.selectedBandSnapshotIndexes.Count;
                        index = 0;
                        while (index < count)
                        {
                            int num7 = this.selectedBandSnapshotIndexes[index];
                            if (rowIndexDeleted == num7)
                            {
                                this.selectedBandSnapshotIndexes.RemoveAt(index);
                                count--;
                            }
                            else
                            {
                                if (rowIndexDeleted < num7)
                                {
                                    this.selectedBandSnapshotIndexes[index] = num7 - 1;
                                }
                                index++;
                            }
                        }
                    }
                    break;
                }
            }
            (vectorRef = (BitVector32) &this.gridState2)[0x40000] = vectorRef[0x40000] | ((this.individualSelectedCells.RemoveAllCellsAtBand(false, rowIndexDeleted) > 0) || flag);
            this.individualReadOnlyCells.RemoveAllCellsAtBand(false, rowIndexDeleted);
        }

        internal void OnReplacedCell(GridRow gridRow, int columnIndex)
        {
            GridCell gridCell = gridRow.Cells[columnIndex];
            if (this.gridState2[0x10000])
            {
                this.individualSelectedCells.Add(gridCell);
            }
            if (this.gridState2[0x20000])
            {
                this.individualReadOnlyCells.Add(gridCell);
            }
            this.OnCellCommonChange(columnIndex, gridRow.Index);
            if (this.ptCurrentCellCache.X != -1)
            {
                if (!this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, false, false, false);
                }
                this.ptCurrentCellCache.X = -1;
                this.ptCurrentCellCache.Y = -1;
            }
        }

        internal void OnReplacingCell(GridRow gridRow, int columnIndex)
        {
            if ((this.ptCurrentCell.X == gridRow.Index) && (this.ptCurrentCell.Y == columnIndex))
            {
                this.ptCurrentCellCache.X = this.ptCurrentCell.X;
                this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
                this.ResetCurrentCell();
            }
            else
            {
                this.ptCurrentCellCache.X = -1;
                this.ptCurrentCellCache.Y = -1;
            }
            GridCell gridCell = gridRow.Cells[columnIndex];
            this.gridState2[0x10000] = this.individualSelectedCells.Contains(gridCell);
            if (this.gridState2[0x10000])
            {
                this.individualSelectedCells.Remove(gridCell);
            }
            this.gridState2[0x20000] = this.individualReadOnlyCells.Contains(gridCell);
            if (this.gridState2[0x20000])
            {
                this.individualReadOnlyCells.Remove(gridCell);
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Resize"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected override void OnResize(EventArgs e)
        {
            int borderWidth = this.BorderWidth;
            Rectangle clientRectangle = this.layout.ClientRectangle;
            Rectangle rc = new Rectangle((clientRectangle.X + clientRectangle.Width) - borderWidth, clientRectangle.Y, borderWidth, clientRectangle.Height);
            Rectangle rectangle2 = new Rectangle(clientRectangle.X, (clientRectangle.Y + clientRectangle.Height) - borderWidth, clientRectangle.Width, borderWidth);
            if (!this.IsMinimized)
            {
                this.normalClientRectangle = base.ClientRectangle;
            }
            Rectangle normalClientRectangle = this.normalClientRectangle;
            if (normalClientRectangle.Width != clientRectangle.Width)
            {
                base.Invalidate(rc);
                rc = new Rectangle((normalClientRectangle.X + normalClientRectangle.Width) - borderWidth, normalClientRectangle.Y, borderWidth, normalClientRectangle.Height);
                base.Invalidate(rc);
            }
            if (normalClientRectangle.Height != clientRectangle.Height)
            {
                base.Invalidate(rectangle2);
                rectangle2 = new Rectangle(normalClientRectangle.X, (normalClientRectangle.Y + normalClientRectangle.Height) - borderWidth, normalClientRectangle.Width, borderWidth);
                base.Invalidate(rectangle2);
            }
            if (!this.layout.ResizeBoxRect.IsEmpty)
            {
                base.Invalidate(this.layout.ResizeBoxRect);
            }
            this.layout.ClientRectangle = normalClientRectangle;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            base.OnResize(e);
            if (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
            {
                base.Invalidate();
            }
        }

        protected override void OnRightToLeftChanged(EventArgs e)
        {
            this.gridState2[0x1000] = false;
            base.OnRightToLeftChanged(e);
            this.CorrectFocus(true);
            this.PerformLayoutPrivate(false, false, true, false);
        }

        internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, GridRow gridRow, int rowIndex)
        {
            if (((recreateNewRow && (cca == CollectionChangeAction.Refresh)) && ((this.Columns.Count != 0) && (this.Rows.Count == 0))) && this.AllowUserToAddRowsInternal)
            {
                this.AddNewRow(false);
            }
            if (cca == CollectionChangeAction.Refresh)
            {
                this.FlushSelectionChanged();
            }
            if ((((cca == CollectionChangeAction.Refresh) || (cca == CollectionChangeAction.Add)) && ((this.ptCurrentCell.X == -1) && allowSettingCurrentCell)) && !this.InSortOperation)
            {
                this.MakeFirstDisplayedCellCurrentCell(false);
            }
            if (this.AutoSize)
            {
                bool flag = true;
                switch (cca)
                {
                    case CollectionChangeAction.Add:
                        flag = (this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) != GridElementStates.None;
                        break;

                    case CollectionChangeAction.Remove:
                        flag = (gridRow.Grid == null) && gridRow.Visible;
                        break;
                }
                if (flag)
                {
                    LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowContextMenuStripChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowContextMenuStripChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            GridRowEventHandler handler = base.Events[EVENT_gridROWCONTEXTMENUSTRIPCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowContextMenuStripNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowContextMenuStripNeededEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowContextMenuStripNeeded(GridRowContextMenuStripNeededEventArgs e)
        {
            GridRowContextMenuStripNeededEventHandler handler = base.Events[EVENT_gridROWCONTEXTMENUSTRIPNEEDED] as GridRowContextMenuStripNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip)
        {
            GridRowContextMenuStripNeededEventArgs e = new GridRowContextMenuStripNeededEventArgs(rowIndex, contextMenuStrip);
            this.OnRowContextMenuStripNeeded(e);
            return e.ContextMenuStrip;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowDefaultCellStyleChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
            GridRowEventHandler handler = base.Events[EVENT_gridROWDEFAULTCELLSTYLECHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowDirtyStateNeeded"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.QuestionEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e)
        {
            QuestionEventHandler handler = base.Events[EVENT_gridROWDIRTYSTATENEEDED] as QuestionEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowDividerDoubleClick"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowDividerDoubleClickEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowDividerDoubleClick(GridRowDividerDoubleClickEventArgs e)
        {
            GridRowDividerDoubleClickEventHandler handler = base.Events[EVENT_gridROWDIVIDERDOUBLECLICK] as GridRowDividerDoubleClickEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if ((!e.Handled && (e.Button == MouseButtons.Left)) && (e.RowIndex < this.Rows.Count))
            {
                if (e.RowIndex == -1)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
                else if (this.autoSizeRowsMode == GridAutoSizeRowsMode.None)
                {
                    this.AutoResizeRowInternal(e.RowIndex, GridAutoSizeRowMode.AllCells, true, true);
                }
                else
                {
                    this.AutoResizeRowInternal(e.RowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowDividerHeightChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowDividerHeightChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
            GridRowEventHandler handler = base.Events[EVENT_gridROWDIVIDERHEIGHTCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowEnter"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowEnter(GridCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridROWENTER] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowEnter(ref GridCell gridCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred)
        {
            if (!validationFailureOccurred)
            {
                this.gridState1[0x80000] = false;
            }
            if ((rowIndex < this.Rows.Count) && (columnIndex < this.Columns.Count))
            {
                bool flag = false;
                if ((!validationFailureOccurred && this.AllowUserToAddRowsInternal) && (this.newRowIndex == rowIndex))
                {
                    this.gridState1[0x80000] = true;
                    if (canCreateNewRow)
                    {
                        GridRowEventArgs args = new GridRowEventArgs(this.Rows[this.newRowIndex]);
                        if (this.VirtualMode || (this.DataSource != null))
                        {
                            if ((this.dataConnection != null) && this.dataConnection.InterestedInRowEvents)
                            {
                                this.dataConnection.OnNewRowNeeded();
                                flag = true;
                            }
                            if (this.VirtualMode)
                            {
                                this.OnNewRowNeeded(args);
                            }
                        }
                        if (this.AllowUserToAddRowsInternal)
                        {
                            this.OnDefaultValuesNeeded(args);
                            this.InvalidateRowPrivate(this.newRowIndex);
                        }
                    }
                }
                if (flag && (rowIndex > (this.Rows.Count - 1)))
                {
                    rowIndex = Math.Min(rowIndex, this.Rows.Count - 1);
                }
                GridCellEventArgs e = new GridCellEventArgs(columnIndex, rowIndex);
                this.OnRowEnter(e);
                if ((((this.dataConnection != null) && this.dataConnection.InterestedInRowEvents) && (!this.dataConnection.PositionChangingOutsideGrid && !this.dataConnection.ListWasReset)) && (!flag || (this.dataConnection.List.Count > 0)))
                {
                    this.dataConnection.OnRowEnter(e);
                }
                if (gridCell != null)
                {
                    if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        gridCell = null;
                    }
                    else
                    {
                        gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                    }
                }
            }
        }

        internal void OnRowErrorTextChanged(GridRow gridRow)
        {
            GridRowEventArgs e = new GridRowEventArgs(gridRow);
            this.OnRowErrorTextChanged(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowErrorTextChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowErrorTextChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            this.UpdateRowErrorText(e.Row.Index);
            GridRowEventHandler handler = base.Events[EVENT_gridROWERRORTEXTCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowErrorTextNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowErrorTextNeededEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowErrorTextNeeded(GridRowErrorTextNeededEventArgs e)
        {
            GridRowErrorTextNeededEventHandler handler = base.Events[EVENT_gridROWERRORTEXTNEEDED] as GridRowErrorTextNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal string OnRowErrorTextNeeded(int rowIndex, string errorText)
        {
            GridRowErrorTextNeededEventArgs e = new GridRowErrorTextNeededEventArgs(rowIndex, errorText);
            this.OnRowErrorTextNeeded(e);
            return e.ErrorText;
        }

        private void OnRowGlobalAutoSize(int rowIndex)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & GridElementStates.Visible) != GridElementStates.None)
            {
                this.InvalidateRowPrivate(rowIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    GridAutoSizeRowsModeInternal autoSizeRowsMode = (GridAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                    bool flag = false;
                    bool flag2 = (rowState & GridElementStates.Displayed) != GridElementStates.None;
                    if ((autoSizeRowsMode != GridAutoSizeRowsModeInternal.None) && (((autoSizeRowsMode & GridAutoSizeRowsModeInternal.DisplayedRows) == GridAutoSizeRowsModeInternal.None) || flag2))
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                        flag = true;
                    }
                    GridAutoSizeColumnCriteriaInternal allRows = GridAutoSizeColumnCriteriaInternal.AllRows;
                    if (flag2)
                    {
                        allRows |= GridAutoSizeColumnCriteriaInternal.DisplayedRows;
                    }
                    this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                    bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing);
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
                    }
                    if (!fixedRowHeadersWidth)
                    {
                        this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                    }
                    if (flag)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    if ((this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize) && !fixedRowHeadersWidth)
                    {
                        this.AutoResizeColumnHeadersHeight(true, true);
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeaderCellChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowHeaderCellChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            this.OnRowHeaderGlobalAutoSize(e.Row.Index);
            GridRowEventHandler handler = base.Events[EVENT_gridROWHEADERCELLCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeaderGlobalAutoSize(int rowIndex)
        {
            if (this.RowHeadersVisible)
            {
                this.InvalidateCellPrivate(-1, rowIndex);
                if (this.noAutoSizeCount <= 0)
                {
                    bool flag = false;
                    if (rowIndex != -1)
                    {
                        flag = (this.Rows.GetRowState(rowIndex) & GridElementStates.Displayed) != GridElementStates.None;
                    }
                    bool fixedColumnHeadersHeight = (rowIndex != -1) || (this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize);
                    bool fixedRowHeight = ((rowIndex == -1) || ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 1)) == GridAutoSizeRowsMode.None)) || ((((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 8)) != GridAutoSizeRowsMode.None) && (rowIndex != -1)) && !flag);
                    bool flag4 = false;
                    if ((((this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.AutoSizeToAllHeaders) || (((this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders) && (rowIndex != -1)) && flag)) || (((this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing)) && (rowIndex == -1))) || (((this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.AutoSizeToFirstHeader) && (rowIndex != -1)) && (rowIndex == this.Rows.GetFirstRow(GridElementStates.Visible))))
                    {
                        this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, fixedColumnHeadersHeight, fixedRowHeight);
                        flag4 = true;
                    }
                    if (!fixedColumnHeadersHeight)
                    {
                        this.AutoResizeColumnHeadersHeight(-1, true, true);
                    }
                    if (!fixedRowHeight)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    if (flag4 && (!fixedColumnHeadersHeight || !fixedRowHeight))
                    {
                        this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeaderMouseClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains information about the mouse and the header cell that was clicked.</param>
        protected virtual void OnRowHeaderMouseClick(GridCellMouseEventArgs e)
        {
            GridCellMouseEventHandler handler = base.Events[EVENT_gridROWHEADERMOUSECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeaderMouseDoubleClick"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellMouseEventArgs"></see> that contains information about the mouse and the header cell that was double-clicked.</param>
        protected virtual void OnRowHeaderMouseDoubleClick(GridCellMouseEventArgs e)
        {
            GridCellMouseEventHandler handler = base.Events[EVENT_gridROWHEADERMOUSEDOUBLECLICK] as GridCellMouseEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeaderMouseDown(HitTestInfo hti, bool isShiftDown, bool isControlDown)
        {
            this.noSelectionChangeCount++;
            try
            {
                GridColumn firstColumn;
                int x;
                int y;
                GridCell cell;
                bool flag2;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        return;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                    {
                        bool flag = true;
                        if (isControlDown && ((this.Rows.GetRowState(hti.row) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            flag = false;
                        }
                        if (!flag)
                        {
                            goto Label_03F4;
                        }
                        firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                        if ((firstColumn == null) || (hti.row == this.ptCurrentCell.Y))
                        {
                            goto Label_01D4;
                        }
                        x = this.ptCurrentCell.X;
                        y = this.ptCurrentCell.Y;
                        if (this.EndEdit(GridDataErrorContexts.CurrentCellChange | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, true, true, hti.row != this.ptCurrentCell.Y, hti.row != this.ptCurrentCell.Y, false, this.EditMode != GridEditMode.EditOnEnter, true, false))
                        {
                            if (y == -1)
                            {
                                goto Label_01D4;
                            }
                            cell = null;
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                if (!this.OnRowValidating(ref cell, x, y))
                                {
                                    break;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowEnter(ref cell, x, y, true, true);
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnCellEnter(ref cell, x, y);
                                    }
                                }
                            }
                        }
                        return;
                    }
                    default:
                        return;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return;
                }
                this.OnRowValidated(ref cell, x, y);
                if (hti.row >= this.Rows.Count)
                {
                    int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
                    if (((this.ptCurrentCell.X == -1) && (lastRow != -1)) && !this.IsColumnOutOfBounds(x))
                    {
                        this.SetAndSelectCurrentCellAddress(x, lastRow, true, false, false, false, false);
                    }
                    return;
                }
                if ((this.Rows.GetRowState(hti.row) & GridElementStates.Visible) == GridElementStates.None)
                {
                    return;
                }
            Label_01D4:
                flag2 = false;
                this.trackRow = hti.row;
                this.trackRowEdge = -1;
                if ((this.MultiSelect && isShiftDown) && ((this.ptAnchorCell.Y > -1) && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & GridElementStates.Selected) != GridElementStates.None)))
                {
                    flag2 = true;
                }
                if ((!this.MultiSelect || !isControlDown) || isShiftDown)
                {
                    int num4 = 0;
                    bool flag3 = false;
                    if (this.selectedBandIndexes.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag3 = true;
                    }
                    try
                    {
                        while (num4 < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num4] != hti.row)
                            {
                                this.SetSelectedRowCore(this.selectedBandIndexes[num4], false);
                            }
                            else
                            {
                                num4++;
                            }
                        }
                        if (this.SelectionMode == GridSelectionMode.RowHeaderSelect)
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                    }
                    finally
                    {
                        if (flag3)
                        {
                            this.ExitBulkPaint(-1, -1);
                        }
                    }
                }
                if (this.MultiSelect && this.gridOper[0x200])
                {
                    this.gridOper[8] = true;
                }
                if (flag2)
                {
                    if (hti.row >= this.ptAnchorCell.Y)
                    {
                        this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
                    }
                    else
                    {
                        this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
                    }
                }
                else if ((this.Rows.GetRowState(hti.row) & GridElementStates.Selected) == GridElementStates.None)
                {
                    this.SetSelectedRowCore(hti.row, true);
                }
                if (firstColumn != null)
                {
                    if (hti.row != this.ptCurrentCell.Y)
                    {
                        if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
                        {
                            this.ScrollIntoView(firstColumn.Index, hti.row, false);
                            if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
                            {
                                this.SetCurrentCellAddressCore(firstColumn.Index, hti.row, !flag2, false, true);
                            }
                        }
                    }
                    else if (-1 != this.ptCurrentCell.Y)
                    {
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                    }
                }
                return;
            Label_03F4:
                this.SetSelectedRowCore(hti.row, false);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeadersBorderStyleChanged"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e)
        {
            this.PerformLayoutPrivate(false, false, true, false);
            base.Invalidate();
            EventHandler handler = base.Events[EVENT_gridROWHEADERSBORDERSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeadersDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
        {
            if (this.RowHeadersVisible)
            {
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.RowHeaders));
                GridCellStyleChangedEventArgs args = e as GridCellStyleChangedEventArgs;
                if ((args == null) || args.ChangeAffectsPreferredSize)
                {
                    this.OnRowHeadersGlobalAutoSize(false);
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
            }
            EventHandler handler = base.Events[EVENT_gridROWHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowHeadersGlobalAutoSize(bool expandingRows)
        {
            if (this.noAutoSizeCount <= 0)
            {
                bool fixedRowsHeight = ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 1)) == GridAutoSizeRowsMode.None) || !this.RowHeadersVisible;
                bool flag2 = (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing);
                if (flag2)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, fixedRowsHeight);
                }
                if (!fixedRowsHeight)
                {
                    if (expandingRows)
                    {
                        this.AdjustExpandingRows(-1, true);
                    }
                    else
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    if (flag2)
                    {
                        this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeadersWidthChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeadersWidthChanged(EventArgs e)
        {
            if (this.RowHeadersVisible)
            {
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, false, false);
                }
                this.UpdateMouseEnteredCell(null, null);
                this.OnRowHeadersGlobalAutoSize(false);
            }
            EventHandler handler = base.Events[EVENT_gridROWHEADERSWIDTHCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeadersWidthSizeModeChanged"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridAutoSizeModeEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeadersWidthSizeModeChanged(GridAutoSizeModeEventArgs e)
        {
            if ((this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing))
            {
                if (!e.PreviousModeAutoSized)
                {
                    this.cachedRowHeadersWidth = this.RowHeadersWidth;
                }
                this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
            }
            else if (e.PreviousModeAutoSized)
            {
                this.RowHeadersWidth = this.cachedRowHeadersWidth;
            }
            EventHandler handler = base.Events[EVENT_gridROWHEADERSWIDTHSIZEMODECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeightChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowHeightChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            this.UpdateRowHeightInfo(e.Row.Index, false);
            GridRowEventHandler handler = base.Events[EVENT_gridROWHEIGHTCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            this.OnRowGlobalAutoSize(e.Row.Index);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeightInfoNeeded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowHeightInfoNeededEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeightInfoNeeded(GridRowHeightInfoNeededEventArgs e)
        {
            GridRowHeightInfoNeededEventHandler handler = base.Events[EVENT_gridROWHEIGHTINFONEEDED] as GridRowHeightInfoNeededEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal GridRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight)
        {
            GridRowHeightInfoNeededEventArgs rowHeightInfoNeededEventArgs = this.RowHeightInfoNeededEventArgs;
            rowHeightInfoNeededEventArgs.SetProperties(rowIndex, height, minimumHeight);
            this.OnRowHeightInfoNeeded(rowHeightInfoNeededEventArgs);
            return rowHeightInfoNeededEventArgs;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowHeightInfoPushed"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowHeightInfoPushedEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowHeightInfoPushed(GridRowHeightInfoPushedEventArgs e)
        {
            GridRowHeightInfoPushedEventHandler handler = base.Events[EVENT_gridROWHEIGHTINFOPUSHED] as GridRowHeightInfoPushedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight)
        {
            if (this.VirtualMode || (this.DataSource != null))
            {
                GridRowHeightInfoPushedEventArgs e = new GridRowHeightInfoPushedEventArgs(rowIndex, height, minimumHeight);
                this.OnRowHeightInfoPushed(e);
                if (e.Handled)
                {
                    this.UpdateRowHeightInfo(rowIndex, false);
                    return true;
                }
            }
            return false;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowLeave"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowLeave(GridCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridROWLEAVE] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowLeave(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            if ((rowIndex < this.Rows.Count) && (columnIndex < this.Columns.Count))
            {
                GridCellEventArgs e = new GridCellEventArgs(columnIndex, rowIndex);
                this.OnRowLeave(e);
                if (gridCell != null)
                {
                    if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        gridCell = null;
                    }
                    else
                    {
                        gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                    }
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowMinimumHeightChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowMinimumHeightChanged(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            GridRowEventHandler handler = base.Events[EVENT_gridROWMINIMUMHEIGHTCHANGED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowPostPaint"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowPostPaintEventArgs"></see> that contains the event data. </param>
        protected internal virtual void OnRowPostPaint(GridRowPostPaintEventArgs e)
        {
            GridRowPostPaintEventHandler handler = base.Events[EVENT_gridROWPOSTPAINT] as GridRowPostPaintEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowPrePaint"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowPrePaintEventArgs"></see> that contains the event data. </param>
        protected internal virtual void OnRowPrePaint(GridRowPrePaintEventArgs e)
        {
            GridRowPrePaintEventHandler handler = base.Events[EVENT_gridROWPREPAINT] as GridRowPrePaintEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowsAdded"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowsAddedEventArgs"></see> that contains information about the added rows. </param>
        protected virtual void OnRowsAdded(GridRowsAddedEventArgs e)
        {
            GridRowsAddedEventHandler handler = base.Events[EVENT_gridROWSADDED] as GridRowsAddedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnRowsAddedInternal(int rowIndex, int rowCount)
        {
            this.OnRowsAdded(new GridRowsAddedEventArgs(rowIndex, rowCount));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowsDefaultCellStyleChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e)
        {
            GridCellStyleChangedEventArgs args = e as GridCellStyleChangedEventArgs;
            if ((args != null) && !args.ChangeAffectsPreferredSize)
            {
                this.InvalidateData();
            }
            else
            {
                this.OnRowsGlobalAutoSize();
                if (this.editingControl != null)
                {
                    this.PositionEditingControl(true, true, false);
                }
            }
            EventHandler handler = base.Events[EVENT_gridROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnRowSelectMouseMove(HitTestInfo hti)
        {
            if ((((this.ptCurrentCell.Y == -1) || (hti.row == this.ptCurrentCell.Y)) || this.CommitEditForOperation(this.ptCurrentCell.X, hti.row, true)) && !this.IsRowOutOfBounds(hti.row))
            {
                this.noSelectionChangeCount++;
                try
                {
                    if (((this.trackRowEdge >= this.trackRow) && (hti.row > this.trackRowEdge)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRowEdge, GridElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge > this.trackRow) && (hti.row < this.trackRowEdge)) && ((hti.row >= this.trackRow) && (this.trackRowEdge >= 0)))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(hti.row, GridElementStates.Visible), this.trackRowEdge, false);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((hti.row > this.trackRow) && (this.trackRowEdge == -1))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, GridElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge <= this.trackRow) && (hti.row < this.trackRowEdge)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRowEdge, GridElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((this.trackRowEdge < this.trackRow) && (hti.row > this.trackRowEdge)) && ((hti.row <= this.trackRow) && (this.trackRowEdge >= 0)))
                    {
                        this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(hti.row, GridElementStates.Visible), false);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((hti.row < this.trackRow) && (this.trackRowEdge == -1))
                    {
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, GridElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if ((this.trackRowEdge > this.trackRow) && (hti.row < this.trackRow))
                    {
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, GridElementStates.Visible), this.trackRowEdge, false);
                        this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, GridElementStates.Visible), true);
                        this.trackRowEdge = hti.row;
                    }
                    else if (((hti.row > this.trackRow) && (this.trackRowEdge < this.trackRow)) && (this.trackRowEdge >= 0))
                    {
                        this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(this.trackRow, GridElementStates.Visible), false);
                        this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, GridElementStates.Visible), hti.row, true);
                        this.trackRowEdge = hti.row;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                }
                if (((this.ptCurrentCell.Y != -1) && (hti.row != this.ptCurrentCell.Y)) && !this.IsRowOutOfBounds(hti.row))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, hti.row, false, false, false);
                }
            }
        }

        private void OnRowsGlobalAutoSize()
        {
            this.InvalidateData();
            if (this.noAutoSizeCount <= 0)
            {
                if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
                }
                this.AutoResizeAllVisibleColumnsInternal(GridAutoSizeColumnCriteriaInternal.DisplayedRows | GridAutoSizeColumnCriteriaInternal.AllRows, true);
                bool fixedRowHeadersWidth = (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.EnableResizing) || (this.rowHeadersWidthSizeMode == GridRowHeadersWidthSizeMode.DisableResizing);
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.AutoResizeColumnHeadersHeight(fixedRowHeadersWidth, true);
                }
                if (!fixedRowHeadersWidth)
                {
                    this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
                }
                if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
                {
                    this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                }
                if ((this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize) && !fixedRowHeadersWidth)
                {
                    this.AutoResizeColumnHeadersHeight(true, true);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowsRemoved"></see> event. </summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowsRemovedEventArgs"></see> that contains information about the deleted rows. </param>
        protected virtual void OnRowsRemoved(GridRowsRemovedEventArgs e)
        {
            GridRowsRemovedEventHandler handler = base.Events[EVENT_gridROWSREMOVED] as GridRowsRemovedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnRowsRemovedInternal(int rowIndex, int rowCount)
        {
            this.OnRowsRemoved(new GridRowsRemovedEventArgs(rowIndex, rowCount));
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowStateChanged"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowStateChangedEventArgs"></see> that contains the event data. </param>
        /// <param name="rowIndex">The index of the row that is changing state.</param>
        /// <exception cref="T:System.InvalidCastException">The row changed from read-only to read/write, enabling the current cell to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        protected virtual void OnRowStateChanged(int rowIndex, GridRowStateChangedEventArgs e)
        {
            GridRowStateChangedEventHandler handler;
            GridRow row = e.Row;
            GridElementStates none = GridElementStates.None;
            bool flag = false;
            if (rowIndex >= 0)
            {
                none = this.Rows.GetRowState(rowIndex);
                flag = (none & GridElementStates.Visible) != GridElementStates.None;
            }
            switch (e.StateChanged)
            {
                case GridElementStates.Frozen:
                    if (flag)
                    {
                        if ((none & GridElementStates.Frozen) == GridElementStates.None)
                        {
                            this.FirstVisibleScrollingRowTempted(rowIndex);
                        }
                        this.PerformLayoutPrivate(false, false, true, true);
                        base.Invalidate();
                    }
                    break;

                case GridElementStates.Selected:
                    if (flag && (this.inBulkPaintCount == 0))
                    {
                        this.InvalidateRowPrivate(rowIndex);
                    }
                    break;

                case GridElementStates.Visible:
                {
                    if (!flag && ((none & GridElementStates.Displayed) != GridElementStates.None))
                    {
                        this.Rows.SetRowState(rowIndex, GridElementStates.Displayed, false);
                    }
                    this.PerformLayoutPrivate(false, false, true, true);
                    base.Invalidate();
                    bool flag2 = (this.Rows.GetRowState(rowIndex) & GridElementStates.Displayed) != GridElementStates.None;
                    GridAutoSizeRowsModeInternal autoSizeRowsMode = (GridAutoSizeRowsModeInternal) this.autoSizeRowsMode;
                    bool flag3 = false;
                    if (autoSizeRowsMode != GridAutoSizeRowsModeInternal.None)
                    {
                        int thicknessInternal = row.ThicknessInternal;
                        if (flag)
                        {
                            row.CachedThickness = thicknessInternal;
                            if (((autoSizeRowsMode & GridAutoSizeRowsModeInternal.DisplayedRows) == GridAutoSizeRowsModeInternal.None) || flag2)
                            {
                                this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
                                flag3 = true;
                            }
                        }
                        else if (thicknessInternal != row.CachedThickness)
                        {
                            if (row.Index == -1)
                            {
                                row = this.Rows[rowIndex];
                            }
                            row.ThicknessInternal = Math.Max(row.MinimumHeight, row.CachedThickness);
                        }
                    }
                    GridAutoSizeColumnCriteriaInternal allRows = GridAutoSizeColumnCriteriaInternal.AllRows;
                    if (flag2)
                    {
                        allRows |= GridAutoSizeColumnCriteriaInternal.DisplayedRows;
                    }
                    if (flag && (this.Rows.GetRowCount(GridElementStates.Visible) > 1))
                    {
                        this.AdjustExpandingColumns(allRows, rowIndex);
                    }
                    else
                    {
                        this.AutoResizeAllVisibleColumnsInternal(allRows, true);
                    }
                    if (flag3)
                    {
                        this.AutoResizeRowInternal(rowIndex, MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
                    }
                    goto Label_018C;
                }
            }
        Label_018C:
            handler = base.Events[EVENT_gridROWSTATECHANGED] as GridRowStateChangedEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
            if (((e.StateChanged == GridElementStates.ReadOnly) && (rowIndex == this.ptCurrentCell.Y)) && !this.gridOper[0x4000])
            {
                base.VerifyImeRestrictedModeChanged();
                if (((((none & GridElementStates.ReadOnly) == GridElementStates.None) && !this.ReadOnly) && (!this.Columns[this.ptCurrentCell.X].ReadOnly && this.ColumnEditable(this.ptCurrentCell.X))) && (!this.IsCurrentCellInEditMode && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null)))))
                {
                    this.BeginEditInternal(true);
                }
            }
        }

        internal void OnRowUnshared(GridRow gridRow)
        {
            if (((-1 != this.ptCurrentCell.X) && (gridRow.Index == this.ptCurrentCell.Y)) && (this.editingControl != null))
            {
                this.CurrentCellInternal.CacheEditingControl();
            }
            GridRowEventArgs e = new GridRowEventArgs(gridRow);
            this.OnRowUnshared(e);
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowUnshared"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnRowUnshared(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            GridRowEventHandler handler = base.Events[EVENT_gridROWUNSHARED] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowValidated"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowValidated(GridCellEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                GridCellEventHandler handler = base.Events[EVENT_gridROWVALIDATED] as GridCellEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private void OnRowValidated(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            this.IsCurrentRowDirtyInternal = false;
            this.gridState1[0x200000] = false;
            if (rowIndex == this.newRowIndex)
            {
                this.InvalidateRowPrivate(rowIndex);
            }
            GridCellEventArgs e = new GridCellEventArgs(columnIndex, rowIndex);
            this.OnRowValidated(e);
            if (gridCell != null)
            {
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    gridCell = null;
                }
                else
                {
                    gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.RowValidating"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridCellCancelEventArgs"></see> that contains the event data. </param>
        protected virtual void OnRowValidating(GridCellCancelEventArgs e)
        {
            try
            {
                this.noDimensionChangeCount++;
                GridCellCancelEventHandler handler = base.Events[EVENT_gridROWVALIDATING] as GridCellCancelEventHandler;
                if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
                {
                    handler(this, e);
                    this.CorrectFocus(true);
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
            }
        }

        private bool OnRowValidating(ref GridCell gridCell, int columnIndex, int rowIndex)
        {
            GridCellCancelEventArgs e = new GridCellCancelEventArgs(columnIndex, rowIndex);
            this.OnRowValidating(e);
            if (((!e.Cancel && (this.dataConnection != null)) && (this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideGrid)) && !this.dataConnection.ListWasReset)
            {
                this.dataConnection.OnRowValidating(e);
            }
            if (((gridCell != null) && (rowIndex < this.Rows.Count)) && (columnIndex < this.Columns.Count))
            {
                gridCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
            }
            return e.Cancel;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.Scroll"></see> event. </summary>
        /// <param name="e">A <see cref="T:System.Windows.Forms.ScrollEventArgs"></see> that contains the event data. </param>
        protected virtual void OnScroll(ScrollEventArgs e)
        {
            ScrollEventHandler handler = base.Events[EVENT_gridSCROLL] as ScrollEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation)
        {
            ScrollEventArgs e = new ScrollEventArgs(scrollEventType, oldValue, newValue, orientation);
            this.OnScroll(e);
            if (ScrollOrientation.VerticalScroll == orientation)
            {
                if (e.NewValue != newValue)
                {
                    try
                    {
                        this.gridState2[0x4000] = true;
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                        int num2 = firstRow;
                        newValue = e.NewValue;
                        while ((firstRow != -1) && (newValue > 0))
                        {
                            num2 = firstRow;
                            firstRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible);
                            newValue--;
                        }
                        if (firstRow != -1)
                        {
                            num2 = firstRow;
                        }
                        if (num2 != -1)
                        {
                            this.FirstDisplayedScrollingRowIndex = num2;
                        }
                    }
                    finally
                    {
                        this.gridState2[0x4000] = false;
                    }
                }
            }
            else if (e.NewValue != newValue)
            {
                try
                {
                    this.gridState2[0x8000] = true;
                    this.HorizontalOffset = e.NewValue;
                }
                finally
                {
                    this.gridState2[0x8000] = false;
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.SelectionChanged"></see> event.</summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains information about the event.</param>
        protected virtual void OnSelectionChanged(EventArgs e)
        {
            this.gridState2[0x40000] = false;
            EventHandler handler = base.Events[EVENT_gridSELECTIONCHANGED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.SortCompare"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridSortCompareEventArgs"></see> that contains the event data. </param>
        protected virtual void OnSortCompare(GridSortCompareEventArgs e)
        {
            GridSortCompareEventHandler handler = base.Events[EVENT_gridSORTCOMPARE] as GridSortCompareEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal bool OnSortCompare(GridColumn gridSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, out int sortResult)
        {
            GridSortCompareEventArgs e = new GridSortCompareEventArgs(gridSortedColumn, value1, value2, rowIndex1, rowIndex2);
            this.OnSortCompare(e);
            sortResult = e.SortResult;
            return e.Handled;
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.Sorted"></see> event. </summary>
        /// <param name="e">An <see cref="T:System.EventArgs"></see> that contains the event data.</param>
        protected virtual void OnSorted(EventArgs e)
        {
            EventHandler handler = base.Events[EVENT_gridSORTED] as EventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        internal void OnSortGlyphDirectionChanged(GridColumnHeaderCell gridColumnHeaderCell)
        {
            if (gridColumnHeaderCell.OwningColumn == this.SortedColumn)
            {
                if (gridColumnHeaderCell.SortGlyphDirection == System.Windows.Forms.SortOrder.None)
                {
                    this.sortedColumn = null;
                    GridColumn owningColumn = gridColumnHeaderCell.OwningColumn;
                    if (owningColumn.IsDataBound)
                    {
                        for (int i = 0; i < this.Columns.Count; i++)
                        {
                            if (((owningColumn != this.Columns[i]) && (this.Columns[i].SortMode != GridColumnSortMode.NotSortable)) && (string.Compare(owningColumn.DataPropertyName, this.Columns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0))
                            {
                                this.sortedColumn = this.Columns[i];
                                break;
                            }
                        }
                    }
                }
                this.sortOrder = (this.sortedColumn != null) ? this.sortedColumn.HeaderCell.SortGlyphDirection : System.Windows.Forms.SortOrder.None;
            }
            this.InvalidateCellPrivate(gridColumnHeaderCell);
        }

        private void OnTopLeftHeaderMouseDown()
        {
            if (this.MultiSelect)
            {
                this.SelectAll();
                if (-1 != this.ptCurrentCell.X)
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
                }
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.UserAddedRow"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.ArgumentException">The row indicated by the <see cref="P:MControl.GridView.GridRowEventArgs.Row"></see> property of e does not belong to this <see cref="T:MControl.GridView.Grid"></see> control.</exception>
        protected virtual void OnUserAddedRow(GridRowEventArgs e)
        {
            if (e.Row.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_RowDoesNotBelongToGrid"), "e.Row");
            }
            GridRowEventHandler handler = base.Events[EVENT_gridUSERADDEDROW] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.UserDeletedRow"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowEventArgs"></see> that contains the event data. </param>
        protected virtual void OnUserDeletedRow(GridRowEventArgs e)
        {
            GridRowEventHandler handler = base.Events[EVENT_gridUSERDELETEDROW] as GridRowEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        /// <summary>Raises the <see cref="E:MControl.GridView.Grid.UserDeletingRow"></see> event.</summary>
        /// <param name="e">A <see cref="T:MControl.GridView.GridRowCancelEventArgs"></see> that contains the event data. </param>
        protected virtual void OnUserDeletingRow(GridRowCancelEventArgs e)
        {
            GridRowCancelEventHandler handler = base.Events[EVENT_gridUSERDELETINGROW] as GridRowCancelEventHandler;
            if (((handler != null) && !this.gridOper[0x100000]) && !base.IsDisposed)
            {
                handler(this, e);
            }
        }

        private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
        {
            if (((e.Category == UserPreferenceCategory.Color) || (e.Category == UserPreferenceCategory.Locale)) || (((e.Category == UserPreferenceCategory.General) || (e.Category == UserPreferenceCategory.Window)) || (e.Category == UserPreferenceCategory.VisualStyle)))
            {
                this.OnGlobalAutoSize();
                if (e.Category == UserPreferenceCategory.Window)
                {
                    this.cachedEditingControl = null;
                    if (this.editingControl != null)
                    {
                        this.gridState2[0x20000000] = true;
                    }
                    this.PerformLayoutPrivate(false, false, false, true);
                }
            }
        }

        /// <summary>Raises the <see cref="E:System.Windows.Forms.Control.Validating"></see> event.</summary>
        /// <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs"></see> that contains the event data. </param>
        /// <exception cref="T:System.Exception">Validation failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        protected override void OnValidating(CancelEventArgs e)
        {
            if (!base.BecomingActiveControl && ((this.editingControl == null) || !this.editingControl.BecomingActiveControl))
            {
                if (!this.gridState1[0x40] && !this.EndEdit(GridDataErrorContexts.LeaveControl | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, false, false, false, false, false, false, false, false))
                {
                    e.Cancel = true;
                    return;
                }
                if (this.ptCurrentCell.X >= 0)
                {
                    GridCell gridCell = null;
                    if (this.OnRowValidating(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y))
                    {
                        e.Cancel = true;
                        return;
                    }
                    if (this.ptCurrentCell.X == -1)
                    {
                        return;
                    }
                    this.OnRowValidated(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                    if (((this.DataSource != null) && (this.ptCurrentCell.X >= 0)) && (this.AllowUserToAddRowsInternal && (this.newRowIndex == this.ptCurrentCell.Y)))
                    {
                        int previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, GridElementStates.Visible);
                        if (previousRow > -1)
                        {
                            this.SetAndSelectCurrentCellAddress(this.ptCurrentCell.X, previousRow, true, false, false, false, false);
                        }
                        else
                        {
                            this.SetCurrentCellAddressCore(-1, -1, true, false, false);
                        }
                    }
                }
            }
            base.OnValidating(e);
        }

        protected override void OnVisibleChanged(EventArgs e)
        {
            base.OnVisibleChanged(e);
            this.OnVisibleChangedPrivate();
        }

        private void OnVisibleChangedPrivate()
        {
            if (base.Visible)
            {
                int firstDisplayedScrollingRow;
                int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
                if (numDisplayedFrozenRows > 0)
                {
                    firstDisplayedScrollingRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                    while (numDisplayedFrozenRows > 0)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None)
                        {
                            return;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, true);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible | GridElementStates.Frozen);
                        numDisplayedFrozenRows--;
                    }
                }
                firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                if (firstDisplayedScrollingRow > -1)
                {
                    for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                    {
                        if ((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) != GridElementStates.None)
                        {
                            return;
                        }
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, true);
                        firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                    }
                }
            }
            else
            {
                this.UpdateRowsDisplayedState(false);
            }
            this.UpdateColumnsDisplayedState(base.Visible);
        }

        /// <summary>Paints the background of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <param name="graphics">The <see cref="T:System.Drawing.Graphics"></see> used to paint the background.</param>
        /// <param name="clipBounds">A <see cref="T:System.Drawing.Rectangle"></see> that represents the area of the <see cref="T:MControl.GridView.Grid"></see> that needs to be painted.</param>
        /// <param name="gridBounds">A <see cref="T:System.Drawing.Rectangle"></see> that represents the area in which cells are drawn.</param>
        protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
        {
            Rectangle rect = gridBounds;
            int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible);
            if (this.layout.ColumnHeadersVisible)
            {
                rect.Y += this.layout.ColumnHeaders.Height;
                rect.Height -= this.layout.ColumnHeaders.Height;
            }
            else if (this.SingleHorizontalBorderAdded && (rowsHeight > 0))
            {
                rect.Y++;
                rect.Height--;
            }
            int num2 = rowsHeight - this.verticalOffset;
            rect.Y += num2;
            rect.Height -= num2;
            if ((rect.Width > 0) && (rect.Height > 0))
            {
                graphics.FillRectangle(this.backgroundBrush, rect);
            }
            int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible);
            Rectangle rectangle2 = gridBounds;
            if (this.Columns.Count > 0)
            {
                if (this.layout.RowHeadersVisible)
                {
                    if (!this.RightToLeftInternal)
                    {
                        rectangle2.X += this.layout.RowHeaders.Width;
                    }
                    rectangle2.Width -= this.layout.RowHeaders.Width;
                }
                else if (this.SingleVerticalBorderAdded && (columnsWidth > 0))
                {
                    if (!this.RightToLeftInternal)
                    {
                        rectangle2.X++;
                    }
                    rectangle2.Width--;
                }
            }
            int num4 = columnsWidth - this.horizontalOffset;
            if (!this.RightToLeftInternal)
            {
                rectangle2.X += num4;
            }
            rectangle2.Width -= num4;
            rectangle2.Height = gridBounds.Height - rect.Height;
            if ((rectangle2.Width > 0) && (rectangle2.Height > 0))
            {
                graphics.FillRectangle(this.backgroundBrush, rectangle2);
            }
        }

        private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds)
        {
            if (this.BorderStyle != System.Windows.Forms.BorderStyle.None)
            {
                bool flag = false;
                int borderWidth = this.BorderWidth;
                Rectangle rect = new Rectangle(0, 0, bounds.Width, borderWidth);
                flag = clipRect.IntersectsWith(rect);
                if (!flag)
                {
                    rect.Y = bounds.Height - borderWidth;
                    flag = clipRect.IntersectsWith(rect);
                    if (!flag)
                    {
                        rect.Y = 0;
                        rect.Height = bounds.Height;
                        rect.Width = borderWidth;
                        flag = clipRect.IntersectsWith(rect);
                        if (!flag)
                        {
                            rect.X = bounds.Width - borderWidth;
                            flag = clipRect.IntersectsWith(rect);
                        }
                    }
                }
                if (flag)
                {
                    if (this.BorderStyle == System.Windows.Forms.BorderStyle.Fixed3D)
                    {
                        if (Application.RenderWithVisualStyles)
                        {
                            Pen cachedPen = this.GetCachedPen(VisualStyleInformation.TextControlBorder);
                            g.DrawRectangle(cachedPen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
                        }
                        else
                        {
                            ControlPaint.DrawBorder3D(g, bounds, Border3DStyle.Sunken);
                        }
                    }
                    else if (this.BorderStyle == System.Windows.Forms.BorderStyle.FixedSingle)
                    {
                        Pen pen = this.GetCachedPen(SystemColors.ControlText);
                        g.DrawRectangle(pen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
                    }
                }
            }
        }

        private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded)
        {
            if (g.IsVisible(this.layout.ColumnHeaders))
            {
                Rectangle rectangle2;
                GridCell headerCell;
                GridAdvancedBorderStyle style3;
                Rectangle rectangle = rectangle2 = this.layout.ColumnHeaders;
                rectangle.Height = rectangle2.Height = this.columnHeadersHeight;
                int num = 0;
                bool isFirstDisplayedColumn = true;
                bool isLastVisibleColumn = false;
                GridCellStyle inheritedCellStyle = new GridCellStyle();
                GridAdvancedBorderStyle gridAdvancedBorderStylePlaceholder = new GridAdvancedBorderStyle();
                GridColumn column = null;
                GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
                while (firstColumn != null)
                {
                    headerCell = firstColumn.HeaderCell;
                    rectangle2.Width = firstColumn.Thickness;
                    if (singleBorderAdded && isFirstDisplayedColumn)
                    {
                        rectangle2.Width++;
                    }
                    if (this.RightToLeftInternal)
                    {
                        rectangle2.X = (rectangle.Right - num) - rectangle2.Width;
                    }
                    else
                    {
                        rectangle2.X = rectangle.X + num;
                    }
                    this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, headerCell);
                    column = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                    if (column == null)
                    {
                        isLastVisibleColumn = this.displayedBandsInfo.FirstDisplayedScrollingCol < 0;
                    }
                    style3 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, gridAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
                    headerCell.PaintWork(g, clipBounds, rectangle2, -1, firstColumn.State, inheritedCellStyle, style3, GridPaintParts.SelectionBackground | GridPaintParts.ErrorIcon | GridPaintParts.ContentForeground | GridPaintParts.ContentBackground | GridPaintParts.Border | GridPaintParts.Background);
                    num += rectangle2.Width;
                    if (num >= rectangle.Width)
                    {
                        break;
                    }
                    firstColumn = column;
                    isFirstDisplayedColumn = false;
                }
                Rectangle rectangle3 = rectangle;
                if (!this.RightToLeftInternal)
                {
                    rectangle3.X -= this.negOffset;
                }
                rectangle3.Width += this.negOffset;
                if ((this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0) && (num < rectangle3.Width))
                {
                    Region clip = null;
                    if (this.negOffset > 0)
                    {
                        clip = g.Clip;
                        Rectangle rect = rectangle;
                        if (!this.RightToLeftInternal)
                        {
                            rect.X += num;
                        }
                        rect.Width -= num;
                        g.SetClip(rect);
                    }
                    firstColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                    while (firstColumn != null)
                    {
                        headerCell = firstColumn.HeaderCell;
                        rectangle2.Width = firstColumn.Thickness;
                        if (singleBorderAdded && isFirstDisplayedColumn)
                        {
                            rectangle2.Width++;
                        }
                        if (this.RightToLeftInternal)
                        {
                            rectangle2.X = (rectangle3.Right - num) - rectangle2.Width;
                        }
                        else
                        {
                            rectangle2.X = rectangle3.X + num;
                        }
                        this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, headerCell);
                        column = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                        isLastVisibleColumn = column == null;
                        style3 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, gridAdvancedBorderStylePlaceholder, isFirstDisplayedColumn, isLastVisibleColumn);
                        headerCell.PaintWork(g, clipBounds, rectangle2, -1, firstColumn.State, inheritedCellStyle, style3, GridPaintParts.SelectionBackground | GridPaintParts.ErrorIcon | GridPaintParts.ContentForeground | GridPaintParts.ContentBackground | GridPaintParts.Border | GridPaintParts.Background);
                        num += rectangle2.Width;
                        if (num >= rectangle3.Width)
                        {
                            break;
                        }
                        firstColumn = column;
                        isFirstDisplayedColumn = false;
                    }
                    if (this.negOffset > 0)
                    {
                        g.Clip = clip;
                        clip.Dispose();
                    }
                }
            }
        }

        private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded)
        {
            Rectangle boundingRect = gridBounds;
            if (((this.layout.TopLeftHeader.Width > 0) && (clipRect.IntersectsWith(this.layout.TopLeftHeader) || (this.lastHeaderShadow != -1))) && ((this.Columns.Count > 0) || (this.Rows.Count > 0)))
            {
                using (Region region = g.Clip)
                {
                    g.SetClip(this.layout.TopLeftHeader);
                    this.PaintTopLeftHeaderCell(g);
                    g.Clip = region;
                }
            }
            if (this.layout.ColumnHeadersVisible)
            {
                Rectangle rect = new Rectangle();
                rect = this.layout.ColumnHeaders;
                if (singleVerticalBorderAdded)
                {
                    rect.Width++;
                }
                if (clipRect.IntersectsWith(rect) || (this.lastHeaderShadow != -1))
                {
                    using (Region region2 = g.Clip)
                    {
                        g.SetClip(rect);
                        this.PaintColumnHeaders(g, rect, singleVerticalBorderAdded);
                        g.Clip = region2;
                    }
                }
                int height = this.layout.ColumnHeaders.Height;
                boundingRect.Y += height;
                boundingRect.Height -= height;
                if (this.lastHeaderShadow != -1)
                {
                    this.DrawColHeaderShadow(g, this.lastHeaderShadow);
                }
            }
            if (boundingRect.Height > 0)
            {
                this.PaintRows(g, boundingRect, clipRect, singleHorizontalBorderAdded);
            }
            if (this.currentRowSplitBar != -1)
            {
                this.DrawRowSplitBar(this.currentRowSplitBar);
            }
            else if (this.currentColSplitBar != -1)
            {
                this.DrawColSplitBar(this.currentColSplitBar);
            }
        }

        private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded)
        {
            Rectangle rectangle;
            int nextRow;
            int num = 0;
            bool isFirstDisplayedRow = true;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
            while (firstRow != -1)
            {
                rectangle = boundingRect;
                rectangle.Height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                if (isFirstDisplayedRow && singleHorizontalBorderAdded)
                {
                    rectangle.Height++;
                }
                rectangle.Y = boundingRect.Y + num;
                nextRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible | GridElementStates.Frozen);
                if (clipRect.IntersectsWith(rectangle))
                {
                    this.Rows.SharedRow(firstRow).Paint(g, clipRect, rectangle, firstRow, this.Rows.GetRowState(firstRow), isFirstDisplayedRow, (nextRow == -1) && (this.displayedBandsInfo.FirstDisplayedScrollingRow == -1));
                }
                num += rectangle.Height;
                if (num >= boundingRect.Height)
                {
                    break;
                }
                firstRow = nextRow;
                isFirstDisplayedRow = false;
            }
            if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && (num < boundingRect.Height))
            {
                firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                while (firstRow != -1)
                {
                    rectangle = boundingRect;
                    rectangle.Height = this.Rows.SharedRow(firstRow).GetHeight(firstRow);
                    if (isFirstDisplayedRow && singleHorizontalBorderAdded)
                    {
                        rectangle.Height++;
                    }
                    rectangle.Y = boundingRect.Y + num;
                    nextRow = this.Rows.GetNextRow(firstRow, GridElementStates.Visible);
                    if (clipRect.IntersectsWith(rectangle))
                    {
                        this.Rows.SharedRow(firstRow).Paint(g, clipRect, rectangle, firstRow, this.Rows.GetRowState(firstRow), isFirstDisplayedRow, nextRow == -1);
                    }
                    num += rectangle.Height;
                    if (num >= boundingRect.Height)
                    {
                        return;
                    }
                    firstRow = nextRow;
                    isFirstDisplayedRow = false;
                }
            }
        }

        private void PaintTopLeftHeaderCell(Graphics g)
        {
            if (g.IsVisible(this.layout.TopLeftHeader))
            {
                GridCell topLeftHeaderCell = this.TopLeftHeaderCell;
                GridCellStyle inheritedCellStyle = new GridCellStyle();
                this.BuildInheritedColumnHeaderCellStyle(inheritedCellStyle, topLeftHeaderCell);
                Rectangle topLeftHeader = this.layout.TopLeftHeader;
                topLeftHeader.Width = this.rowHeadersWidth;
                topLeftHeader.Height = this.columnHeadersHeight;
                topLeftHeaderCell.PaintWork(g, this.layout.TopLeftHeader, topLeftHeader, -1, topLeftHeaderCell.State, inheritedCellStyle, this.AdjustedTopLeftHeaderBorderStyle, GridPaintParts.SelectionBackground | GridPaintParts.ErrorIcon | GridPaintParts.ContentForeground | GridPaintParts.ContentBackground | GridPaintParts.Border | GridPaintParts.Background);
            }
        }

        private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl)
        {
            if (invalidInAdjustFillingColumns && this.InAdjustFillingColumns)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAlterAutoFillColumnParameter"));
            }
            if (base.IsHandleCreated)
            {
                bool flag = false;
                if (useRowShortcut)
                {
                    this.ComputeLayoutShortcut(computeVisibleRows);
                }
                else
                {
                    flag = this.ComputeLayout();
                }
                this.FlushDisplayedChanged();
                if (flag)
                {
                    if ((this.autoSizeRowsMode & ((GridAutoSizeRowsMode) 2)) != GridAutoSizeRowsMode.None)
                    {
                        this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
                    }
                    if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                    {
                        this.AutoResizeColumnHeadersHeight(true, true);
                    }
                }
                if (repositionEditingControl && (this.editingControl != null))
                {
                    this.PositionEditingControl(true, false, false);
                }
            }
            else
            {
                this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
                this.displayedBandsInfo.FirstDisplayedFrozenRow = -1;
                this.displayedBandsInfo.FirstDisplayedScrollingRow = -1;
                this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
                this.displayedBandsInfo.NumDisplayedFrozenRows = 0;
                this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
                this.displayedBandsInfo.NumDisplayedScrollingRows = 0;
                this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
                this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = 0;
                this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
                this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
                this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
                if (this.layout != null)
                {
                    this.layout.dirty = true;
                }
            }
        }

        private void PopulateNewRowWithDefaultValues()
        {
            if (this.newRowIndex != -1)
            {
                GridCellCollection cells = this.Rows.SharedRow(this.newRowIndex).Cells;
                foreach (GridCell cell in cells)
                {
                    if (cell.DefaultNewRowValue != null)
                    {
                        GridRow row = this.Rows[this.newRowIndex];
                        cells = row.Cells;
                        break;
                    }
                }
                foreach (GridCell cell2 in cells)
                {
                    cell2.SetValueInternal(this.newRowIndex, cell2.DefaultNewRowValue);
                }
            }
        }

        private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus)
        {
            if (base.IsHandleCreated)
            {
                Rectangle data = this.layout.Data;
                if ((data.Width != 0) && (data.Height != 0))
                {
                    this.gridState1[0x4000] = true;
                    try
                    {
                        int columnXFromIndex = this.GetColumnXFromIndex(this.ptCurrentCell.X);
                        if (this.RightToLeftInternal)
                        {
                            columnXFromIndex -= this.Columns[this.ptCurrentCell.X].Width - 1;
                        }
                        Rectangle cellBounds = new Rectangle(columnXFromIndex, this.GetRowYFromIndex(this.ptCurrentCell.Y), this.Columns[this.ptCurrentCell.X].Width, this.Rows.SharedRow(this.ptCurrentCell.Y).GetHeight(this.ptCurrentCell.Y));
                        Rectangle cellClip = cellBounds;
                        if (!this.Columns[this.ptCurrentCell.X].Frozen)
                        {
                            int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen);
                            if (!this.RightToLeftInternal)
                            {
                                data.X += columnsWidth;
                            }
                            data.Width = Math.Max(0, data.Width - columnsWidth);
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Frozen) == GridElementStates.None)
                        {
                            int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                            data.Y += rowsHeight;
                        }
                        cellClip.Intersect(data);
                        if ((cellClip.Width == 0) || (cellClip.Height == 0))
                        {
                            this.editingPanel.Location = new Point(base.Width + 1, 0);
                            this.gridState1[0x1000] = true;
                        }
                        else
                        {
                            bool singleVerticalBorderAdded = this.SingleVerticalBorderAdded;
                            bool singleHorizontalBorderAdded = this.SingleHorizontalBorderAdded;
                            bool isFirstDisplayedColumn = this.FirstDisplayedColumnIndex == this.ptCurrentCell.X;
                            bool isFirstDisplayedRow = this.FirstDisplayedRowIndex == this.ptCurrentCell.Y;
                            if (singleVerticalBorderAdded && isFirstDisplayedColumn)
                            {
                                if (!this.RightToLeftInternal)
                                {
                                    cellBounds.X--;
                                    cellClip.X--;
                                }
                                cellBounds.Width++;
                                cellClip.Width++;
                            }
                            if (singleHorizontalBorderAdded && isFirstDisplayedRow)
                            {
                                cellBounds.Y--;
                                cellClip.Y--;
                                cellBounds.Height++;
                                cellClip.Height++;
                            }
                            this.CurrentCellInternal.PositionEditingControl(setLocation || this.gridState1[0x1000], setSize || this.gridState1[0x1000], cellBounds, cellClip, this.InheritedEditingCellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, isFirstDisplayedColumn, isFirstDisplayedRow);
                            this.gridState1[0x1000] = false;
                        }
                        this.editingPanel.Visible = true;
                        if (setFocus)
                        {
                            this.CorrectFocus(false);
                        }
                    }
                    finally
                    {
                        this.gridState1[0x4000] = false;
                    }
                }
            }
        }

        /// <summary>Processes the A key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessAKey(Keys keyData)
        {
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Control) && this.MultiSelect)
            {
                this.SelectAll();
                return true;
            }
            return false;
        }

        /// <summary>Processes keys used for navigating in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="e">Contains information about the key that was pressed.</param>
        /// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true.-or-The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected virtual bool ProcessGridKey(KeyEventArgs e)
        {
            switch (e.KeyCode)
            {
                case Keys.Escape:
                    return this.ProcessEscapeKey(e.KeyData);

                case Keys.Space:
                    return this.ProcessSpaceKey(e.KeyData);

                case Keys.Prior:
                    return this.ProcessPriorKey(e.KeyData);

                case Keys.Next:
                    return this.ProcessNextKey(e.KeyData);

                case Keys.End:
                    return this.ProcessEndKey(e.KeyData);

                case Keys.Home:
                    return this.ProcessHomeKey(e.KeyData);

                case Keys.Left:
                    return this.ProcessLeftKey(e.KeyData);

                case Keys.Up:
                    return this.ProcessUpKey(e.KeyData);

                case Keys.Right:
                    return this.ProcessRightKey(e.KeyData);

                case Keys.Down:
                    return this.ProcessDownKey(e.KeyData);

                case Keys.Insert:
                case Keys.C:
                    return this.ProcessInsertKey(e.KeyData);

                case Keys.Delete:
                    return this.ProcessDeleteKey(e.KeyData);

                case Keys.D0:
                case Keys.NumPad0:
                    return this.ProcessZeroKey(e.KeyData);

                case Keys.Return:
                    return this.ProcessEnterKey(e.KeyData);

                case Keys.Tab:
                    return this.ProcessTabKey(e.KeyData);

                case Keys.A:
                    return this.ProcessAKey(e.KeyData);

                case Keys.F2:
                    return this.ProcessF2Key(e.KeyData);
            }
            return false;
        }

        /// <summary>Processes the DELETE key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.Exception">The DELETE key would delete one or more rows, but an error in the data source prevents the deletion and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessDeleteKey(Keys keyData)
        {
            if (this.AllowUserToDeleteRowsInternal)
            {
                if (this.editingControl != null)
                {
                    return false;
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                    {
                        int num = 0;
                        try
                        {
                            this.selectedBandSnapshotIndexes = new GridIntLinkedList(this.selectedBandIndexes);
                            while (this.selectedBandSnapshotIndexes.Count > num)
                            {
                                int rowIndex = this.selectedBandSnapshotIndexes[num];
                                if ((rowIndex == this.newRowIndex) || (rowIndex >= this.Rows.Count))
                                {
                                    num++;
                                }
                                else
                                {
                                    GridRowCancelEventArgs e = new GridRowCancelEventArgs(this.Rows[rowIndex]);
                                    this.OnUserDeletingRow(e);
                                    if (!e.Cancel)
                                    {
                                        GridRow gridRow = this.Rows[rowIndex];
                                        if (this.DataSource != null)
                                        {
                                            int count = this.dataConnection.CurrencyManager.List.Count;
                                            GridDataErrorEventArgs args2 = null;
                                            try
                                            {
                                                this.DataConnection.DeleteRow(rowIndex);
                                            }
                                            catch (Exception exception)
                                            {
                                                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                                                {
                                                    throw;
                                                }
                                                args2 = new GridDataErrorEventArgs(exception, -1, rowIndex, GridDataErrorContexts.RowDeletion);
                                                this.OnDataErrorInternal(args2);
                                                if (args2.ThrowException)
                                                {
                                                    throw args2.Exception;
                                                }
                                                num++;
                                            }
                                            catch
                                            {
                                                throw;
                                            }
                                            if (count != this.dataConnection.CurrencyManager.List.Count)
                                            {
                                                GridRowEventArgs args3 = new GridRowEventArgs(gridRow);
                                                this.OnUserDeletedRow(args3);
                                            }
                                            else if (args2 == null)
                                            {
                                                num++;
                                            }
                                        }
                                        else
                                        {
                                            this.Rows.RemoveAtInternal(rowIndex, false);
                                            GridRowEventArgs args4 = new GridRowEventArgs(gridRow);
                                            this.OnUserDeletedRow(args4);
                                        }
                                        continue;
                                    }
                                    num++;
                                }
                            }
                        }
                        finally
                        {
                            this.selectedBandSnapshotIndexes = null;
                        }
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>Processes keys, such as the TAB, ESCAPE, RETURN, and ARROW keys, used to control dialog boxes.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected override bool ProcessDialogKey(Keys keyData)
        {
            switch ((keyData & Keys.KeyCode))
            {
                case Keys.Return:
                    if (this.ProcessEnterKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.Escape:
                {
                    bool isEscapeKeyEffective = this.IsEscapeKeyEffective;
                    bool flag2 = base.ProcessDialogKey(keyData);
                    if (((!isEscapeKeyEffective && this.Focused) && ((this.ptCurrentCell.X > -1) && !this.IsCurrentCellInEditMode)) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                    {
                        this.BeginEditInternal(true);
                    }
                    return flag2;
                }
                case Keys.D0:
                case Keys.NumPad0:
                    if (this.ProcessZeroKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.C:
                case Keys.Insert:
                    if (this.ProcessInsertKey(keyData))
                    {
                        return true;
                    }
                    break;

                case Keys.Tab:
                {
                    System.Windows.Forms.IntSecurity.AllWindows.Demand();
                    if (this.ProcessTabKey(keyData))
                    {
                        return true;
                    }
                    if (this.editingControl != null)
                    {
                        this.gridState1[0x40] = true;
                        if (!this.EndEdit(GridDataErrorContexts.LeaveControl | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, true, true, true, true, true, false, false, false))
                        {
                            return true;
                        }
                    }
                    keyData &= ~Keys.Control;
                    bool flag3 = false;
                    System.Windows.Forms.IntSecurity.ModifyFocus.Assert();
                    try
                    {
                        flag3 = base.ProcessDialogKey(keyData);
                    }
                    finally
                    {
                        CodeAccessPermission.RevertAssert();
                    }
                    if (this.gridState1[0x40] && this.Focused)
                    {
                        this.OnEnter(EventArgs.Empty);
                    }
                    return flag3;
                }
            }
            return base.ProcessDialogKey(keyData);
        }

        /// <summary>Processes the DOWN ARROW key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The DOWN ARROW key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessDownKey(Keys keyData)
        {
            bool flag;
            return this.ProcessDownKeyInternal(keyData, out flag);
        }

        private bool ProcessDownKeyInternal(Keys keyData, out bool moved)
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
            if ((columnIndex == -1) || (lastRow == -1))
            {
                moved = false;
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                rowIndex = this.Rows.GetNextRow(this.ptCurrentCell.Y, GridElementStates.Visible);
            }
            moved = true;
            this.noSelectionChangeCount++;
            try
            {
                bool flag;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0319;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0247;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0112;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            break;
                        }
                        moved = false;
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_07AE;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_06E8;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_05D6;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_05BC;
                        }
                        moved = false;
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_10CB;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_1068;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_104E;
                        }
                        moved = false;
                        return true;

                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0D02;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0C05;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0A4C;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            goto Label_0A32;
                        }
                        moved = false;
                        return true;

                    default:
                        goto Label_1195;
                }
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_0557;
            Label_0112:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (((this.ptCurrentCell.X == -1) || (this.ptAnchorCell.X == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, lastRow);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0557;
            Label_0247:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0557;
            Label_0319:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_0557:
                return true;
            Label_05BC:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_09CC;
            Label_05D6:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.Y == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                    this.SetSelectedRowCore(lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_09CC;
            Label_06E8:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_09CC;
            Label_07AE:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            if (rowIndex >= this.ptAnchorCell.Y)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_09CC:
                return true;
            Label_0A32:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_0FFA;
            Label_0A4C:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.Y == -1) || (this.ptCurrentCell.Y == -1)) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                    }
                    else
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, num8, this.ptAnchorCell.Y, ref num9, lastRow);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                        this.SetSelectedRowCore(lastRow, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0FFA;
            Label_0C05:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(lastRow, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                goto Label_0FFA;
            Label_0D02:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, lastRow, true);
                        flag = this.ScrollIntoView(columnIndex, lastRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                        {
                            moved = false;
                        }
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            moved = false;
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            moved = false;
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.Y == -1)
                                {
                                    moved = false;
                                    return true;
                                }
                                if (rowIndex >= this.ptAnchorCell.Y)
                                {
                                    this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                                }
                                else
                                {
                                    this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                                }
                            }
                            else
                            {
                                this.SetSelectedRowCore(rowIndex, true);
                            }
                        }
                        else if (this.MultiSelect)
                        {
                            int num10 = this.ptCurrentCell.X;
                            int num11 = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                moved = false;
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num10, num10, this.ptAnchorCell.Y, ref num11, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false))
                        {
                            moved = false;
                        }
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, lastRow, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_0FFA:
                return true;
            Label_104E:
                if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_117F;
            Label_1068:
                if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(lastRow))
                {
                    moved = false;
                    return true;
                }
                if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
                {
                    moved = false;
                }
                goto Label_117F;
            Label_10CB:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    flag = this.ScrollIntoView(columnIndex, lastRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, lastRow))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(columnIndex, lastRow, true, false, false))
                    {
                        moved = false;
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        moved = false;
                        return true;
                    }
                    if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false))
                    {
                        moved = false;
                    }
                }
            Label_117F:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_1195:
            return true;
        }

        /// <summary>Processes the END key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The END key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEndKey(Keys keyData)
        {
            GridColumn lastColumn = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
            int lastVisibleColumnIndex = (lastColumn == null) ? -1 : lastColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
            if ((lastVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            break;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_05E8;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_034A;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0193;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_040E;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    default:
                        goto Label_06A7;
                }
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, lastRow);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_0193:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                            {
                                this.ClearSelection();
                                this.SelectRowRange(this.ptCurrentCell.Y, lastRow, true);
                            }
                            else
                            {
                                int oldEdgeColumnIndex = this.ptCurrentCell.X;
                                int oldEdgeRowIndex = this.ptCurrentCell.Y;
                                this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, lastRow);
                            }
                        }
                        else if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_034A:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                        {
                            this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                        }
                        else
                        {
                            this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            Label_040E:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                        }
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref num9, lastRow);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, lastRow, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                }
                return true;
            Label_05E8:
                if (this.ScrollIntoView(lastVisibleColumnIndex, lastRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, lastRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.Y >= 0))
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
                        }
                        else
                        {
                            this.SetSelectedRowCore(lastRow, true);
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedRowCore(lastRow, true);
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, lastRow, true, false, false);
                    }
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_06A7:
            return true;
        }

        /// <summary>Processes the ENTER key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        /// <exception cref="T:System.InvalidCastException">The ENTER key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEnterKey(Keys keyData)
        {
            bool moved = false;
            bool flag2 = true;
            bool flag3 = true;
            if ((keyData & Keys.Control) == Keys.None)
            {
                flag3 = false;
                keyData &= ~Keys.Shift;
                flag2 = this.ProcessDownKeyInternal(keyData, out moved);
            }
            if (!moved)
            {
                GridCell gridCurrentCell = null;
                if (this.EditMode == GridEditMode.EditOnEnter)
                {
                    if (this.ptCurrentCell.X != -1)
                    {
                        gridCurrentCell = this.CurrentCellInternal;
                        GridDataErrorEventArgs args = this.CommitEdit(ref gridCurrentCell, GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.WhenChanged, false, false, false, false, false);
                        if ((args != null) && args.ThrowException)
                        {
                            throw args.Exception;
                        }
                    }
                }
                else
                {
                    this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.WhenChanged, false, false, false, false, false, true, true, true);
                }
                if (!flag3 || !this.IsCurrentRowDirty)
                {
                    return flag2;
                }
                gridCurrentCell = null;
                int x = this.ptCurrentCell.X;
                int y = this.ptCurrentCell.Y;
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return flag2;
                }
                if (this.OnRowValidating(ref gridCurrentCell, x, y))
                {
                    return flag2;
                }
                if (this.IsInnerCellOutOfBounds(x, y))
                {
                    return flag2;
                }
                this.OnRowValidated(ref gridCurrentCell, x, y);
            }
            return flag2;
        }

        /// <summary>Processes the ESC key.</summary>
        /// <returns>true if the key was processed; otherwise, false. </returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessEscapeKey(Keys keyData)
        {
            if (!this.IsEscapeKeyEffective)
            {
                return false;
            }
            if ((this.gridOper[1] || this.gridOper[2]) || ((this.gridOper[0x80] || this.gridOper[0x100]) || this.gridOper[0x20]))
            {
                this.ResetTrackingState();
            }
            else
            {
                this.CancelEdit(true);
            }
            return true;
        }

        /// <summary>Processes the F2 key.</summary>
        /// <returns>true if the key was processed; otherwise, false. </returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.Exception">The F2 key would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        /// <exception cref="T:System.InvalidCastException">The F2 key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessF2Key(Keys keyData)
        {
            if ((((this.ptCurrentCell.X == -1) || this.IsCurrentCellInEditMode) || ((Control.ModifierKeys != Keys.None) || !this.ColumnEditable(this.ptCurrentCell.X))) || (this.IsSharedCellReadOnly(this.CurrentCellInternal, this.ptCurrentCell.Y) || ((this.EditMode != GridEditMode.EditOnKeystrokeOrF2) && (this.EditMode != GridEditMode.EditOnF2))))
            {
                return false;
            }
            this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
            this.BeginEditInternal(this.EditMode == GridEditMode.EditOnF2);
            return true;
        }

        /// <summary>Processes the HOME key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">The key that was pressed.</param>
        /// <exception cref="T:System.InvalidCastException">The HOME key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessHomeKey(Keys keyData)
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int firstVisibleColumnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((firstVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            break;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_05E8;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_033A;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0183;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.None)
                        {
                            goto Label_0414;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    default:
                        goto Label_0637;
                }
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, firstRow);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_0183:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptAnchorCell.X >= 0))
                        {
                            if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                            {
                                this.ClearSelection();
                                this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                            }
                            else
                            {
                                int oldEdgeColumnIndex = this.ptCurrentCell.X;
                                int oldEdgeRowIndex = this.ptCurrentCell.Y;
                                this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, firstRow);
                            }
                        }
                        else if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(firstRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        if ((this.ptCurrentCell.Y > -1) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None))
                        {
                            this.ClearSelection();
                            this.SetSelectedRowCore(firstRow, true);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_033A:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                        }
                        else
                        {
                            this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                    }
                    else
                    {
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                }
                return true;
            Label_0414:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                        }
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else if (this.MultiSelect && (this.ptCurrentCell.X >= 0))
                    {
                        int num7 = this.ptCurrentCell.X;
                        int num8 = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num7, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref num8, firstRow);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, !this.MultiSelect, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                    {
                        return true;
                    }
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X >= 0) && this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                return true;
            Label_05E8:
                if (this.ScrollIntoView(firstVisibleColumnIndex, firstRow, true))
                {
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0637:
            return true;
        }

        /// <summary>Processes the INSERT key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key to process.</param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessInsertKey(Keys keyData)
        {
            if ((((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Control) || (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == (Keys.Control | Keys.Shift)) && ((keyData & Keys.KeyCode) == Keys.C))) && (this.ClipboardCopyMode != GridClipboardCopyMode.Disable))
            {
                DataObject clipboardContent = this.GetClipboardContent();
                if (clipboardContent != null)
                {
                    Clipboard.SetDataObject(clipboardContent);
                    return true;
                }
            }
            return false;
        }

        /// <summary>Processes a key message and generates the appropriate control events.</summary>
        /// <returns>true if the message was processed; otherwise, false.</returns>
        /// <param name="m">A <see cref="T:System.Windows.Forms.Message"></see>, passed by reference, that represents the window message to process.</param>
        /// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override bool ProcessKeyEventArgs(ref Message m)
        {
            if ((m.Msg == 260) || (m.Msg == 0x100))
            {
                if (this.ptCurrentCell.X != -1)
                {
                    GridCell currentCellInternal = this.CurrentCellInternal;
                    if (((!this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X)) && !this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y)) && ((this.EditMode == GridEditMode.EditOnKeystroke) || (this.EditMode == GridEditMode.EditOnKeystrokeOrF2)))
                    {
                        KeyEventArgs e = new KeyEventArgs(((Keys) ((int) ((long) m.WParam))) | Control.ModifierKeys);
                        if ((e.KeyCode != Keys.ProcessKey) || (((int) m.LParam) != 1))
                        {
                            System.Type editType = currentCellInternal.EditType;
                            System.Type type2 = null;
                            if (editType == null)
                            {
                                type2 = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IGridEditingCell");
                            }
                            if (((editType != null) || (type2 == null)) && currentCellInternal.KeyEntersEditMode(e))
                            {
                                this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                                if (this.BeginEditInternal(((e.KeyCode != Keys.F2) || (Control.ModifierKeys != Keys.None)) || (this.EditMode != GridEditMode.EditOnKeystrokeOrF2)) && (this.editingControl != null))
                                {
                                    this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                                    this.gridState1[0x20] = true;
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            else if (this.gridState1[0x20] && (((m.Msg == 0x106) || (m.Msg == 0x102)) || (m.Msg == 0x286)))
            {
                this.gridState1[0x20] = false;
                if (this.editingControl != null)
                {
                    this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                    return true;
                }
            }
            return base.ProcessKeyEventArgs(ref m);
        }

        /// <summary>Previews a keyboard message.</summary>
        /// <returns>true if the message was processed; otherwise, false.</returns>
        /// <param name="m">A <see cref="T:System.Windows.Forms.Message"></see>, passed by reference, that represents the window message to process.</param>
        /// <exception cref="T:System.InvalidCastException">The key pressed would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override bool ProcessKeyPreview(ref Message m)
        {
            bool flag;
            KeyEventArgs e = new KeyEventArgs(((Keys) ((int) m.WParam)) | Control.ModifierKeys);
            switch (e.KeyCode)
            {
                case Keys.Escape:
                case Keys.Space:
                case Keys.Prior:
                case Keys.Next:
                case Keys.End:
                case Keys.Home:
                case Keys.Left:
                case Keys.Up:
                case Keys.Right:
                case Keys.Down:
                case Keys.Delete:
                case Keys.F2:
                case Keys.Tab:
                case Keys.Return:
                    flag = true;
                    break;

                default:
                    flag = false;
                    break;
            }
            if ((this.editingControl != null) && ((m.Msg == 0x100) || (m.Msg == 260)))
            {
                this.gridState2[0x2000] = ((IGridEditingControl) this.editingControl).EditingControlWantsInputKey(e.KeyData, flag);
            }
            if (!this.gridState2[0x2000] && flag)
            {
                if ((m.Msg != 0x100) && (m.Msg != 260))
                {
                    return true;
                }
                if (this.ProcessGridKey(e))
                {
                    return true;
                }
                this.gridState2[0x2000] = true;
            }
            return base.ProcessKeyPreview(ref m);
        }

        /// <summary>Processes the LEFT ARROW key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The LEFT ARROW key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessLeftKey(Keys keyData)
        {
            if (this.RightToLeftInternal)
            {
                return this.ProcessRightKeyPrivate(keyData);
            }
            return this.ProcessLeftKeyPrivate(keyData);
        }

        private bool ProcessLeftKeyPrivate(Keys keyData)
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int firstVisibleColumnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((firstVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int columnIndex = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                if (firstColumn != null)
                {
                    columnIndex = firstColumn.Index;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            break;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0802;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0300;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0519;
                        }
                        return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, firstVisibleColumnIndex, firstRow);

                    default:
                        goto Label_08B0;
                }
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, columnIndex, this.ptAnchorCell.Y, ref y, y);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0300:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                            }
                            else
                            {
                                this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0519:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.X == -1)
                                {
                                    return true;
                                }
                                if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                                {
                                    this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                                }
                                else
                                {
                                    this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                                }
                            }
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        else if (this.MultiSelect)
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, columnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0802:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_08B0:
            return true;
        }

        private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex)
        {
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        if (!shift)
                        {
                            goto Label_01A0;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0086;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_076E;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0760;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (!shift)
                        {
                            goto Label_03A0;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_02A9;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0298;
                        }
                        return true;

                    case GridSelectionMode.ColumnHeaderSelect:
                        if (!shift)
                        {
                            goto Label_0641;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_049E;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_048D;
                        }
                        return true;

                    default:
                        goto Label_07D0;
                }
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0252;
            Label_0086:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0252;
            Label_01A0:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0252:
                return true;
            Label_0298:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0446;
            Label_02A9:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.Y == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0446;
            Label_03A0:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0446:
                return true;
            Label_048D:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0723;
            Label_049E:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
                    }
                    else
                    {
                        int oldEdgeColumnIndex = this.ptCurrentCell.X;
                        int oldEdgeRowIndex = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0723;
            Label_0641:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0723:
                return true;
            Label_0760:
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_07BA;
            Label_076E:
                if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
            Label_07BA:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_07D0:
            return true;
        }

        /// <summary>Processes the PAGE DOWN key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The PAGE DOWN key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessNextKey(Keys keyData)
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            if (columnIndex == -1)
            {
                return false;
            }
            int rowIndex = -1;
            int numTotallyDisplayedFrozenRows = 0;
            if (this.ptCurrentCell.Y == -1)
            {
                rowIndex = this.Rows.GetFirstRow(GridElementStates.Visible);
                if (rowIndex == -1)
                {
                    return false;
                }
            }
            else
            {
                rowIndex = this.ptCurrentCell.Y;
            }
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) != GridElementStates.None)
            {
                if (this.displayedBandsInfo.FirstDisplayedScrollingRow > 0)
                {
                    int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                    if (!this.ScrollIntoView((this.ptCurrentCell.X == -1) ? columnIndex : this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    numTotallyDisplayedFrozenRows = this.Rows.GetRowCount(GridElementStates.Visible, this.ptCurrentCell.Y, firstRow) - 1;
                }
                else
                {
                    numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
                }
            }
            numTotallyDisplayedFrozenRows += this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
            int nextRow = rowIndex;
            if (numTotallyDisplayedFrozenRows == 0)
            {
                numTotallyDisplayedFrozenRows = 1;
            }
            while ((numTotallyDisplayedFrozenRows > 0) && (nextRow != -1))
            {
                nextRow = this.Rows.GetNextRow(rowIndex, GridElementStates.Visible);
                if (nextRow != -1)
                {
                    rowIndex = nextRow;
                    numTotallyDisplayedFrozenRows--;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    switch (this.SelectionMode)
                    {
                        case GridSelectionMode.CellSelect:
                        case GridSelectionMode.RowHeaderSelect:
                        case GridSelectionMode.ColumnHeaderSelect:
                            this.SetSelectedCellCore(columnIndex, rowIndex, true);
                            break;

                        case GridSelectionMode.FullRowSelect:
                            this.SetSelectedRowCore(rowIndex, true);
                            break;

                        case GridSelectionMode.FullColumnSelect:
                            this.SetSelectedColumnCore(columnIndex, true);
                            break;
                    }
                    this.ScrollIntoView(columnIndex, rowIndex, false);
                    if (!this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, false);
                    }
                    return true;
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_02CE;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_050A;
                        }
                        return true;

                    case GridSelectionMode.RowHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_039A;
                        }
                        return true;

                    default:
                        goto Label_0552;
                }
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, rowIndex);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_02CE:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.ClearSelection();
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if (this.ptAnchorCell.Y < rowIndex)
                        {
                            this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                        }
                        else
                        {
                            this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                        }
                    }
                    else
                    {
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_039A:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.ptAnchorCell.Y < rowIndex)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                    }
                    else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                }
                return true;
            Label_050A:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0552:
            return true;
        }

        /// <summary>Processes the PAGE UP key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The PAGE UP key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessPriorKey(Keys keyData)
        {
            int numTotallyDisplayedFrozenRows;
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            if (columnIndex == -1)
            {
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y == -1)
            {
                rowIndex = this.Rows.GetFirstRow(GridElementStates.Visible);
                if (rowIndex == -1)
                {
                    return false;
                }
            }
            else
            {
                rowIndex = this.ptCurrentCell.Y;
            }
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) != GridElementStates.None)
            {
                numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
            }
            else
            {
                numTotallyDisplayedFrozenRows = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
            }
            if (numTotallyDisplayedFrozenRows == 0)
            {
                numTotallyDisplayedFrozenRows = 1;
            }
            int previousRow = rowIndex;
            while ((numTotallyDisplayedFrozenRows > 0) && (previousRow != -1))
            {
                previousRow = this.Rows.GetPreviousRow(rowIndex, GridElementStates.Visible);
                if (previousRow != -1)
                {
                    rowIndex = previousRow;
                }
                numTotallyDisplayedFrozenRows--;
            }
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) != GridElementStates.None)
            {
                int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                if ((firstRow != -1) && !this.ScrollIntoView((this.ptCurrentCell.X == -1) ? columnIndex : this.ptCurrentCell.X, firstRow, true))
                {
                    return true;
                }
                rowIndex = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    switch (this.SelectionMode)
                    {
                        case GridSelectionMode.CellSelect:
                        case GridSelectionMode.RowHeaderSelect:
                        case GridSelectionMode.ColumnHeaderSelect:
                            this.SetSelectedCellCore(columnIndex, rowIndex, true);
                            break;

                        case GridSelectionMode.FullRowSelect:
                            this.SetSelectedRowCore(rowIndex, true);
                            break;

                        case GridSelectionMode.FullColumnSelect:
                            this.SetSelectedColumnCore(columnIndex, true);
                            break;
                    }
                    this.ScrollIntoView(columnIndex, rowIndex, false);
                    if (!this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                    {
                        this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, false);
                    }
                    return true;
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_02BF;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_04FB;
                        }
                        return true;

                    case GridSelectionMode.RowHeaderSelect:
                        if (this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            goto Label_038B;
                        }
                        return true;

                    default:
                        goto Label_0543;
                }
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (this.ptAnchorCell.X == -1)
                        {
                            return true;
                        }
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, rowIndex);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_02BF:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.ClearSelection();
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if (this.ptAnchorCell.Y < rowIndex)
                        {
                            this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                        }
                        else
                        {
                            this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                        }
                    }
                    else
                    {
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, false, false, false);
                }
                return true;
            Label_038B:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    if (((keyData & Keys.Shift) == Keys.Shift) && this.MultiSelect)
                    {
                        if (this.ptAnchorCell.Y == -1)
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.ptAnchorCell.Y < rowIndex)
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                            else
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                        }
                        else
                        {
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                    }
                    else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                }
                return true;
            Label_04FB:
                if ((this.ptCurrentCell.X != -1) && !this.IsRowOutOfBounds(rowIndex))
                {
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0543:
            return true;
        }

        /// <summary>Processes the RIGHT ARROW key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The RIGHT ARROW key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessRightKey(Keys keyData)
        {
            if (this.RightToLeftInternal)
            {
                return this.ProcessLeftKeyPrivate(keyData);
            }
            return this.ProcessRightKeyPrivate(keyData);
        }

        private bool ProcessRightKeyPrivate(Keys keyData)
        {
            GridColumn lastColumn = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None);
            int lastVisibleColumnIndex = (lastColumn == null) ? -1 : lastColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((lastVisibleColumnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int columnIndex = -1;
            if (this.ptCurrentCell.X != -1)
            {
                lastColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                if (lastColumn != null)
                {
                    columnIndex = lastColumn.Index;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            break;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_080B;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0301;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_051A;
                        }
                        return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, lastVisibleColumnIndex, firstRow);

                    default:
                        goto Label_08B9;
                }
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            int x = this.ptCurrentCell.X;
                            int y = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, columnIndex, this.ptAnchorCell.Y, ref y, y);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_0301:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                            {
                                this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                            }
                            else
                            {
                                this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedColumnCore(columnIndex, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_051A:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (columnIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                        {
                            return true;
                        }
                        if (this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.X == -1)
                                {
                                    return true;
                                }
                                if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, columnIndex))
                                {
                                    this.SelectColumnRange(this.ptAnchorCell.X, columnIndex, true);
                                }
                                else
                                {
                                    this.SelectColumnRange(columnIndex, this.ptAnchorCell.X, true);
                                }
                            }
                            else
                            {
                                this.SetSelectedColumnCore(columnIndex, true);
                            }
                        }
                        else if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.X == -1)
                            {
                                return true;
                            }
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, columnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                        }
                        this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            Label_080B:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (columnIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(columnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(columnIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_08B9:
            return true;
        }

        private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex)
        {
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        if (!shift)
                        {
                            goto Label_0169;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0086;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_06CE;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_06C0;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (!shift)
                        {
                            goto Label_0335;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0272;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0261;
                        }
                        return true;

                    case GridSelectionMode.ColumnHeaderSelect:
                        if (!shift)
                        {
                            goto Label_05A1;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0433;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                        this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                        if (!this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                        {
                            goto Label_0422;
                        }
                        return true;

                    default:
                        goto Label_0730;
                }
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_021B;
            Label_0086:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_021B;
            Label_0169:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_021B:
                return true;
            Label_0261:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_03DB;
            Label_0272:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_03DB;
            Label_0335:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_03DB:
                return true;
            Label_0422:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_0683;
            Label_0433:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                if (this.MultiSelect)
                {
                    if (this.ptAnchorCell.X == -1)
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        int oldEdgeColumnIndex = this.ptCurrentCell.X;
                        int oldEdgeRowIndex = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, oldEdgeRowIndex);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
                }
                else
                {
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
                goto Label_0683;
            Label_05A1:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
                    this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
                    if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                    {
                        return true;
                    }
                    if (this.Columns[this.ptCurrentCell.X].Selected)
                    {
                        this.ClearSelection();
                        this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
                    }
                    this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
                }
            Label_0683:
                return true;
            Label_06C0:
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
                goto Label_071A;
            Label_06CE:
                if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.Y == -1) || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
            Label_071A:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0730:
            return true;
        }

        /// <summary>Processes the SPACEBAR.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">One of the <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key to process.</param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessSpaceKey(Keys keyData)
        {
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) == Keys.Shift) && (this.ptCurrentCell.X != -1))
            {
                this.noSelectionChangeCount++;
                bool flag = false;
                if (this.selectedBandIndexes.Count > 8)
                {
                    this.inBulkPaintCount++;
                    flag = true;
                }
                try
                {
                    if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                    {
                        int num = 0;
                        while (num < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num] != this.ptCurrentCell.X)
                            {
                                this.SetSelectedColumnCore(this.selectedBandIndexes[num], false);
                            }
                            else
                            {
                                num++;
                            }
                        }
                        this.RemoveIndividuallySelectedCells();
                        if (!this.Columns[this.ptCurrentCell.X].Selected)
                        {
                            this.SetSelectedColumnCore(this.ptCurrentCell.X, true);
                        }
                        return true;
                    }
                    if (this.SelectionMode == GridSelectionMode.RowHeaderSelect)
                    {
                        int num2 = 0;
                        while (num2 < this.selectedBandIndexes.Count)
                        {
                            if (this.selectedBandIndexes[num2] != this.ptCurrentCell.Y)
                            {
                                this.SetSelectedRowCore(this.selectedBandIndexes[num2], false);
                            }
                            else
                            {
                                num2++;
                            }
                        }
                        this.RemoveIndividuallySelectedCells();
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) == GridElementStates.None)
                        {
                            this.SetSelectedRowCore(this.ptCurrentCell.Y, true);
                        }
                        return true;
                    }
                }
                finally
                {
                    this.NoSelectionChangeCount--;
                    if (flag)
                    {
                        this.ExitBulkPaint(-1, -1);
                    }
                }
            }
            return false;
        }

        /// <summary>Processes the TAB key.</summary>
        /// <returns>true if the key was processed; otherwise, false. </returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        /// <exception cref="T:System.InvalidCastException">The TAB key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        [UIPermission(SecurityAction.LinkDemand, Window=UIPermissionWindow.AllWindows)]
        protected bool ProcessTabKey(Keys keyData)
        {
            if (this.StandardTab)
            {
                if ((keyData & Keys.Control) == Keys.Control)
                {
                    if ((keyData & Keys.Shift) == Keys.Shift)
                    {
                        return ((this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell) && this.TabToPreviousCell());
                    }
                    if (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)
                    {
                        return this.TabToNextCell();
                    }
                }
                return false;
            }
            if ((keyData & Keys.Control) == Keys.Control)
            {
                return false;
            }
            if ((keyData & Keys.Shift) == Keys.Shift)
            {
                return ((this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell) && this.TabToPreviousCell());
            }
            return ((this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell) && this.TabToNextCell());
        }

        /// <summary>Processes the UP ARROW key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The UP ARROW key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the new current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would commit a cell value or enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessUpKey(Keys keyData)
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int rowIndex = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                rowIndex = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, GridElementStates.Visible);
            }
            this.noSelectionChangeCount++;
            try
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_02D5;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_021B;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_00FE;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_06E7;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0639;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0542;
                        }
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0531;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0F1C;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0EC5;
                        }
                        this.ClearSelection();
                        this.SetSelectedColumnCore(columnIndex, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0EB4;
                        }
                        return true;

                    case GridSelectionMode.RowHeaderSelect:
                        if ((keyData & Keys.Control) != Keys.Control)
                        {
                            goto Label_0BBC;
                        }
                        if ((keyData & Keys.Shift) != Keys.Shift)
                        {
                            goto Label_0AD7;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0936;
                        }
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            goto Label_0925;
                        }
                        return true;

                    default:
                        goto Label_0FCA;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_04CF;
            Label_00FE:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    int x = this.ptCurrentCell.X;
                    int y = this.ptCurrentCell.Y;
                    this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, firstRow);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_04CF;
            Label_021B:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_04CF;
            Label_02D5:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            int oldEdgeColumnIndex = this.ptCurrentCell.X;
                            int oldEdgeRowIndex = this.ptCurrentCell.Y;
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref oldEdgeColumnIndex, oldEdgeColumnIndex, this.ptAnchorCell.Y, ref oldEdgeRowIndex, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_04CF:
                return true;
            Label_0531:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_08C2;
            Label_0542:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_08C2;
            Label_0639:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_08C2;
            Label_06E7:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        this.ClearSelection();
                        if (this.MultiSelect)
                        {
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            if (this.ptAnchorCell.Y >= rowIndex)
                            {
                                this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                            }
                            else
                            {
                                this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                            }
                        }
                        else
                        {
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedRowCore(firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_08C2:
                return true;
            Label_0925:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_0E63;
            Label_0936:
                if (this.MultiSelect)
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if (((this.ptAnchorCell.X == -1) || (this.ptCurrentCell.X == -1)) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
                    }
                    else
                    {
                        int num8 = this.ptCurrentCell.X;
                        int num9 = this.ptCurrentCell.Y;
                        this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num8, num8, this.ptAnchorCell.Y, ref num9, firstRow);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
                        this.SetSelectedRowCore(firstRow, true);
                    }
                    else
                    {
                        this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                        this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_0E63;
            Label_0AD7:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(firstRow, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                }
                goto Label_0E63;
            Label_0BBC:
                if ((keyData & Keys.Shift) == Keys.Shift)
                {
                    if (this.ptCurrentCell.X == -1)
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(columnIndex, firstRow, true);
                        this.ScrollIntoView(columnIndex, firstRow, false);
                        if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            return true;
                        }
                        this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                    }
                    else
                    {
                        if (rowIndex == -1)
                        {
                            return true;
                        }
                        if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                        {
                            return true;
                        }
                        if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                        {
                            return true;
                        }
                        if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                        {
                            this.ClearSelection();
                            if (this.MultiSelect)
                            {
                                if (this.ptAnchorCell.Y == -1)
                                {
                                    return true;
                                }
                                if (this.ptAnchorCell.Y >= rowIndex)
                                {
                                    this.SelectRowRange(rowIndex, this.ptAnchorCell.Y, true);
                                }
                                else
                                {
                                    this.SelectRowRange(this.ptAnchorCell.Y, rowIndex, true);
                                }
                            }
                            this.SetSelectedRowCore(rowIndex, true);
                        }
                        else if (this.MultiSelect)
                        {
                            int num10 = this.ptCurrentCell.X;
                            int num11 = this.ptCurrentCell.Y;
                            if (this.ptAnchorCell.Y == -1)
                            {
                                return true;
                            }
                            this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref num10, num10, this.ptAnchorCell.Y, ref num11, rowIndex);
                        }
                        else
                        {
                            this.ClearSelection();
                            this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                        }
                        this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, !this.MultiSelect, false, false);
                    }
                }
                else if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedCellCore(columnIndex, firstRow, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Selected) != GridElementStates.None)
                    {
                        this.ClearSelection();
                        this.SetSelectedRowCore(rowIndex, true);
                    }
                    else
                    {
                        this.ClearSelection();
                        this.SetSelectedCellCore(this.ptCurrentCell.X, rowIndex, true);
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_0E63:
                return true;
            Label_0EB4:
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                goto Label_0FB4;
            Label_0EC5:
                if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
                {
                    return true;
                }
                if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
                goto Label_0FB4;
            Label_0F1C:
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                    this.SetSelectedColumnCore(columnIndex, true);
                    this.ScrollIntoView(columnIndex, firstRow, false);
                    if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        return true;
                    }
                    if (!this.ScrollIntoView(this.ptCurrentCell.X, rowIndex, true))
                    {
                        return true;
                    }
                    if ((this.ptCurrentCell.X == -1) || this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.SetCurrentCellAddressCore(this.ptCurrentCell.X, rowIndex, true, false, false);
                }
            Label_0FB4:
                return true;
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0FCA:
            return true;
        }

        /// <summary>Processes the 0 key.</summary>
        /// <returns>true if the key was processed; otherwise, false.</returns>
        /// <param name="keyData">A bitwise combination of <see cref="T:System.Windows.Forms.Keys"></see> values that represents the key or keys to process.</param>
        /// <exception cref="T:System.InvalidCastException">The 0 key would cause the control to enter edit mode, but the <see cref="P:MControl.GridView.GridCell.EditType"></see> property of the current cell does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.Exception">This action would cause the control to enter edit mode, but an error in the data source prevents the action and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. </exception>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected bool ProcessZeroKey(Keys keyData)
        {
            if (((this.ptCurrentCell.X != -1) && !this.IsCurrentCellInEditMode) && this.ColumnEditable(this.ptCurrentCell.X))
            {
                GridCell gridCell = this.CurrentCellInternal;
                if ((!this.IsSharedCellReadOnly(gridCell, this.ptCurrentCell.Y) && ((this.EditMode == GridEditMode.EditOnKeystroke) || (this.EditMode == GridEditMode.EditOnKeystrokeOrF2))) && (gridCell.EditType != null))
                {
                    this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
                    if (!this.BeginEditInternal(false))
                    {
                        return false;
                    }
                }
            }
            if (((keyData & (Keys.Alt | Keys.Control | Keys.Shift)) != Keys.Control) || !this.IsCurrentCellInEditMode)
            {
                return false;
            }
            GridCell currentCellInternal = this.CurrentCellInternal;
            object nullValue = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, false).NullValue;
            if ((nullValue != null) && ((currentCellInternal.FormattedValueType == null) || !currentCellInternal.FormattedValueType.IsAssignableFrom(nullValue.GetType())))
            {
                return false;
            }
            if (this.editingControl != null)
            {
                ((IGridEditingControl) this.editingControl).EditingControlFormattedValue = nullValue;
                ((IGridEditingControl) this.editingControl).EditingControlValueChanged = true;
                ((IGridEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
            }
            else
            {
                IGridEditingCell cell3 = currentCellInternal as IGridEditingCell;
                cell3.EditingCellFormattedValue = nullValue;
                cell3.EditingCellValueChanged = true;
                cell3.PrepareEditingCellForEdit(true);
                this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
            }
            this.NotifyCurrentCellDirty(true);
            return true;
        }

        private void PushAllowUserToAddRows()
        {
            if (this.AllowUserToAddRowsInternal)
            {
                if ((this.Columns.Count > 0) && (this.newRowIndex == -1))
                {
                    this.AddNewRow(false);
                }
            }
            else if (this.newRowIndex != -1)
            {
                this.Rows.RemoveAtInternal(this.newRowIndex, false);
            }
        }

        private bool PushFormattedValue(ref GridCell gridCurrentCell, object formattedValue, out Exception exception)
        {
            object obj2;
            exception = null;
            GridCellStyle inheritedEditingCellStyle = this.InheritedEditingCellStyle;
            GridCellParsingEventArgs args = this.OnCellParsing(this.ptCurrentCell.Y, this.ptCurrentCell.X, formattedValue, gridCurrentCell.ValueType, inheritedEditingCellStyle);
            if ((args.ParsingApplied && (args.Value != null)) && ((gridCurrentCell.ValueType != null) && gridCurrentCell.ValueType.IsAssignableFrom(args.Value.GetType())))
            {
                if (gridCurrentCell.RowIndex == -1)
                {
                    gridCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
                }
                return gridCurrentCell.SetValueInternal(this.ptCurrentCell.Y, args.Value);
            }
            try
            {
                obj2 = gridCurrentCell.ParseFormattedValue(formattedValue, args.InheritedCellStyle, null, null);
            }
            catch (Exception exception2)
            {
                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception2))
                {
                    throw;
                }
                exception = exception2;
                return false;
            }
            if (gridCurrentCell.RowIndex == -1)
            {
                gridCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
            }
            return gridCurrentCell.SetValueInternal(this.ptCurrentCell.Y, obj2);
        }

        private void RealeaseMouse()
        {
            Cursor.ClipInternal = Rectangle.Empty;
            base.CaptureInternal = false;
        }

        private void RecordCellMouseClick(GridCellMouseEventArgs dgvcme)
        {
            this.lastMouseClickInfo.button = dgvcme.Button;
            this.lastMouseClickInfo.timeStamp = DateTime.Now.Ticks;
            this.lastMouseClickInfo.x = dgvcme.X;
            this.lastMouseClickInfo.y = dgvcme.Y;
            this.lastMouseClickInfo.col = dgvcme.ColumnIndex;
            this.lastMouseClickInfo.row = dgvcme.RowIndex;
        }

        private void RefreshColumns()
        {
            bool visible = base.Visible;
            if (visible)
            {
                base.BeginUpdateInternal();
            }
            this.gridOper[0x400] = true;
            try
            {
                GridColumnCollection columns = this.Columns;
                GridColumn[] boundColumns = null;
                if (this.dataConnection != null)
                {
                    boundColumns = this.dataConnection.GetCollectionOfBoundGridColumns();
                }
                if (this.AutoGenerateColumns)
                {
                    this.AutoGenerateDataBoundColumns(boundColumns);
                }
                else
                {
                    for (int i = 0; i < columns.Count; i++)
                    {
                        columns[i].IsDataBoundInternal = false;
                        columns[i].BoundColumnIndex = -1;
                        columns[i].BoundColumnConverter = null;
                        if ((this.DataSource != null) && (columns[i].DataPropertyName.Length != 0))
                        {
                            this.MapGridColumnToDataBoundField(columns[i]);
                        }
                    }
                }
                if (this.DataSource != null)
                {
                    this.dataConnection.ApplySortingInformationFromBackEnd();
                }
            }
            finally
            {
                this.gridOper[0x400] = false;
                if (visible)
                {
                    base.EndUpdateInternal(false);
                    base.Invalidate(true);
                }
            }
        }

        private void RefreshColumnsAndRows()
        {
            this.Rows.ClearInternal(false);
            this.RefreshColumns();
            this.RefreshRows(true);
        }

        /// <summary>Refreshes the value of the current cell with the underlying cell value when the cell is in edit mode, discarding any previous value.</summary>
        /// <returns>true if successful; false if a <see cref="E:MControl.GridView.Grid.DataError"></see> event occurred.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public bool RefreshEdit()
        {
            if ((this.ptCurrentCell.X == -1) || !this.IsCurrentCellInEditMode)
            {
                return true;
            }
            GridCell currentCellInternal = this.CurrentCellInternal;
            GridCellStyle gridCellStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
            if (this.editingControl != null)
            {
                if (!this.InitializeEditingControlValue(ref gridCellStyle, currentCellInternal))
                {
                    return false;
                }
                if (((IGridEditingControl) this.editingControl).RepositionEditingControlOnValueChange)
                {
                    this.PositionEditingControl(true, true, false);
                }
                ((IGridEditingControl) this.editingControl).PrepareEditingControlForEdit(true);
                ((IGridEditingControl) this.editingControl).EditingControlValueChanged = false;
                this.IsCurrentCellDirtyInternal = false;
                return true;
            }
            if (this.InitializeEditingCellValue(ref gridCellStyle, ref currentCellInternal))
            {
                IGridEditingCell cell2 = currentCellInternal as IGridEditingCell;
                cell2.PrepareEditingCellForEdit(true);
                cell2.EditingCellValueChanged = false;
                this.IsCurrentCellDirtyInternal = false;
                return true;
            }
            return false;
        }

        private void RefreshRows(bool scrollIntoView)
        {
            bool visible = base.Visible;
            if (visible)
            {
                base.BeginUpdateInternal();
            }
            try
            {
                if (this.gridOper[0x20000])
                {
                    this.gridState2[0x400000] = true;
                }
                this.Rows.ClearInternal(true);
                if ((this.dataConnection != null) && (this.Columns.Count > 0))
                {
                    IList list = this.dataConnection.List;
                    if ((list != null) && (list.Count > 0))
                    {
                        int count = list.Count;
                        bool doNotChangePositionInTheCurrencyManager = this.dataConnection.DoNotChangePositionInTheCurrencyManager;
                        bool flag3 = !this.layout.dirty && !this.InSortOperation;
                        if (flag3)
                        {
                            this.dataConnection.DoNotChangePositionInTheCurrencyManager = true;
                        }
                        try
                        {
                            this.Rows.AddInternal(this.RowTemplateClone);
                            if (count > 1)
                            {
                                this.Rows.AddCopiesInternal(0, count - 1);
                            }
                        }
                        finally
                        {
                            this.dataConnection.DoNotChangePositionInTheCurrencyManager = doNotChangePositionInTheCurrencyManager;
                        }
                        if (flag3)
                        {
                            this.dataConnection.MatchCurrencyManagerPosition(scrollIntoView, true);
                        }
                    }
                }
            }
            finally
            {
                if (visible)
                {
                    base.EndUpdateInternal(false);
                    base.Invalidate(true);
                }
            }
        }

        private void RemoveIndividuallySelectedCells()
        {
            bool flag = false;
            if (this.individualSelectedCells.Count > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                while (this.individualSelectedCells.Count > 0)
                {
                    GridCell headCell = this.individualSelectedCells.HeadCell;
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException)
        {
            bool flag = false;
            if (this.individualSelectedCells.Count > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                while (this.individualSelectedCells.Count > 0)
                {
                    GridCell headCell = this.individualSelectedCells.HeadCell;
                    if ((headCell.ColumnIndex == columnIndexException) && (headCell.RowIndex == rowIndexException))
                    {
                        goto Label_0075;
                    }
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                    continue;
                Label_0055:
                    headCell = this.individualSelectedCells[1];
                    this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
                Label_0075:
                    if (this.individualSelectedCells.Count > 1)
                    {
                        goto Label_0055;
                    }
                    return;
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCellsInColumn(int columnIndex)
        {
            GridCell cell;
            int num = 0;
            int num2 = 0;
            bool flag = false;
            while (num < this.individualSelectedCells.Count)
            {
                cell = this.individualSelectedCells[num];
                if (cell.ColumnIndex == columnIndex)
                {
                    this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                    num2++;
                    if (num2 <= 8)
                    {
                        continue;
                    }
                    flag = true;
                    break;
                }
                num++;
            }
            if (flag)
            {
                this.inBulkPaintCount++;
                try
                {
                    while (num < this.individualSelectedCells.Count)
                    {
                        cell = this.individualSelectedCells[num];
                        if (cell.ColumnIndex == columnIndex)
                        {
                            this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                        }
                        else
                        {
                            num++;
                        }
                    }
                }
                finally
                {
                    this.ExitBulkPaint(columnIndex, -1);
                }
            }
        }

        private void RemoveIndividuallySelectedCellsInRow(int rowIndex)
        {
            int num = 0;
            while (num < this.individualSelectedCells.Count)
            {
                GridCell cell = this.individualSelectedCells[num];
                if (cell.RowIndex == rowIndex)
                {
                    this.SetSelectedCellCore(cell.ColumnIndex, cell.RowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex)
        {
            int num = 0;
            while (num < this.individualReadOnlyCells.Count)
            {
                GridCell cell = this.individualReadOnlyCells[num];
                if (cell.ColumnIndex == columnIndex)
                {
                    this.SetReadOnlyCellCore(cell.ColumnIndex, cell.RowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void RemoveIndividualReadOnlyCellsInRow(int rowIndex)
        {
            int num = 0;
            while (num < this.individualReadOnlyCells.Count)
            {
                GridCell cell = this.individualReadOnlyCells[num];
                if (cell.RowIndex == rowIndex)
                {
                    this.SetReadOnlyCellCore(cell.ColumnIndex, rowIndex, false);
                }
                else
                {
                    num++;
                }
            }
        }

        private void ResetBackgroundColor()
        {
            this.BackgroundColor = DefaultBackgroundBrush.Color;
        }

        private void ResetCurrentCell()
        {
            if ((this.ptCurrentCell.X != -1) && !this.SetCurrentCellAddressCore(-1, -1, true, true, false))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
            }
        }

        private void ResetGridColor()
        {
            this.GridColor = DefaultGridColor;
        }

        /// <summary>Resets the <see cref="P:MControl.GridView.Grid.Text"></see> property to its default value.</summary>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override void ResetText()
        {
            base.ResetText();
        }

        private void ResetTrackingState()
        {
            if ((this.horizScrollTimer != null) && this.horizScrollTimer.Enabled)
            {
                this.horizScrollTimer.Enabled = false;
            }
            if ((this.vertScrollTimer != null) && this.vertScrollTimer.Enabled)
            {
                this.vertScrollTimer.Enabled = false;
            }
            this.gridOper[1] = false;
            this.gridOper[2] = false;
            this.gridOper[0x20] = false;
            this.gridOper[0x80] = false;
            this.gridOper[0x100] = false;
            this.gridOper[4] = false;
            this.gridOper[8] = false;
            this.gridOper[0x10] = false;
            this.trackColumn = -1;
            this.trackRow = -1;
            this.ptMouseDownCell.X = -2;
            this.ptMouseDownCell.Y = -2;
            if (this.currentRowSplitBar != -1)
            {
                base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
                this.lastRowSplitBar = this.currentRowSplitBar = -1;
            }
            if (this.currentColSplitBar != -1)
            {
                base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
                this.lastColSplitBar = this.currentColSplitBar = -1;
            }
            if (this.lastHeaderShadow != -1)
            {
                this.gridState2[0x400] = false;
                this.trackColumnEdge = -1;
                this.lastHeaderShadow = -1;
                base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
            }
            this.RealeaseMouse();
        }

        internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows)
        {
            this.PerformLayoutPrivate(useRowShortcut, computeVisibleRows, true, !useRowShortcut);
            if (!useRowShortcut)
            {
                base.Invalidate();
                this.InvalidateScrollBars();
            }
        }

        private void RestoreRowsCachedThickness()
        {
            this.inBulkPaintCount++;
            this.inBulkLayoutCount++;
            try
            {
                for (int i = this.Rows.GetFirstRow(GridElementStates.Visible); i != -1; i = this.Rows.GetNextRow(i, GridElementStates.Visible))
                {
                    int num2;
                    int num3;
                    GridRow row = this.Rows.SharedRow(i);
                    row.GetHeightInfo(i, out num2, out num3);
                    if ((num2 != row.CachedThickness) && !this.OnRowHeightInfoPushed(i, row.CachedThickness, num3))
                    {
                        row.ThicknessInternal = row.CachedThickness;
                    }
                }
            }
            finally
            {
                this.ExitBulkLayout(true);
                this.ExitBulkPaint(-1, -1);
            }
        }

        private bool RowIsResizable(int rowIndex)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & GridElementStates.ResizableSet) == GridElementStates.ResizableSet)
            {
                return ((rowState & GridElementStates.Resizable) == GridElementStates.Resizable);
            }
            return this.AllowUserToResizeRows;
        }

        private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex)
        {
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if ((rowState & GridElementStates.Visible) == GridElementStates.None)
            {
                return false;
            }
            if ((rowState & GridElementStates.Frozen) != GridElementStates.None)
            {
                return (rowIndex <= lastDisplayedFrozenRowIndex);
            }
            return (((this.displayedBandsInfo.FirstDisplayedScrollingRow != -1) && (rowIndex >= this.displayedBandsInfo.FirstDisplayedScrollingRow)) && (rowIndex <= lastDisplayedScrollingRowIndex));
        }

        private void ScrollBar_MouseEnter(object sender, EventArgs e)
        {
            if (this.gridState2[0x20])
            {
                this.OnMouseEnter(EventArgs.Empty);
            }
            this.UpdateMouseEnteredCell(null, null);
        }

        private void ScrollBar_MouseLeave(object sender, EventArgs e)
        {
            this.UpdateMouseEnteredCell(null, null);
            Point pt = base.PointToClient(Control.MousePosition);
            if (!base.ClientRectangle.Contains(pt))
            {
                this.OnMouseLeave(EventArgs.Empty);
            }
        }

        private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
        {
            if (((this.displayedBandsInfo.FirstDisplayedScrollingCol != -1) && !this.Columns[columnIndex].Frozen) && ((columnIndex != this.displayedBandsInfo.FirstDisplayedScrollingCol) || (this.negOffset > 0)))
            {
                int num;
                if (this.Columns.DisplayInOrder(columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol))
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = this.Columns.GetColumnCount(GridElementStates.Visible, columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol);
                    if (this.negOffset > 0)
                    {
                        num++;
                    }
                    this.ScrollColumns(-num);
                }
                else if ((columnIndex == this.displayedBandsInfo.FirstDisplayedScrollingCol) && (this.negOffset > 0))
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    this.ScrollColumns(-1);
                }
                else if ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1) || ((this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != columnIndex) && this.Columns.DisplayInOrder(this.displayedBandsInfo.LastTotallyDisplayedScrollingCol, columnIndex)))
                {
                    int num3;
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = 0;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    if (this.RightToLeftInternal)
                    {
                        num3 = this.GetColumnXFromIndex(columnIndex) - this.Columns[columnIndex].Width;
                        while ((num3 < this.layout.Data.X) && this.Columns.DisplayInOrder(firstDisplayedScrollingCol, columnIndex))
                        {
                            num3 += this.Columns[firstDisplayedScrollingCol].Width;
                            if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                            {
                                num3 -= this.negOffset;
                            }
                            num++;
                            if (num3 < this.layout.Data.X)
                            {
                                firstDisplayedScrollingCol = this.Columns.GetNextColumn(this.Columns[firstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None).Index;
                            }
                        }
                    }
                    else
                    {
                        num3 = this.GetColumnXFromIndex(columnIndex) + this.Columns[columnIndex].Width;
                        while ((num3 > this.layout.Data.Right) && this.Columns.DisplayInOrder(firstDisplayedScrollingCol, columnIndex))
                        {
                            num3 -= this.Columns[firstDisplayedScrollingCol].Width;
                            if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                            {
                                num3 += this.negOffset;
                            }
                            num++;
                            if (num3 > this.layout.Data.Right)
                            {
                                firstDisplayedScrollingCol = this.Columns.GetNextColumn(this.Columns[firstDisplayedScrollingCol], GridElementStates.Visible, GridElementStates.None).Index;
                            }
                        }
                    }
                    if (num != 0)
                    {
                        this.ScrollColumns(num);
                    }
                }
            }
            return true;
        }

        private void ScrollColumns(int columns)
        {
            GridColumn column = null;
            GridColumn column2;
            int num = 0;
            if (columns > 0)
            {
                if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
                {
                    column2 = this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol];
                    while ((num < columns) && (column2 != null))
                    {
                        column2 = this.Columns.GetNextColumn(column2, GridElementStates.Visible, GridElementStates.None);
                        num++;
                    }
                    if (column2 == null)
                    {
                        return;
                    }
                }
                column2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                num = 0;
                while ((num < columns) && (column2 != null))
                {
                    column2 = this.Columns.GetNextColumn(column2, GridElementStates.Visible, GridElementStates.None);
                    num++;
                }
                column = column2;
            }
            if (columns < 0)
            {
                column2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                if (this.negOffset > 0)
                {
                    num++;
                }
                while ((num < -columns) && (column2 != null))
                {
                    column2 = this.Columns.GetPreviousColumn(column2, GridElementStates.Visible, GridElementStates.Frozen);
                    num++;
                }
                column = column2;
                if (column == null)
                {
                    if (this.negOffset == 0)
                    {
                        this.FlushDisplayedChanged();
                        return;
                    }
                    column = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
                }
            }
            int num2 = 0;
            for (GridColumn column3 = this.Columns.GetFirstColumn(GridElementStates.Visible, GridElementStates.Frozen); column3 != column; column3 = this.Columns.GetNextColumn(column3, GridElementStates.Visible, GridElementStates.None))
            {
                num2 += column3.Thickness;
            }
            this.HorizontalOffset = num2;
        }

        private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange)
        {
            bool committed = false;
            if ((this.ptCurrentCell.X >= 0) && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)))
            {
                if (!this.CommitEditForOperation(columnIndex, rowIndex, forCurrentCellChange))
                {
                    return false;
                }
                committed = true;
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    return false;
                }
            }
            if (!this.ScrollColumnIntoView(columnIndex, rowIndex, committed, forCurrentCellChange))
            {
                return false;
            }
            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
            {
                return false;
            }
            return this.ScrollRowIntoView(columnIndex, rowIndex, committed, forCurrentCellChange);
        }

        private void ScrollRectangles(MControl.Util.NativeMethods.RECT[] rects, int change)
        {
            if (rects != null)
            {
                if (Control.MouseButtons != MouseButtons.None)
                {
                    this.gridState1[0x800] = true;
                }
                for (int i = 0; i < rects.Length; i++)
                {
                    MControl.Util.NativeMethods.RECT rectScrollRegion = rects[i];
                    System.Windows.Forms.SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), change, 0, ref rectScrollRegion, ref rectScrollRegion);
                }
            }
        }

        private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
        {
            if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Frozen) == GridElementStates.None)
            {
                int num;
                if (rowIndex < this.displayedBandsInfo.FirstDisplayedScrollingRow)
                {
                    if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                    {
                        return false;
                    }
                    num = this.Rows.GetRowCount(GridElementStates.Visible, rowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    this.ScrollRowsByCount(-num, (num > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
                }
                else if ((this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0) && (rowIndex > this.displayedBandsInfo.FirstDisplayedScrollingRow))
                {
                    num = 0;
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    int num3 = this.GetRowYFromIndex(rowIndex) + this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                    while ((num3 > this.layout.Data.Bottom) && (rowIndex > firstDisplayedScrollingRow))
                    {
                        num3 -= this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                        num++;
                        if (num3 > this.layout.Data.Bottom)
                        {
                            firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                        }
                    }
                    if (num != 0)
                    {
                        if ((!committed && (this.ptCurrentCell.X >= 0)) && !this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, forCurrentCellChange && ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex)), this.ptCurrentCell.Y != rowIndex))
                        {
                            return false;
                        }
                        this.ScrollRowsByCount(num, (num > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
                    }
                }
            }
            return true;
        }

        private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType)
        {
            bool flag = false;
            this.verticalOffset -= deltaY;
            if (this.vertScrollBar.Enabled)
            {
                this.vertScrollBar.Value = this.verticalOffset;
            }
            this.ClearRegionCache();
            int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
            Rectangle data = this.layout.Data;
            if (this.layout.RowHeadersVisible)
            {
                data = Rectangle.Union(data, this.layout.RowHeaders);
                if (this.SingleHorizontalBorderAdded)
                {
                    data.Y++;
                    data.Height--;
                    flag = true;
                }
            }
            else if (this.SingleVerticalBorderAdded)
            {
                data.X--;
                data.Width++;
            }
            data.Y += rowsHeight;
            data.Height -= rowsHeight;
            if ((this.editingControl != null) && ((this.Rows.GetRowState(this.ptCurrentCell.Y) & GridElementStates.Frozen) == GridElementStates.None))
            {
                this.PositionEditingControl(true, false, false);
            }
            if (Control.MouseButtons != MouseButtons.None)
            {
                this.gridState1[0x800] = true;
            }
            this.UpdateMouseEnteredCell(null, null);
            MControl.Util.NativeMethods.RECT rectScrollRegion = MControl.Util.NativeMethods.RECT.FromXYWH(data.X, data.Y, data.Width, data.Height);
            System.Windows.Forms.SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), 0, deltaY, ref rectScrollRegion, ref rectScrollRegion);
            if (flag)
            {
                data.X = this.layout.Inside.X;
                data.Y = this.layout.Inside.Y;
                data.Width = this.layout.RowHeaders.Width;
                data.Height = 1;
                base.Invalidate(data);
            }
            if (!this.gridState2[0x4000])
            {
                int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible, GridElementStates.Frozen);
                int newValue = this.Rows.GetRowCount(GridElementStates.Visible, firstRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                this.OnScroll(scrollEventType, newValue - rowCount, newValue, ScrollOrientation.VerticalScroll);
            }
        }

        private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType)
        {
            int deltaY = 0;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (rows > 0)
            {
                for (int i = rows; i > 0; i--)
                {
                    deltaY -= this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                }
                if (firstDisplayedScrollingRow != -1)
                {
                    int fromRowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    this.ComputeVisibleRows();
                    if (this.displayedBandsInfo.FirstDisplayedScrollingRow > fromRowIndex)
                    {
                        deltaY = -this.Rows.GetRowsHeight(GridElementStates.Visible, fromRowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        rows = this.Rows.GetRowCount(GridElementStates.Visible, fromRowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                    }
                    else
                    {
                        rows = 0;
                    }
                }
            }
            else
            {
                for (int j = rows; j < 0; j++)
                {
                    firstDisplayedScrollingRow = this.Rows.GetPreviousRow(firstDisplayedScrollingRow, GridElementStates.Visible, GridElementStates.Frozen);
                    if (firstDisplayedScrollingRow != -1)
                    {
                        deltaY += this.Rows.SharedRow(firstDisplayedScrollingRow).GetHeight(firstDisplayedScrollingRow);
                    }
                }
                if (firstDisplayedScrollingRow != -1)
                {
                    this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
                    this.ComputeVisibleRows();
                }
            }
            if ((firstDisplayedScrollingRow != -1) && (rows != 0))
            {
                this.ScrollRows(rows, deltaY, scrollEventType);
            }
            this.FlushDisplayedChanged();
        }

        private void ScrollRowsByHeight(int height)
        {
            int num;
            int num2 = 0;
            int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            int rowIndex = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (height > 0)
            {
                for (num = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex); num <= height; num += this.Rows.SharedRow(rowIndex).GetHeight(rowIndex))
                {
                    rowIndex = this.Rows.GetNextRow(rowIndex, GridElementStates.Visible);
                    if (rowIndex == -1)
                    {
                        throw new InvalidOperationException();
                    }
                }
            }
            else
            {
                rowIndex = this.Rows.GetPreviousRow(rowIndex, GridElementStates.Visible, GridElementStates.Frozen);
                num = -this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
                while (num >= height)
                {
                    int num5 = this.Rows.GetPreviousRow(rowIndex, GridElementStates.Visible, GridElementStates.Frozen);
                    if (num5 == -1)
                    {
                        break;
                    }
                    num -= this.Rows.SharedRow(num5).GetHeight(num5);
                    if (num >= height)
                    {
                        rowIndex = num5;
                    }
                }
            }
            this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
            this.ComputeVisibleRows();
            ScrollEventType endScroll = ScrollEventType.EndScroll;
            int rowCount = 0;
            if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
            {
                num2 = this.Rows.GetRowsHeight(GridElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                rowCount = this.Rows.GetRowCount(GridElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
                endScroll = (rowCount > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement;
            }
            else if (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow)
            {
                num2 = -this.Rows.GetRowsHeight(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
                rowCount = -this.Rows.GetRowCount(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
                endScroll = (rowCount < -1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement;
            }
            if (num2 != 0)
            {
                this.ScrollRows(rowCount, -num2, endScroll);
            }
            this.FlushDisplayedChanged();
        }

        /// <summary>Selects all the cells in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public void SelectAll()
        {
            GridColumn column;
            if (!this.MultiSelect)
            {
                return;
            }
            this.inBulkPaintCount++;
            this.noDimensionChangeCount++;
            this.noSelectionChangeCount++;
            try
            {
                int count;
                int num2;
                int num3;
                int num5;
                int num6;
                int num7;
                int num8;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        count = this.Columns.Count;
                        num2 = 0;
                        num3 = this.Rows.Count;
                        goto Label_009D;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        num5 = 0;
                        num6 = this.Rows.Count;
                        goto Label_00DA;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        num7 = 0;
                        num8 = this.Columns.Count;
                        goto Label_0117;

                    default:
                        goto Label_0144;
                }
            Label_0077:
                GridRow row1 = this.Rows[num2];
                for (int i = 0; i < count; i++)
                {
                    this.SetSelectedCellCore(i, num2, true);
                }
                num2++;
            Label_009D:
                if (num2 < num3)
                {
                    goto Label_0077;
                }
                goto Label_0144;
            Label_00B5:
                if ((this.Rows.GetRowState(num5) & GridElementStates.Selected) == GridElementStates.None)
                {
                    this.SetSelectedRowCore(num5, true);
                }
                num5++;
            Label_00DA:
                if (num5 < num6)
                {
                    goto Label_00B5;
                }
                goto Label_0144;
            Label_00F4:
                if (!this.Columns[num7].Selected)
                {
                    this.SetSelectedColumnCore(num7, true);
                }
                num7++;
            Label_0117:
                if (num7 < num8)
                {
                    goto Label_00F4;
                }
            }
            finally
            {
                this.noDimensionChangeCount--;
                this.noSelectionChangeCount--;
                this.ExitBulkPaint(-1, -1);
            }
        Label_0144:
            column = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((column != null) && (firstRow != -1))
            {
                this.ptAnchorCell.X = column.Index;
                this.ptAnchorCell.Y = firstRow;
            }
            else
            {
                this.ptAnchorCell.X = -1;
                this.ptAnchorCell.Y = -1;
            }
            if (this.noSelectionChangeCount == 0)
            {
                this.FlushSelectionChanged();
            }
        }

        private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
        {
            bool flag = false;
            if ((rowIndexTo - rowIndexFrom) > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                if (select)
                {
                    int columnIndex = columnIndexFrom;
                    do
                    {
                        for (int i = rowIndexFrom; i <= rowIndexTo; i++)
                        {
                            this.SetSelectedCellCore(columnIndex, i, true);
                        }
                        if (columnIndex != columnIndexTo)
                        {
                            columnIndex = this.Columns.GetNextColumn(this.Columns[columnIndex], GridElementStates.Visible, GridElementStates.None).Index;
                        }
                    }
                    while (columnIndex != columnIndexTo);
                    if (columnIndexFrom != columnIndexTo)
                    {
                        for (int j = rowIndexFrom; j <= rowIndexTo; j++)
                        {
                            this.SetSelectedCellCore(columnIndex, j, true);
                        }
                    }
                }
                else
                {
                    int index = columnIndexTo;
                    do
                    {
                        for (int k = rowIndexTo; k >= rowIndexFrom; k--)
                        {
                            this.SetSelectedCellCore(index, k, false);
                        }
                        if (index != columnIndexFrom)
                        {
                            index = this.Columns.GetPreviousColumn(this.Columns[index], GridElementStates.Visible, GridElementStates.None).Index;
                        }
                    }
                    while (index != columnIndexFrom);
                    if (columnIndexFrom != columnIndexTo)
                    {
                        for (int m = rowIndexTo; m >= rowIndexFrom; m--)
                        {
                            this.SetSelectedCellCore(index, m, false);
                        }
                    }
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
        {
            int num;
            int num2;
            int num3;
            int num4;
            if (this.Columns.DisplayInOrder(columnIndexFrom, columnIndexTo))
            {
                num = columnIndexFrom;
                num3 = columnIndexTo;
            }
            else
            {
                num = columnIndexTo;
                num3 = columnIndexFrom;
            }
            if (rowIndexFrom < rowIndexTo)
            {
                num2 = rowIndexFrom;
                num4 = rowIndexTo;
            }
            else
            {
                num2 = rowIndexTo;
                num4 = rowIndexFrom;
            }
            this.SelectCellRange(num, num2, num3, num4, select);
        }

        private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select)
        {
            int integer = columnIndexFrom;
            do
            {
                if (select)
                {
                    if (!this.selectedBandIndexes.Contains(integer))
                    {
                        this.SetSelectedColumnCore(integer, true);
                    }
                }
                else
                {
                    this.SetSelectedColumnCore(integer, false);
                }
                if (integer != columnIndexTo)
                {
                    integer = this.Columns.GetNextColumn(this.Columns[integer], GridElementStates.Visible, GridElementStates.None).Index;
                }
            }
            while (integer != columnIndexTo);
            if (columnIndexFrom != columnIndexTo)
            {
                if (select)
                {
                    if (!this.selectedBandIndexes.Contains(columnIndexTo))
                    {
                        this.SetSelectedColumnCore(columnIndexTo, true);
                    }
                }
                else
                {
                    this.SetSelectedColumnCore(columnIndexTo, false);
                }
            }
        }

        private GridCell SelectedCell(int index)
        {
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                    if (index >= this.individualSelectedCells.Count)
                    {
                        break;
                    }
                    return this.individualSelectedCells[index];

                case GridSelectionMode.FullRowSelect:
                case GridSelectionMode.RowHeaderSelect:
                {
                    int num4 = 0;
                    int count = this.selectedBandIndexes.Count;
                    while ((num4 < count) && (index >= 0))
                    {
                        if (index >= this.Columns.Count)
                        {
                            index -= this.Columns.Count;
                            num4++;
                        }
                        else
                        {
                            int rowIndex = this.selectedBandIndexes[num4];
                            return this.Rows.SharedRow(rowIndex).Cells[index];
                        }
                    }
                    if ((this.SelectionMode == GridSelectionMode.RowHeaderSelect) && (index < this.individualSelectedCells.Count))
                    {
                        return this.individualSelectedCells[index];
                    }
                    break;
                }
                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                {
                    int num = 0;
                    int num2 = this.selectedBandIndexes.Count;
                    while ((num < num2) && (index >= 0))
                    {
                        if (index >= this.Rows.Count)
                        {
                            index -= this.Rows.Count;
                            num++;
                        }
                        else
                        {
                            int num3 = this.selectedBandIndexes[num];
                            return this.Rows.SharedRow(index).Cells[num3];
                        }
                    }
                    if ((this.SelectionMode != GridSelectionMode.ColumnHeaderSelect) || (index >= this.individualSelectedCells.Count))
                    {
                        break;
                    }
                    return this.individualSelectedCells[index];
                }
            }
            return null;
        }

        private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select)
        {
            bool flag = false;
            if ((rowIndexTo - rowIndexFrom) > 8)
            {
                this.inBulkPaintCount++;
                flag = true;
            }
            try
            {
                if (select)
                {
                    for (int i = rowIndexFrom; i <= rowIndexTo; i++)
                    {
                        if ((this.Rows.GetRowState(i) & GridElementStates.Selected) == GridElementStates.None)
                        {
                            this.SetSelectedRowCore(i, true);
                        }
                    }
                }
                else
                {
                    for (int j = rowIndexTo; j >= rowIndexFrom; j--)
                    {
                        this.SetSelectedRowCore(j, false);
                    }
                }
            }
            finally
            {
                if (flag)
                {
                    this.ExitBulkPaint(-1, -1);
                }
            }
        }

        private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection)
        {
            if (!this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick))
            {
                return false;
            }
            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
            {
                return false;
            }
            if (clearSelection)
            {
                this.ClearSelection(columnIndex, rowIndex, true);
                goto Label_00EB;
            }
            if (forceCurrentCellSelection)
            {
                this.SetSelectedElementCore(columnIndex, rowIndex, true);
                goto Label_00EB;
            }
            if (this.MultiSelect && ((this.individualSelectedCells.Count + this.selectedBandIndexes.Count) > 1))
            {
                return true;
            }
            if (this.individualSelectedCells.Count == 1)
            {
                GridCell headCell = this.individualSelectedCells.HeadCell;
                if ((headCell.ColumnIndex != columnIndex) || (headCell.RowIndex != rowIndex))
                {
                    return true;
                }
            }
            else if (this.selectedBandIndexes.Count == 1)
            {
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        if (this.selectedBandIndexes.HeadInt == rowIndex)
                        {
                            goto Label_00E2;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if (this.selectedBandIndexes.HeadInt == columnIndex)
                        {
                            goto Label_00E2;
                        }
                        return true;
                }
            }
        Label_00E2:
            this.SetSelectedElementCore(columnIndex, rowIndex, true);
        Label_00EB:
            return true;
        }

        /// <summary>This member overrides <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)"></see>.</summary>
        /// <param name="y">The new <see cref="P:System.Windows.Forms.Control.Top"></see> property value of the control. </param>
        /// <param name="specified">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified"></see> values. </param>
        /// <param name="width">The new <see cref="P:System.Windows.Forms.Control.Width"></see> property value of the control. </param>
        /// <param name="height">The new <see cref="P:System.Windows.Forms.Control.Height"></see> property value of the control. </param>
        /// <param name="x">The new <see cref="P:System.Windows.Forms.Control.Left"></see> property value of the control. </param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">One or both of the width or height values exceeds the maximum value of 8,388,607. </exception>
        protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
        {
            if (((specified & BoundsSpecified.Width) == BoundsSpecified.Width) && (width > 0x7fffff))
            {
                object[] args = new object[] { 0x7fffff.ToString(CultureInfo.CurrentCulture) };
                throw new ArgumentOutOfRangeException("width", width, MControl.GridView.RM.GetString("Grid_SizeTooLarge", args));
            }
            if (((specified & BoundsSpecified.Height) == BoundsSpecified.Height) && (height > 0x7fffff))
            {
                object[] objArray2 = new object[] { 0x7fffff.ToString(CultureInfo.CurrentCulture) };
                throw new ArgumentOutOfRangeException("height", height, MControl.GridView.RM.GetString("Grid_SizeTooLarge", objArray2));
            }
            base.SetBoundsCore(x, y, width, height, specified);
        }

        private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns)
        {
            using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersHeight))
            {
                this.columnHeadersHeight = columnHeadersHeight;
                if (this.AutoSize)
                {
                    this.InvalidateInside();
                }
                else if (this.layout.ColumnHeadersVisible)
                {
                    this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, true);
                    this.InvalidateInside();
                }
                this.OnColumnHeadersHeightChanged(EventArgs.Empty);
            }
        }

        /// <summary>Sets the currently active cell.</summary>
        /// <returns>true if the current cell was successfully set; otherwise, false.</returns>
        /// <param name="validateCurrentCell">true to validate the value in the old current cell and cancel the change if validation fails; otherwise, false.</param>
        /// <param name="columnIndex">The index of the column containing the cell.</param>
        /// <param name="throughMouseClick">true if the current cell is being set as a result of a mouse click; otherwise, false.</param>
        /// <param name="rowIndex">The index of the row containing the cell.</param>
        /// <param name="setAnchorCellAddress">true to make the new current cell the anchor cell for a subsequent multicell selection using the SHIFT key; otherwise, false.</param>
        /// <exception cref="T:System.InvalidCastException">The new current cell tried to enter edit mode, but its <see cref="P:MControl.GridView.GridCell.EditType"></see> property does not indicate a class that derives from <see cref="T:System.Windows.Forms.Control"></see> and implements <see cref="T:System.Windows.Forms.IGridEditingControl"></see>.</exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than 0 or greater than the number of columns in the control minus 1, and rowIndex is not -1.-or-rowIndex is less than 0 or greater than the number of rows in the control minus 1, and columnIndex is not -1.</exception>
        /// <exception cref="T:System.InvalidOperationException">The specified cell has a <see cref="P:MControl.GridView.GridCell.Visible"></see> property value of false.-or-This method was called for a reason other than the underlying data source being reset, and another thread is currently executing this method.</exception>
        protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
        {
            if (((columnIndex < -1) || ((columnIndex >= 0) && (rowIndex == -1))) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if (((rowIndex < -1) || ((columnIndex == -1) && (rowIndex >= 0))) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (((columnIndex > -1) && (rowIndex > -1)) && !this.IsSharedCellVisible(this.Rows.SharedRow(rowIndex).Cells[columnIndex], rowIndex))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CurrentCellCannotBeInvisible"));
            }
            if (this.gridOper[0x20000] && ((this.dataConnection == null) || !this.dataConnection.ProcessingListChangedEvent))
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_SetCurrentCellAddressCoreNotReentrant"));
            }
            this.gridOper[0x20000] = true;
            try
            {
                GridCell gridCell = null;
                if (columnIndex > -1)
                {
                    if ((this.ptCurrentCell.X != columnIndex) || (this.ptCurrentCell.Y != rowIndex))
                    {
                        GridCell currentCellInternal;
                        if (this.gridState1[0x400000])
                        {
                            this.gridState1[0x400000] = false;
                            this.ptCurrentCell.X = columnIndex;
                            this.ptCurrentCell.Y = rowIndex;
                            if (this.cachedEditingControl != null)
                            {
                                this.editingControl = this.cachedEditingControl;
                                ((IGridEditingControl) this.editingControl).EditingControlRowIndex = rowIndex;
                                this.cachedEditingControl = null;
                                this.PositionEditingControl(true, true, false);
                            }
                            this.OnCurrentCellChanged(EventArgs.Empty);
                            return true;
                        }
                        int x = this.ptCurrentCell.X;
                        int y = this.ptCurrentCell.Y;
                        if (x >= 0)
                        {
                            currentCellInternal = this.CurrentCellInternal;
                            if (!this.EndEdit(GridDataErrorContexts.CurrentCellChange | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, validateCurrentCell ? GridValidateCellInternal.Always : GridValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell && (y != rowIndex), false, false, this.EditMode != GridEditMode.EditOnEnter, false, false))
                            {
                                return false;
                            }
                            if (!this.IsInnerCellOutOfBounds(x, y))
                            {
                                currentCellInternal = this.Rows.SharedRow(y).Cells[x];
                                if (currentCellInternal.LeaveUnsharesRowInternal(y, throughMouseClick))
                                {
                                    currentCellInternal = this.Rows[y].Cells[x];
                                }
                                currentCellInternal.OnLeaveInternal(y, throughMouseClick);
                            }
                            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                return false;
                            }
                            if ((y != rowIndex) && validateCurrentCell)
                            {
                                if (this.OnRowValidating(ref gridCell, x, y))
                                {
                                    if (!this.IsInnerCellOutOfBounds(x, y))
                                    {
                                        this.OnRowEnter(ref gridCell, x, y, true, true);
                                        if (!this.IsInnerCellOutOfBounds(x, y))
                                        {
                                            currentCellInternal.OnEnterInternal(y, throughMouseClick);
                                            this.OnCellEnter(ref gridCell, x, y);
                                        }
                                    }
                                    return false;
                                }
                                if (!this.IsInnerCellOutOfBounds(x, y))
                                {
                                    this.OnRowValidated(ref gridCell, x, y);
                                }
                            }
                        }
                        this.gridState2[0x400000] = false;
                        try
                        {
                            if ((y != rowIndex) && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                this.OnRowEnter(ref gridCell, columnIndex, rowIndex, true, false);
                            }
                            if (this.gridState2[0x400000] && (rowIndex >= this.Rows.Count))
                            {
                                return false;
                            }
                            if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                            {
                                return false;
                            }
                            this.ptCurrentCell.X = columnIndex;
                            this.ptCurrentCell.Y = rowIndex;
                            if (this.editingControl != null)
                            {
                                ((IGridEditingControl) this.editingControl).EditingControlRowIndex = rowIndex;
                            }
                            this.OnCurrentCellChanged(EventArgs.Empty);
                            if (setAnchorCellAddress)
                            {
                                this.ptAnchorCell.X = columnIndex;
                                this.ptAnchorCell.Y = rowIndex;
                            }
                            currentCellInternal = this.CurrentCellInternal;
                            if (currentCellInternal.EnterUnsharesRowInternal(rowIndex, throughMouseClick))
                            {
                                currentCellInternal = this.Rows[rowIndex].Cells[columnIndex];
                            }
                            currentCellInternal.OnEnterInternal(rowIndex, throughMouseClick);
                            this.OnCellEnter(ref gridCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            if (x >= 0)
                            {
                                if ((x < this.Columns.Count) && (y < this.Rows.Count))
                                {
                                    this.InvalidateCellPrivate(x, y);
                                }
                                if (((y != this.ptCurrentCell.Y) && this.RowHeadersVisible) && (y < this.Rows.Count))
                                {
                                    this.InvalidateCellPrivate(-1, y);
                                }
                            }
                            this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
                            if (this.RowHeadersVisible && (y != this.ptCurrentCell.Y))
                            {
                                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                            }
                            if (((this.Focused && (this.ptCurrentCell.X != -1)) && (!this.IsCurrentCellInEditMode && !this.gridState2[0x400000])) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (currentCellInternal.EditType == null))))
                            {
                                this.BeginEditInternal(true);
                            }
                        }
                        finally
                        {
                            this.gridState2[0x400000] = false;
                        }
                        if (this.ptCurrentCell.X != -1)
                        {
                            this.AccessibilityNotifyCurrentCellChanged(new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y));
                        }
                    }
                    else
                    {
                        if (setAnchorCellAddress)
                        {
                            this.ptAnchorCell.X = columnIndex;
                            this.ptAnchorCell.Y = rowIndex;
                        }
                        if ((this.Focused && !this.IsCurrentCellInEditMode) && ((this.EditMode == GridEditMode.EditOnEnter) || ((this.EditMode != GridEditMode.EditProgrammatically) && (this.CurrentCellInternal.EditType == null))))
                        {
                            this.BeginEditInternal(true);
                        }
                        else
                        {
                            this.CorrectFocus(false);
                        }
                    }
                }
                else
                {
                    int num3 = this.ptCurrentCell.X;
                    int num4 = this.ptCurrentCell.Y;
                    if (((num3 >= 0) && !this.gridState1[0x400000]) && !this.gridOper[0x100000])
                    {
                        GridCell cell3 = this.CurrentCellInternal;
                        if (!this.EndEdit(GridDataErrorContexts.CurrentCellChange | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, validateCurrentCell ? GridValidateCellInternal.Always : GridValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell, false, false, this.EditMode != GridEditMode.EditOnEnter, false, false))
                        {
                            return false;
                        }
                        if (!this.IsInnerCellOutOfBounds(num3, num4))
                        {
                            cell3 = this.Rows.SharedRow(num4).Cells[num3];
                            if (cell3.LeaveUnsharesRowInternal(num4, throughMouseClick))
                            {
                                cell3 = this.Rows[num4].Cells[num3];
                            }
                            cell3.OnLeaveInternal(num4, throughMouseClick);
                        }
                        if (validateCurrentCell)
                        {
                            if (this.OnRowValidating(ref gridCell, num3, num4))
                            {
                                if (!this.IsInnerCellOutOfBounds(num3, num4))
                                {
                                    this.OnRowEnter(ref gridCell, num3, num4, true, true);
                                    if (!this.IsInnerCellOutOfBounds(num3, num4))
                                    {
                                        cell3.OnEnterInternal(num4, throughMouseClick);
                                        this.OnCellEnter(ref gridCell, num3, num4);
                                    }
                                }
                                return false;
                            }
                            if (!this.IsInnerCellOutOfBounds(num3, num4))
                            {
                                this.OnRowValidated(ref gridCell, num3, num4);
                            }
                        }
                    }
                    if (this.ptCurrentCell.X != -1)
                    {
                        this.ptCurrentCell.X = -1;
                        this.ptCurrentCell.Y = -1;
                        this.OnCurrentCellChanged(EventArgs.Empty);
                    }
                    if (setAnchorCellAddress)
                    {
                        this.ptAnchorCell.X = -1;
                        this.ptAnchorCell.Y = -1;
                    }
                    if (this.gridState1[0x400000])
                    {
                        if (this.editingControl != null)
                        {
                            if (this.gridState2[0x20000000])
                            {
                                this.gridState2[0x20000000] = false;
                            }
                            else
                            {
                                this.cachedEditingControl = this.editingControl;
                            }
                            this.editingControl = null;
                        }
                    }
                    else if ((num3 >= 0) && !this.gridOper[0x100000])
                    {
                        if ((num3 < this.Columns.Count) && (num4 < this.Rows.Count))
                        {
                            this.InvalidateCellPrivate(num3, num4);
                        }
                        if (this.RowHeadersVisible && (num4 < this.Rows.Count))
                        {
                            this.InvalidateCellPrivate(-1, num4);
                        }
                    }
                }
            }
            finally
            {
                this.gridOper[0x20000] = false;
            }
            return true;
        }

        internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
        {
            this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick);
        }

        internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly)
        {
            GridRow row = this.Rows.SharedRow(rowIndex);
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (this.IsSharedCellReadOnly(row.Cells[columnIndex], rowIndex) != readOnly)
            {
                GridCell gridCell = this.Rows[rowIndex].Cells[columnIndex];
                if (readOnly)
                {
                    if (((rowState & GridElementStates.ReadOnly) == GridElementStates.None) && !this.Columns[columnIndex].ReadOnly)
                    {
                        this.individualReadOnlyCells.Add(gridCell);
                        gridCell.ReadOnlyInternal = true;
                    }
                }
                else
                {
                    if (this.individualReadOnlyCells.Contains(gridCell))
                    {
                        this.individualReadOnlyCells.Remove(gridCell);
                    }
                    else
                    {
                        GridCell cell2;
                        if (this.Columns[columnIndex].ReadOnly)
                        {
                            this.Columns[columnIndex].ReadOnlyInternal = false;
                            for (int i = 0; i < rowIndex; i++)
                            {
                                cell2 = this.Rows[i].Cells[columnIndex];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                            for (int j = rowIndex + 1; j < this.Rows.Count; j++)
                            {
                                cell2 = this.Rows[j].Cells[columnIndex];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                        }
                        if ((rowState & GridElementStates.ReadOnly) != GridElementStates.None)
                        {
                            this.Rows.SetRowState(rowIndex, GridElementStates.ReadOnly, false);
                            for (int k = 0; k < columnIndex; k++)
                            {
                                cell2 = this.Rows[rowIndex].Cells[k];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                            for (int m = columnIndex + 1; m < this.Columns.Count; m++)
                            {
                                cell2 = this.Rows[rowIndex].Cells[m];
                                cell2.ReadOnlyInternal = true;
                                this.individualReadOnlyCells.Add(cell2);
                            }
                        }
                    }
                    if (gridCell.ReadOnly)
                    {
                        gridCell.ReadOnlyInternal = false;
                    }
                }
            }
        }

        internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly)
        {
            if (this.Columns[columnIndex].ReadOnly != readOnly)
            {
                if (readOnly)
                {
                    try
                    {
                        this.gridOper[0x4000] = true;
                        this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
                    }
                    finally
                    {
                        this.gridOper[0x4000] = false;
                    }
                    this.Columns[columnIndex].ReadOnlyInternal = true;
                }
                else
                {
                    this.Columns[columnIndex].ReadOnlyInternal = false;
                }
            }
            else if (!readOnly)
            {
                this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
            }
        }

        internal void SetReadOnlyRowCore(int rowIndex, bool readOnly)
        {
            if (((this.Rows.GetRowState(rowIndex) & GridElementStates.ReadOnly) != GridElementStates.None) != readOnly)
            {
                if (readOnly)
                {
                    try
                    {
                        this.gridOper[0x4000] = true;
                        this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
                    }
                    finally
                    {
                        this.gridOper[0x4000] = false;
                    }
                    this.Rows.SetRowState(rowIndex, GridElementStates.ReadOnly, true);
                }
                else
                {
                    this.Rows.SetRowState(rowIndex, GridElementStates.ReadOnly, false);
                }
            }
            else if (!readOnly)
            {
                this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
            }
        }

        /// <summary>Changes the selection state of the cell with the specified row and column indexes.</summary>
        /// <param name="columnIndex">The index of the column containing the cell.</param>
        /// <param name="selected">true to select the cell; false to cancel the selection of the cell.</param>
        /// <param name="rowIndex">The index of the row containing the cell.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than 0 or greater than the number of columns in the control minus 1.-or-rowIndex is less than 0 or greater than the number of rows in the control minus 1.</exception>
        protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            GridRow row = this.Rows.SharedRow(rowIndex);
            GridElementStates rowState = this.Rows.GetRowState(rowIndex);
            if (this.IsSharedCellSelected(row.Cells[columnIndex], rowIndex) == selected)
            {
                return;
            }
            GridCell gridCell = this.Rows[rowIndex].Cells[columnIndex];
            if (selected)
            {
                if (((rowState & GridElementStates.Selected) == GridElementStates.None) && !this.Columns[columnIndex].Selected)
                {
                    this.individualSelectedCells.Add(gridCell);
                    gridCell.SelectedInternal = true;
                    return;
                }
                return;
            }
            if ((gridCell.State & GridElementStates.Selected) != GridElementStates.None)
            {
                this.individualSelectedCells.Remove(gridCell);
            }
            else
            {
                GridCell cell2;
                bool flag = false;
                if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                {
                    if (this.Rows.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag = true;
                    }
                    try
                    {
                        this.selectedBandIndexes.Remove(columnIndex);
                        this.Columns[columnIndex].SelectedInternal = false;
                        for (int i = 0; i < rowIndex; i++)
                        {
                            cell2 = this.Rows[i].Cells[columnIndex];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        for (int j = rowIndex + 1; j < this.Rows.Count; j++)
                        {
                            cell2 = this.Rows[j].Cells[columnIndex];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        goto Label_0295;
                    }
                    finally
                    {
                        if (flag)
                        {
                            this.ExitBulkPaint(columnIndex, -1);
                        }
                    }
                }
                if (this.SelectionMode == GridSelectionMode.RowHeaderSelect)
                {
                    if (this.Columns.Count > 8)
                    {
                        this.inBulkPaintCount++;
                        flag = true;
                    }
                    try
                    {
                        this.selectedBandIndexes.Remove(rowIndex);
                        this.Rows.SetRowState(rowIndex, GridElementStates.Selected, false);
                        for (int k = 0; k < columnIndex; k++)
                        {
                            cell2 = this.Rows[rowIndex].Cells[k];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                        for (int m = columnIndex + 1; m < this.Columns.Count; m++)
                        {
                            cell2 = this.Rows[rowIndex].Cells[m];
                            cell2.SelectedInternal = true;
                            this.individualSelectedCells.Add(cell2);
                        }
                    }
                    finally
                    {
                        if (flag)
                        {
                            this.ExitBulkPaint(-1, rowIndex);
                        }
                    }
                }
            }
        Label_0295:
            if (gridCell.Selected)
            {
                gridCell.SelectedInternal = false;
            }
        }

        internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected)
        {
            if (selected && !this.MultiSelect)
            {
                if (!this.Columns[columnIndex].Visible || ((this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) == GridElementStates.None))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CurrentCellCannotBeInvisible"));
                }
                if (!this.ScrollIntoView(columnIndex, rowIndex, true))
                {
                    return;
                }
                if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
                {
                    return;
                }
            }
            this.noSelectionChangeCount++;
            try
            {
                int num;
                int num2;
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        if (selected && !this.MultiSelect)
                        {
                            this.RemoveIndividuallySelectedCells();
                        }
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        goto Label_02C5;

                    case GridSelectionMode.FullRowSelect:
                        if (!selected)
                        {
                            goto Label_021A;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_01F9;
                        }
                        num2 = 0;
                        goto Label_01EB;

                    case GridSelectionMode.FullColumnSelect:
                        if (!selected)
                        {
                            goto Label_010C;
                        }
                        if (this.MultiSelect)
                        {
                            goto Label_00EE;
                        }
                        num = 0;
                        goto Label_00E0;

                    case GridSelectionMode.RowHeaderSelect:
                        if (!selected)
                        {
                            goto Label_0276;
                        }
                        if (!this.MultiSelect)
                        {
                            if (this.selectedBandIndexes.Count <= 0)
                            {
                                goto Label_0265;
                            }
                            this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        goto Label_026B;

                    case GridSelectionMode.ColumnHeaderSelect:
                        if (!selected)
                        {
                            goto Label_016B;
                        }
                        if (!this.MultiSelect)
                        {
                            if (this.selectedBandIndexes.Count <= 0)
                            {
                                goto Label_0157;
                            }
                            this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                        }
                        goto Label_015D;

                    default:
                        goto Label_02C5;
                }
            Label_00B8:
                if (this.selectedBandIndexes[num] != columnIndex)
                {
                    this.SetSelectedColumnCore(this.selectedBandIndexes[num], false);
                }
                else
                {
                    num++;
                }
            Label_00E0:
                if (num < this.selectedBandIndexes.Count)
                {
                    goto Label_00B8;
                }
            Label_00EE:
                if (!this.selectedBandIndexes.Contains(columnIndex))
                {
                    this.SetSelectedColumnCore(columnIndex, true);
                }
                goto Label_02C5;
            Label_010C:
                if (this.selectedBandIndexes.Contains(columnIndex))
                {
                    this.SetSelectedColumnCore(columnIndex, false);
                }
                goto Label_02C5;
            Label_0157:
                this.RemoveIndividuallySelectedCells();
            Label_015D:
                this.SetSelectedCellCore(columnIndex, rowIndex, true);
                goto Label_02C5;
            Label_016B:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(columnIndex, rowIndex, false);
                }
                goto Label_02C5;
            Label_01C3:
                if (this.selectedBandIndexes[num2] != rowIndex)
                {
                    this.SetSelectedRowCore(this.selectedBandIndexes[num2], false);
                }
                else
                {
                    num2++;
                }
            Label_01EB:
                if (num2 < this.selectedBandIndexes.Count)
                {
                    goto Label_01C3;
                }
            Label_01F9:
                if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Selected) == GridElementStates.None)
                {
                    this.SetSelectedRowCore(rowIndex, true);
                }
                goto Label_02C5;
            Label_021A:
                if ((this.Rows.GetRowState(rowIndex) & GridElementStates.Selected) != GridElementStates.None)
                {
                    this.SetSelectedRowCore(rowIndex, false);
                }
                goto Label_02C5;
            Label_0265:
                this.RemoveIndividuallySelectedCells();
            Label_026B:
                this.SetSelectedCellCore(columnIndex, rowIndex, true);
                goto Label_02C5;
            Label_0276:
                if (!this.MultiSelect)
                {
                    if (this.selectedBandIndexes.Count > 0)
                    {
                        this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
                    }
                    else
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, false);
                    }
                }
                else
                {
                    this.SetSelectedCellCore(columnIndex, rowIndex, false);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_02C5:
            if (selected && !this.MultiSelect)
            {
                this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, true);
            }
        }

        /// <summary>Changes the selection state of the column with the specified index.</summary>
        /// <param name="columnIndex">The index of the column.</param>
        /// <param name="selected">true to select the column; false to cancel the selection of the column.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than 0 or greater than the number of columns in the control minus 1.</exception>
        protected virtual void SetSelectedColumnCore(int columnIndex, bool selected)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            this.noSelectionChangeCount++;
            try
            {
                if (this.Columns[columnIndex].Selected != selected)
                {
                    if (selected)
                    {
                        this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
                        this.Columns[columnIndex].SelectedInternal = true;
                        this.selectedBandIndexes.Add(columnIndex);
                    }
                    else
                    {
                        this.Columns[columnIndex].SelectedInternal = false;
                        this.selectedBandIndexes.Remove(columnIndex);
                    }
                }
                else if (!selected)
                {
                    this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
        {
            this.noSelectionChangeCount++;
            try
            {
                if (!this.MultiSelect && (this.selectedBandIndexes.Count > 0))
                {
                    int headInt = this.selectedBandIndexes.HeadInt;
                    if (headInt != columnIndex)
                    {
                        this.SetSelectedColumnCore(headInt, false);
                    }
                }
                this.SetSelectedColumnCore(columnIndex, selected);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected)
        {
            switch (this.SelectionMode)
            {
                case GridSelectionMode.CellSelect:
                    this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                    return;

                case GridSelectionMode.FullRowSelect:
                    this.SetSelectedRowCore(rowIndex, selected);
                    return;

                case GridSelectionMode.FullColumnSelect:
                    this.SetSelectedColumnCore(columnIndex, selected);
                    return;

                case GridSelectionMode.RowHeaderSelect:
                    if (columnIndex != -1)
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        return;
                    }
                    this.SetSelectedRowCore(rowIndex, selected);
                    return;

                case GridSelectionMode.ColumnHeaderSelect:
                    if (rowIndex != -1)
                    {
                        this.SetSelectedCellCore(columnIndex, rowIndex, selected);
                        return;
                    }
                    this.SetSelectedColumnCore(columnIndex, selected);
                    return;
            }
        }

        /// <summary>Changes the selection state of the row with the specified index.</summary>
        /// <param name="selected">true to select the row; false to cancel the selection of the row.</param>
        /// <param name="rowIndex">The index of the row.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is less than 0 or greater than the number of rows in the control minus 1.</exception>
        protected virtual void SetSelectedRowCore(int rowIndex, bool selected)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.noSelectionChangeCount++;
            try
            {
                if (((this.Rows.GetRowState(rowIndex) & GridElementStates.Selected) != GridElementStates.None) != selected)
                {
                    if (selected)
                    {
                        this.RemoveIndividuallySelectedCellsInRow(rowIndex);
                        this.selectedBandIndexes.Add(rowIndex);
                        this.Rows.SetRowState(rowIndex, GridElementStates.Selected, true);
                    }
                    else
                    {
                        this.selectedBandIndexes.Remove(rowIndex);
                        this.Rows.SetRowState(rowIndex, GridElementStates.Selected, false);
                    }
                }
                else if (!selected)
                {
                    this.RemoveIndividuallySelectedCellsInRow(rowIndex);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
        {
            this.noSelectionChangeCount++;
            try
            {
                if (!this.MultiSelect && (this.selectedBandIndexes.Count > 0))
                {
                    int headInt = this.selectedBandIndexes.HeadInt;
                    if (headInt != rowIndex)
                    {
                        this.SetSelectedRowCore(headInt, false);
                    }
                }
                this.SetSelectedRowCore(rowIndex, selected);
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        }

        private bool ShouldSerializeAlternatingRowsDefaultCellStyle()
        {
            GridCellStyle style = new GridCellStyle();
            return !this.AlternatingRowsDefaultCellStyle.Equals(style);
        }

        private bool ShouldSerializeBackgroundColor()
        {
            return !this.BackgroundColor.Equals(DefaultBackgroundBrush.Color);
        }

        private bool ShouldSerializeColumnHeadersDefaultCellStyle()
        {
            return !this.ColumnHeadersDefaultCellStyle.Equals(this.DefaultColumnHeadersDefaultCellStyle);
        }

        private bool ShouldSerializeColumnHeadersHeight()
        {
            return ((this.ColumnHeadersHeightSizeMode != GridColumnHeadersHeightSizeMode.AutoSize) && (0x17 != this.ColumnHeadersHeight));
        }

        private bool ShouldSerializeDefaultCellStyle()
        {
            return !this.DefaultCellStyle.Equals(this.DefaultDefaultCellStyle);
        }

        private bool ShouldSerializeGridColor()
        {
            return !this.GridPen.Color.Equals(DefaultGridColor);
        }

        private bool ShouldSerializeRowHeadersDefaultCellStyle()
        {
            return !this.RowHeadersDefaultCellStyle.Equals(this.DefaultRowHeadersDefaultCellStyle);
        }

        private bool ShouldSerializeRowHeadersWidth()
        {
            if ((this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing))
            {
                return false;
            }
            return (0x29 != this.RowHeadersWidth);
        }

        private bool ShouldSerializeRowsDefaultCellStyle()
        {
            GridCellStyle style = new GridCellStyle();
            return !this.RowsDefaultCellStyle.Equals(style);
        }

        private bool ShouldSerializeRowTemplate()
        {
            return (this.rowTemplate != null);
        }

        /// <summary>Sorts the contents of the <see cref="T:MControl.GridView.Grid"></see> control using an implementation of the <see cref="T:System.Collections.IComparer"></see> interface.</summary>
        /// <param name="comparer">An implementation of <see cref="T:System.Collections.IComparer"></see> that performs the custom sorting operation. </param>
        /// <exception cref="T:System.InvalidOperationException"><see cref="P:MControl.GridView.Grid.VirtualMode"></see> is set to true.-or- <see cref="P:MControl.GridView.Grid.DataSource"></see> is not null.</exception>
        /// <exception cref="T:System.ArgumentNullException">comparer is null.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public virtual void Sort(IComparer comparer)
        {
            if (comparer == null)
            {
                throw new ArgumentNullException("comparer");
            }
            if (this.VirtualMode)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_OperationDisabledInVirtualMode"));
            }
            if (this.DataSource != null)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotUseAComparerToSortGridWhenDataBound"));
            }
            this.SortInternal(comparer, null, ListSortDirection.Ascending);
        }

        /// <summary>Sorts the contents of the <see cref="T:MControl.GridView.Grid"></see> control in ascending or descending order based on the contents of the specified column.</summary>
        /// <param name="direction">One of the <see cref="T:System.ComponentModel.ListSortDirection"></see> values. </param>
        /// <param name="gridColumn">The column by which to sort the contents of the <see cref="T:MControl.GridView.Grid"></see>. </param>
        /// <exception cref="T:System.ArgumentException">The specified column is not part of this <see cref="T:MControl.GridView.Grid"></see>.-or-The <see cref="P:MControl.GridView.Grid.DataSource"></see> property has been set and the <see cref="P:MControl.GridView.GridColumn.IsDataBound"></see> property of the specified column returns false.</exception>
        /// <exception cref="T:System.ArgumentNullException">gridColumn is null.</exception>
        /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.VirtualMode"></see> property is set to true and the <see cref="P:MControl.GridView.GridColumn.IsDataBound"></see> property of the specified column returns false.-or-The object specified by the <see cref="P:MControl.GridView.Grid.DataSource"></see> property does not implement the <see cref="T:System.ComponentModel.IBindingList"></see> interface.-or-The object specified by the <see cref="P:MControl.GridView.Grid.DataSource"></see> property has a <see cref="P:System.ComponentModel.IBindingList.SupportsSorting"></see> property value of false.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        public virtual void Sort(GridColumn gridColumn, ListSortDirection direction)
        {
            if (gridColumn == null)
            {
                throw new ArgumentNullException("gridColumn");
            }
            if ((direction != ListSortDirection.Ascending) && (direction != ListSortDirection.Descending))
            {
                throw new InvalidEnumArgumentException("direction", (int) direction, typeof(ListSortDirection));
            }
            if (gridColumn.Grid != this)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnDoesNotBelongToGrid"));
            }
            if (this.VirtualMode && !gridColumn.IsDataBound)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_OperationDisabledInVirtualMode"));
            }
            this.SortInternal(null, gridColumn, direction);
        }

        private void SortDataBoundGrid_PerformCheck(GridColumn gridColumn)
        {
            IBindingList list = this.dataConnection.List as IBindingList;
            if (list == null)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotSortDataBoundGridBoundToNonIBindingList"));
            }
            if (!list.SupportsSorting)
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_IBindingListNeedsToSupportSorting"));
            }
            if (!gridColumn.IsDataBound)
            {
                throw new ArgumentException(MControl.GridView.RM.GetString("Grid_ColumnNeedsToBeDataBoundWhenSortingDataBoundGrid"), "gridColumn");
            }
        }

        private void SortInternal(IComparer comparer, GridColumn gridColumn, ListSortDirection direction)
        {
            this.ptCurrentCellCache.X = this.ptCurrentCell.X;
            this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
            this.gridOper[0x40] = true;
            try
            {
                if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
                {
                    return;
                }
                int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                int rowCount = this.Rows.GetRowCount(GridElementStates.Visible | GridElementStates.Frozen);
                if ((rowCount > 0) && (this.DataSource == null))
                {
                    int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                    this.Rows.SetRowState(firstRow, GridElementStates.Frozen, false);
                }
                if (((this.sortedColumn != null) && (this.sortedColumn.SortMode == GridColumnSortMode.Automatic)) && this.sortedColumn.HasHeaderCell)
                {
                    this.sortedColumn.HeaderCell.SortGlyphDirection = System.Windows.Forms.SortOrder.None;
                }
                if (comparer == null)
                {
                    this.sortedColumn = gridColumn;
                    this.sortOrder = (direction == ListSortDirection.Ascending) ? System.Windows.Forms.SortOrder.Ascending : System.Windows.Forms.SortOrder.Descending;
                    if ((gridColumn.SortMode == GridColumnSortMode.Automatic) && gridColumn.HasHeaderCell)
                    {
                        gridColumn.HeaderCell.SortGlyphDirection = this.sortOrder;
                    }
                }
                else
                {
                    this.sortedColumn = null;
                    this.sortOrder = System.Windows.Forms.SortOrder.None;
                }
                if (this.DataSource == null)
                {
                    this.UpdateRowsDisplayedState(false);
                    this.Rows.Sort(comparer, direction == ListSortDirection.Ascending);
                }
                else
                {
                    this.SortDataBoundGrid_PerformCheck(gridColumn);
                    this.dataConnection.Sort(gridColumn, direction);
                }
                if ((this.ptCurrentCellCache.X != -1) && !this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
                {
                    this.SetAndSelectCurrentCellAddress(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, true, false, false, false, false);
                }
                if (rowCount > 0)
                {
                    int indexStart = this.Rows.GetFirstRow(GridElementStates.Visible);
                    while (rowCount > 1)
                    {
                        indexStart = this.Rows.GetNextRow(indexStart, GridElementStates.Visible);
                        rowCount--;
                    }
                    this.Rows.SetRowState(indexStart, GridElementStates.Frozen, true);
                }
                this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
            }
            finally
            {
                this.gridOper[0x40] = false;
            }
            this.OnGlobalAutoSize();
            if (this.DataSource == null)
            {
                this.displayedBandsInfo.EnsureDirtyState();
            }
            this.ResetUIState(false, false);
            this.OnSorted(EventArgs.Empty);
        }

        internal void SwapSortedRows(int rowIndex1, int rowIndex2)
        {
            if (rowIndex1 != rowIndex2)
            {
                if (rowIndex1 == this.ptCurrentCellCache.Y)
                {
                    this.ptCurrentCellCache.Y = rowIndex2;
                }
                else if (rowIndex2 == this.ptCurrentCellCache.Y)
                {
                    this.ptCurrentCellCache.Y = rowIndex1;
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                    {
                        int index = this.selectedBandIndexes.IndexOf(rowIndex1);
                        int num2 = this.selectedBandIndexes.IndexOf(rowIndex2);
                        if ((index == -1) || (num2 != -1))
                        {
                            if ((index == -1) && (num2 != -1))
                            {
                                this.selectedBandIndexes[num2] = rowIndex1;
                            }
                        }
                        else
                        {
                            this.selectedBandIndexes[index] = rowIndex2;
                        }
                        if (this.selectedBandSnapshotIndexes != null)
                        {
                            index = this.selectedBandSnapshotIndexes.IndexOf(rowIndex1);
                            num2 = this.selectedBandSnapshotIndexes.IndexOf(rowIndex2);
                            if ((index != -1) && (num2 == -1))
                            {
                                this.selectedBandSnapshotIndexes[index] = rowIndex2;
                                return;
                            }
                            if ((index == -1) && (num2 != -1))
                            {
                                this.selectedBandSnapshotIndexes[num2] = rowIndex1;
                            }
                        }
                        return;
                    }
                    case GridSelectionMode.FullColumnSelect:
                        return;
                }
            }
        }

        void ISupportInitialize.BeginInit()
        {
            if (this.gridState2[0x80000])
            {
                throw new InvalidOperationException(MControl.GridView.RM.GetString("GridBeginInit"));
            }
            this.gridState2[0x80000] = true;
        }

        void ISupportInitialize.EndInit()
        {
            this.gridState2[0x80000] = false;
            foreach (GridColumn column in this.Columns)
            {
                if ((column.Frozen && column.Visible) && (column.InheritedAutoSizeMode == GridAutoSizeColumnMode.Fill))
                {
                    column.AutoSizeMode = GridAutoSizeColumnMode.None;
                }
            }
            GridSelectionMode selectionMode = this.SelectionMode;
            switch (selectionMode)
            {
                case GridSelectionMode.FullColumnSelect:
                case GridSelectionMode.ColumnHeaderSelect:
                    foreach (GridColumn column2 in this.Columns)
                    {
                        if (column2.SortMode == GridColumnSortMode.Automatic)
                        {
                            this.SelectionMode = GridSelectionMode.RowHeaderSelect;
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_SelectionModeReset", new object[] { MControl.GridView.RM.GetString("Grid_SelectionModeAndSortModeClash", new object[] { selectionMode.ToString() }), GridSelectionMode.RowHeaderSelect.ToString() }));
                        }
                    }
                    break;
            }
        }

        private bool TabToNextCell()
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int index = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                if (firstColumn != null)
                {
                    index = firstColumn.Index;
                }
            }
            int nextRow = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                nextRow = this.Rows.GetNextRow(this.ptCurrentCell.Y, GridElementStates.Visible);
            }
            int rowIndex = -1;
            int num6 = -1;
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                }
                else
                {
                    if (index == -1)
                    {
                        rowIndex = (nextRow == -1) ? firstRow : nextRow;
                        num6 = columnIndex;
                    }
                    else
                    {
                        rowIndex = this.ptCurrentCell.Y;
                        num6 = index;
                    }
                    if (!this.ScrollIntoView(num6, rowIndex, true))
                    {
                        return true;
                    }
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0157;
                        }
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01F9;
                        }
                        if (!this.IsRowOutOfBounds(firstRow))
                        {
                            goto Label_01EF;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01AD;
                        }
                        if (!this.IsColumnOutOfBounds(columnIndex))
                        {
                            goto Label_01A0;
                        }
                        return true;

                    default:
                        goto Label_023F;
                }
                this.SetSelectedCellCore(columnIndex, firstRow, true);
                goto Label_023F;
            Label_0157:
                if (this.IsInnerCellOutOfBounds(num6, rowIndex))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedCellCore(num6, rowIndex, true);
                goto Label_023F;
            Label_01A0:
                this.SetSelectedColumnCore(columnIndex, true);
                goto Label_023F;
            Label_01AD:
                if (this.IsColumnOutOfBounds(num6))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedColumnCore(num6, true);
                goto Label_023F;
            Label_01EF:
                this.SetSelectedRowCore(firstRow, true);
                goto Label_023F;
            Label_01F9:
                if ((rowIndex != this.ptCurrentCell.Y) || this.MultiSelect)
                {
                    if (this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_023F:
            if (this.ptCurrentCell.X == -1)
            {
                this.ScrollIntoView(columnIndex, firstRow, false);
                if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
            }
            else
            {
                if (this.IsInnerCellOutOfBounds(num6, rowIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(num6, rowIndex, true, false, false);
            }
            return true;
        }

        private bool TabToPreviousCell()
        {
            GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
            int columnIndex = (firstColumn == null) ? -1 : firstColumn.Index;
            int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
            if ((columnIndex == -1) || (firstRow == -1))
            {
                return false;
            }
            int num3 = -1;
            if (this.ptCurrentCell.X != -1)
            {
                firstColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                if (firstColumn != null)
                {
                    num3 = firstColumn.Index;
                }
            }
            int previousRow = -1;
            if (this.ptCurrentCell.Y != -1)
            {
                previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, GridElementStates.Visible);
            }
            int index = this.Columns.GetLastColumn(GridElementStates.Visible, GridElementStates.None).Index;
            int lastRow = this.Rows.GetLastRow(GridElementStates.Visible);
            int rowIndex = -1;
            int num8 = -1;
            this.noSelectionChangeCount++;
            try
            {
                if (this.ptCurrentCell.X == -1)
                {
                    this.ClearSelection();
                }
                else
                {
                    if (num3 == -1)
                    {
                        rowIndex = (previousRow == -1) ? lastRow : previousRow;
                        num8 = index;
                    }
                    else
                    {
                        rowIndex = this.ptCurrentCell.Y;
                        num8 = num3;
                    }
                    if (!this.ScrollIntoView(num8, rowIndex, true))
                    {
                        return true;
                    }
                }
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.RowHeaderSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_017F;
                        }
                        if (!this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                        {
                            break;
                        }
                        return true;

                    case GridSelectionMode.FullRowSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_0221;
                        }
                        if (!this.IsRowOutOfBounds(firstRow))
                        {
                            goto Label_0217;
                        }
                        return true;

                    case GridSelectionMode.FullColumnSelect:
                        if (this.ptCurrentCell.X != -1)
                        {
                            goto Label_01D5;
                        }
                        if (!this.IsColumnOutOfBounds(columnIndex))
                        {
                            goto Label_01C8;
                        }
                        return true;

                    default:
                        goto Label_0267;
                }
                this.SetSelectedCellCore(columnIndex, firstRow, true);
                goto Label_0267;
            Label_017F:
                if (this.IsInnerCellOutOfBounds(num8, rowIndex))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedCellCore(num8, rowIndex, true);
                goto Label_0267;
            Label_01C8:
                this.SetSelectedColumnCore(columnIndex, true);
                goto Label_0267;
            Label_01D5:
                if (this.IsColumnOutOfBounds(num8))
                {
                    return true;
                }
                this.ClearSelection();
                this.SetSelectedColumnCore(num8, true);
                goto Label_0267;
            Label_0217:
                this.SetSelectedRowCore(firstRow, true);
                goto Label_0267;
            Label_0221:
                if ((rowIndex != this.ptCurrentCell.Y) || this.MultiSelect)
                {
                    if (this.IsRowOutOfBounds(rowIndex))
                    {
                        return true;
                    }
                    this.ClearSelection();
                    this.SetSelectedRowCore(rowIndex, true);
                }
            }
            finally
            {
                this.NoSelectionChangeCount--;
            }
        Label_0267:
            if (this.ptCurrentCell.X == -1)
            {
                this.ScrollIntoView(columnIndex, firstRow, false);
                if (this.IsInnerCellOutOfBounds(columnIndex, firstRow))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(columnIndex, firstRow, true, false, false);
            }
            else
            {
                if (this.IsInnerCellOutOfBounds(num8, rowIndex))
                {
                    return true;
                }
                this.SetCurrentCellAddressCore(num8, rowIndex, true, false, false);
            }
            return true;
        }

        private void UnwireEditingControlEvents()
        {
            this.editingPanel.Click -= new EventHandler(this.EditingControls_Click);
            this.editingPanel.DoubleClick -= new EventHandler(this.EditingControls_DoubleClick);
            this.editingPanel.MouseClick -= new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingPanel.MouseDoubleClick -= new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingPanel.MouseDown -= new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingPanel.MouseEnter -= new EventHandler(this.EditingControls_MouseEnter);
            this.editingPanel.MouseLeave -= new EventHandler(this.EditingControls_MouseLeave);
            this.editingPanel.MouseMove -= new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingPanel.MouseUp -= new MouseEventHandler(this.EditingControls_MouseUp);
            this.editingControl.Click -= new EventHandler(this.EditingControls_Click);
            this.editingControl.DoubleClick -= new EventHandler(this.EditingControls_DoubleClick);
            this.editingControl.MouseClick -= new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingControl.MouseDoubleClick -= new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingControl.MouseDown -= new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingControl.MouseEnter -= new EventHandler(this.EditingControls_MouseEnter);
            this.editingControl.MouseLeave -= new EventHandler(this.EditingControls_MouseLeave);
            this.editingControl.MouseMove -= new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingControl.MouseUp -= new MouseEventHandler(this.EditingControls_MouseUp);
        }

        private void UnwireScrollBarsEvents()
        {
            if (this.horizScrollBar != null)
            {
                this.horizScrollBar.MouseEnter -= new EventHandler(this.ScrollBar_MouseEnter);
                this.horizScrollBar.MouseLeave -= new EventHandler(this.ScrollBar_MouseLeave);
            }
            if (this.vertScrollBar != null)
            {
                this.vertScrollBar.MouseEnter -= new EventHandler(this.ScrollBar_MouseEnter);
                this.vertScrollBar.MouseLeave -= new EventHandler(this.ScrollBar_MouseLeave);
            }
        }

        /// <summary>Forces the cell at the specified location to update its error text.</summary>
        /// <param name="columnIndex">The column index of the cell to update, or -1 to indicate a row header cell.</param>
        /// <param name="rowIndex">The row index of the cell to update, or -1 to indicate a column header cell.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than -1 or greater than the number of columns in the control minus 1.- or -rowIndex is less than -1 or greater than the number of rows in the control minus 1.</exception>
        public void UpdateCellErrorText(int columnIndex, int rowIndex)
        {
            if ((columnIndex < -1) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < -1) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated)
            {
                this.InvalidateCellPrivate(columnIndex, rowIndex);
            }
        }

        /// <summary>Forces the control to update its display of the cell at the specified location based on its new value, applying any automatic sizing modes currently in effect. </summary>
        /// <param name="columnIndex">The zero-based column index of the cell with the new value.</param>
        /// <param name="rowIndex">The zero-based row index of the cell with the new value.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">columnIndex is less than zero or greater than the number of columns in the control minus one.-or-rowIndex is less than zero or greater than the number of rows in the control minus one.</exception>
        public void UpdateCellValue(int columnIndex, int rowIndex)
        {
            if ((columnIndex < 0) || (columnIndex >= this.Columns.Count))
            {
                throw new ArgumentOutOfRangeException("columnIndex");
            }
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated)
            {
                this.OnCellCommonChange(columnIndex, rowIndex);
            }
        }

        private void UpdateColumnsDisplayedState(bool displayed)
        {
            GridColumn firstColumn;
            int numDisplayedFrozenCols = this.displayedBandsInfo.NumDisplayedFrozenCols;
            if (numDisplayedFrozenCols > 0)
            {
                firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible | GridElementStates.Frozen);
                while (numDisplayedFrozenCols > 0)
                {
                    if (firstColumn.Displayed != displayed)
                    {
                        firstColumn.DisplayedInternal = displayed;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible | GridElementStates.Frozen, GridElementStates.None);
                    numDisplayedFrozenCols--;
                }
            }
            int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
            if (firstDisplayedScrollingCol != -1)
            {
                int numDisplayedScrollingCols = this.displayedBandsInfo.NumDisplayedScrollingCols;
                firstColumn = this.Columns[firstDisplayedScrollingCol];
                while (numDisplayedScrollingCols > 0)
                {
                    if (firstColumn.Displayed != displayed)
                    {
                        firstColumn.DisplayedInternal = displayed;
                    }
                    firstColumn = this.Columns.GetNextColumn(firstColumn, GridElementStates.Visible, GridElementStates.None);
                    numDisplayedScrollingCols--;
                }
            }
        }

        private void UpdateMouseEnteredCell(HitTestInfo hti, MouseEventArgs e)
        {
            HitTestInfo info;
            Point point = base.PointToClient(Control.MousePosition);
            if (hti != null)
            {
                info = hti;
            }
            else
            {
                info = this.HitTest(point.X, point.Y);
            }
            if (((info.Type != GridHitTestType.None) && (info.Type != GridHitTestType.HorizontalScrollBar)) && (info.Type != GridHitTestType.VerticalScrollBar))
            {
                if ((this.ptMouseEnteredCell.X != info.col) || (this.ptMouseEnteredCell.Y != info.row))
                {
                    GridCellEventArgs args;
                    if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                    {
                        args = new GridCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                        this.OnCellMouseLeave(args);
                    }
                    args = new GridCellEventArgs(info.col, info.row);
                    this.OnCellMouseEnter(args);
                }
                if (e != null)
                {
                    int localX = e.X - info.ColumnX;
                    if (this.RightToLeftInternal)
                    {
                        localX += (info.col == -1) ? this.RowHeadersWidth : this.Columns[info.col].Thickness;
                    }
                    GridCellMouseEventArgs args2 = new GridCellMouseEventArgs(info.col, info.row, localX, e.Y - info.RowY, e);
                    this.OnCellMouseMove(args2);
                }
            }
            else if (this.ptMouseEnteredCell.X != -2)
            {
                if (((this.ptMouseEnteredCell.X >= -1) && (this.ptMouseEnteredCell.X < this.Columns.Count)) && ((this.ptMouseEnteredCell.Y >= -1) && (this.ptMouseEnteredCell.Y < this.Rows.Count)))
                {
                    GridCellEventArgs args3 = new GridCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
                    this.OnCellMouseLeave(args3);
                }
                else
                {
                    this.ptMouseEnteredCell.X = this.ptMouseEnteredCell.Y = -2;
                }
            }
        }

        /// <summary>Forces the row at the given row index to update its error text.</summary>
        /// <param name="rowIndex">The zero-based index of the row to update.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is not in the valid range of 0 to the number of rows in the control minus 1.</exception>
        public void UpdateRowErrorText(int rowIndex)
        {
            if ((rowIndex < 0) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            if (base.IsHandleCreated && this.layout.RowHeadersVisible)
            {
                this.InvalidateCellPrivate(-1, rowIndex);
            }
        }

        /// <summary>Forces the rows in the given range to update their error text.</summary>
        /// <param name="rowIndexStart">The zero-based index of the first row in the set of rows to update.</param>
        /// <param name="rowIndexEnd">The zero-based index of the last row in the set of rows to update.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndexStart is not in the valid range of 0 to the number of rows in the control minus 1.-or-rowIndexEnd is not in the valid range of 0 to the number of rows in the control minus 1.-or-rowIndexEnd is less than rowIndexStart.</exception>
        public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
        {
            if ((rowIndexStart < 0) || (rowIndexStart >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndexStart");
            }
            if ((rowIndexEnd < 0) || (rowIndexEnd >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndexEnd");
            }
            if (rowIndexEnd < rowIndexStart)
            {
                throw new ArgumentOutOfRangeException("rowIndexEnd");
            }
            if (base.IsHandleCreated && this.layout.RowHeadersVisible)
            {
                Rectangle a = this.GetCellAdjustedDisplayRectangle(-1, rowIndexStart, true);
                Rectangle b = this.GetCellAdjustedDisplayRectangle(-1, rowIndexEnd, true);
                if (a.IsEmpty || b.IsEmpty)
                {
                    if (!a.IsEmpty || !b.IsEmpty)
                    {
                        base.Invalidate(this.layout.RowHeaders);
                    }
                }
                else
                {
                    base.Invalidate(Rectangle.Union(a, b));
                }
            }
        }

        /// <summary>Forces the specified row or rows to update their height information.</summary>
        /// <param name="rowIndex">The zero-based index of the first row to update.</param>
        /// <param name="updateToEnd">true to update the specified row and all subsequent rows.</param>
        /// <exception cref="T:System.ArgumentOutOfRangeException">rowIndex is less than 0 and updateToEnd is true.- or -rowIndex is less than -1 and updateToEnd is false.- or -rowIndex is greater than the highest row index in the <see cref="P:MControl.GridView.Grid.Rows"></see> collection.</exception>
        public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
        {
            if (((updateToEnd && (rowIndex < 0)) || (!updateToEnd && (rowIndex < -1))) || (rowIndex >= this.Rows.Count))
            {
                throw new ArgumentOutOfRangeException("rowIndex");
            }
            this.Rows.InvalidateCachedRowsHeights();
            bool flag = (rowIndex >= 0) && ((this.Rows.GetRowState(rowIndex) & GridElementStates.Visible) != GridElementStates.None);
            if (base.IsHandleCreated && ((rowIndex == -1) || flag))
            {
                if (updateToEnd)
                {
                    int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                    if (this.AutoSize)
                    {
                        LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                    }
                    else
                    {
                        this.PerformLayoutPrivate(false, false, true, false);
                    }
                    Rectangle data = this.layout.Data;
                    if (this.layout.RowHeadersVisible)
                    {
                        data = Rectangle.Union(data, this.layout.RowHeaders);
                    }
                    else if (this.SingleVerticalBorderAdded)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X--;
                        }
                        data.Width++;
                    }
                    if (!flag)
                    {
                        rowIndex = this.Rows.GetNextRow(rowIndex, GridElementStates.Visible);
                    }
                    if (rowIndex != -1)
                    {
                        int rowYFromIndex = this.GetRowYFromIndex((firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
                        data.Height -= data.Y - rowYFromIndex;
                        data.Y = rowYFromIndex;
                        base.Invalidate(data);
                    }
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl(true, true, false);
                    }
                }
                else
                {
                    if (rowIndex == -1)
                    {
                        if (this.AutoSize)
                        {
                            LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                        }
                        else
                        {
                            this.PerformLayoutPrivate(false, false, true, false);
                        }
                        base.Invalidate();
                    }
                    else
                    {
                        int num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                        if (this.inBulkLayoutCount == 0)
                        {
                            if (this.AutoSize)
                            {
                                LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
                            }
                            else
                            {
                                this.PerformLayoutPrivate(false, false, true, false);
                            }
                        }
                        if (this.inBulkPaintCount == 0)
                        {
                            Rectangle a = this.layout.Data;
                            if (this.layout.RowHeadersVisible)
                            {
                                a = Rectangle.Union(a, this.layout.RowHeaders);
                            }
                            else if (this.SingleVerticalBorderAdded)
                            {
                                if (!this.RightToLeftInternal)
                                {
                                    a.X--;
                                }
                                a.Width++;
                            }
                            int num4 = this.GetRowYFromIndex((num3 == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
                            a.Height -= a.Y - num4;
                            a.Y = num4;
                            base.Invalidate(a);
                        }
                    }
                    if (this.editingControl != null)
                    {
                        this.PositionEditingControl((rowIndex == -1) || (this.ptCurrentCell.Y != rowIndex), true, false);
                    }
                }
                this.UpdateMouseEnteredCell(null, null);
            }
        }

        private void UpdateRowsDisplayedState(bool displayed)
        {
            int firstDisplayedScrollingRow;
            int numDisplayedFrozenRows = this.displayedBandsInfo.NumDisplayedFrozenRows;
            if (numDisplayedFrozenRows > 0)
            {
                firstDisplayedScrollingRow = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                while (numDisplayedFrozenRows > 0)
                {
                    if (((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None) == displayed)
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, displayed);
                    }
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible | GridElementStates.Frozen);
                    numDisplayedFrozenRows--;
                }
            }
            firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
            if (firstDisplayedScrollingRow > -1)
            {
                for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
                {
                    if (((this.Rows.GetRowState(firstDisplayedScrollingRow) & GridElementStates.Displayed) == GridElementStates.None) == displayed)
                    {
                        this.Rows.SetRowState(firstDisplayedScrollingRow, GridElementStates.Displayed, displayed);
                    }
                    firstDisplayedScrollingRow = this.Rows.GetNextRow(firstDisplayedScrollingRow, GridElementStates.Visible);
                }
            }
        }

        private void UpdateSelectedCellsBlock(int anchorColumnIndex, ref int oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, ref int oldEdgeRowIndex, int newEdgeRowIndex)
        {
            if (((this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex)) || (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))) || (((anchorRowIndex < oldEdgeRowIndex) && (newEdgeRowIndex < anchorRowIndex)) || ((oldEdgeRowIndex < anchorRowIndex) && (anchorRowIndex < newEdgeRowIndex))))
            {
                this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                oldEdgeColumnIndex = newEdgeColumnIndex;
                oldEdgeRowIndex = newEdgeRowIndex;
            }
            else
            {
                if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) || (anchorColumnIndex == oldEdgeColumnIndex))) && (oldEdgeRowIndex == newEdgeRowIndex))
                {
                    GridColumn column = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    if (anchorRowIndex <= newEdgeRowIndex)
                    {
                        this.SelectCellRange(column.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(column.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) || (oldEdgeColumnIndex == anchorColumnIndex))) && (oldEdgeRowIndex == newEdgeRowIndex))
                {
                    GridColumn column2 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    if (anchorRowIndex <= newEdgeRowIndex)
                    {
                        this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column2.Index, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, column2.Index, anchorRowIndex, true);
                    }
                }
                else if (((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)) && (newEdgeColumnIndex == oldEdgeColumnIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, GridElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                    }
                }
                else if (((newEdgeRowIndex < oldEdgeRowIndex) && (oldEdgeRowIndex <= anchorRowIndex)) && (newEdgeColumnIndex == oldEdgeColumnIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                    }
                    else
                    {
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && !this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex)) && ((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)))
                {
                    GridColumn column3 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    this.SelectCellRange(column3.Index, anchorRowIndex, newEdgeColumnIndex, oldEdgeRowIndex, true);
                    this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, GridElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                }
                else if ((this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (newEdgeRowIndex < oldEdgeRowIndex)) && (oldEdgeRowIndex <= anchorRowIndex))
                {
                    if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex))
                    {
                        GridColumn column4 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                        this.SelectCellRange(column4.Index, oldEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                    }
                    else if (!this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
                    {
                        if (anchorRowIndex == oldEdgeRowIndex)
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, anchorColumnIndex, oldEdgeRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
                        }
                        else
                        {
                            GridColumn column5 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                            this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column5.Index, anchorRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                        }
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (newEdgeRowIndex < oldEdgeRowIndex)) && (anchorRowIndex >= oldEdgeRowIndex))
                {
                    if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                    {
                        GridColumn column6 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                        this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, column6.Index, anchorRowIndex, true);
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                    }
                    else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
                    {
                        GridColumn column7 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                        this.SelectCellRange(column7.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                        this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, GridElementStates.Visible), true);
                    }
                    else
                    {
                        this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                        this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
                    }
                }
                else if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && !this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex)) && ((newEdgeRowIndex > oldEdgeRowIndex) && (anchorRowIndex <= oldEdgeRowIndex)))
                {
                    GridColumn column8 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column8.Index, oldEdgeRowIndex, true);
                    this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                }
                else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex))
                {
                    GridColumn column9 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    if (newEdgeRowIndex == oldEdgeRowIndex)
                    {
                        if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            if (oldEdgeRowIndex > anchorRowIndex)
                            {
                                this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                            }
                            else
                            {
                                this.SelectCellRange(column9.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                            }
                        }
                    }
                    else if (newEdgeRowIndex < oldEdgeRowIndex)
                    {
                        if (((oldEdgeRowIndex > anchorRowIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex)) && (anchorRowIndex <= newEdgeRowIndex))
                        {
                            if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                            {
                                if (!this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex))
                                {
                                    this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                                    this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), newEdgeColumnIndex, oldEdgeRowIndex, false);
                                }
                            }
                            else
                            {
                                column9 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                                this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, column9.Index, newEdgeRowIndex, true);
                            }
                        }
                    }
                    else if (newEdgeRowIndex > oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex < anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex)) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                this.SelectCellRange(column9.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
                                this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                            }
                            else if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                column9 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                                this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, column9.Index, anchorRowIndex, true);
                            }
                        }
                        else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            this.SelectCellRange(column9.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
                            this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(anchorRowIndex, GridElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
                        }
                    }
                }
                else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex))
                {
                    GridColumn column10 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                    if (newEdgeRowIndex == oldEdgeRowIndex)
                    {
                        if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (newEdgeColumnIndex == anchorColumnIndex))
                        {
                            if (oldEdgeRowIndex > anchorRowIndex)
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                            }
                            else
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column10.Index, anchorRowIndex, false);
                            }
                        }
                    }
                    else if (newEdgeRowIndex < oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex > anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (newEdgeColumnIndex == anchorColumnIndex)) && (newEdgeRowIndex >= anchorRowIndex))
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                            }
                            else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && (newEdgeRowIndex >= anchorRowIndex))
                            {
                                column10 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                                this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
                                this.SelectCellRange(column10.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
                            }
                        }
                    }
                    else if (newEdgeRowIndex > oldEdgeRowIndex)
                    {
                        if (oldEdgeRowIndex < anchorRowIndex)
                        {
                            if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex)) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, column10.Index, anchorRowIndex, false);
                                this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                            }
                            else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                            {
                                column10 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], GridElementStates.Visible, GridElementStates.None);
                                this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                                this.SelectCellRange(column10.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
                            }
                        }
                        else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || (anchorColumnIndex == newEdgeColumnIndex))
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, column10.Index, oldEdgeRowIndex, false);
                            this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
                        }
                    }
                }
                else if (newEdgeRowIndex > oldEdgeRowIndex)
                {
                    if ((newEdgeColumnIndex == oldEdgeColumnIndex) && (newEdgeRowIndex <= anchorRowIndex))
                    {
                        if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                        {
                            this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                        }
                        else
                        {
                            this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, GridElementStates.Visible), false);
                        }
                    }
                }
                else if (((newEdgeRowIndex < oldEdgeRowIndex) && (newEdgeColumnIndex == oldEdgeColumnIndex)) && (newEdgeRowIndex >= anchorRowIndex))
                {
                    if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
                    {
                        this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
                    }
                    else
                    {
                        this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, GridElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
                    }
                }
                oldEdgeColumnIndex = newEdgeColumnIndex;
                oldEdgeRowIndex = newEdgeRowIndex;
            }
        }

        private void VertScrollTimer_Tick(object sender, EventArgs e)
        {
            base.BeginInvoke(new MethodInvoker(this.VertScrollTimerHandler));
        }

        private void VertScrollTimerHandler()
        {
            int num;
            int num2;
            Point point = base.PointToClient(Control.MousePosition);
            HitTestInfo hti = this.HitTest(point.X, point.Y);
            int x = point.X;
            int y = point.Y;
            if (this.GetOutOfBoundCorrectedHitTestInfo(ref hti, ref x, ref y, out num, out num2))
            {
                if (num2 != 0)
                {
                    int yOffset = Math.Abs(num2);
                    int rows = num2 / yOffset;
                    this.ScrollRowsByCount(rows, (rows < 0) ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement);
                    this.vertScrollTimer.Interval = GetRowScrollRate(yOffset);
                    if (!this.gridOper[8])
                    {
                        if (this.gridOper[0x10])
                        {
                            if (num != 0)
                            {
                                hti = this.HitTest((point.X - num) - (num / Math.Abs(num)), (point.Y - num2) - rows);
                            }
                            else
                            {
                                hti = this.HitTest(x, (point.Y - num2) - rows);
                            }
                            if ((hti.col >= 0) && (hti.row >= 0))
                            {
                                this.OnCellSelectMouseMove(hti);
                            }
                        }
                    }
                    else
                    {
                        hti = this.HitTest(x, (point.Y - num2) - rows);
                        if (hti.row >= 0)
                        {
                            this.OnRowSelectMouseMove(hti);
                        }
                    }
                }
                else
                {
                    if (this.gridOper[8] && (hti.row >= 0))
                    {
                        this.OnRowSelectMouseMove(hti);
                    }
                    else if ((this.gridOper[0x10] && (hti.col >= 0)) && (hti.row >= 0))
                    {
                        this.OnCellSelectMouseMove(hti);
                    }
                    this.VertScrollTimer.Enabled = false;
                }
            }
        }

        private void WireEditingControlEvents()
        {
            this.editingPanel.Click += new EventHandler(this.EditingControls_Click);
            this.editingPanel.DoubleClick += new EventHandler(this.EditingControls_DoubleClick);
            this.editingPanel.MouseClick += new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingPanel.MouseDoubleClick += new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingPanel.MouseDown += new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingPanel.MouseEnter += new EventHandler(this.EditingControls_MouseEnter);
            this.editingPanel.MouseLeave += new EventHandler(this.EditingControls_MouseLeave);
            this.editingPanel.MouseMove += new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingPanel.MouseUp += new MouseEventHandler(this.EditingControls_MouseUp);
            this.editingControl.Click += new EventHandler(this.EditingControls_Click);
            this.editingControl.DoubleClick += new EventHandler(this.EditingControls_DoubleClick);
            this.editingControl.MouseClick += new MouseEventHandler(this.EditingControls_MouseClick);
            this.editingControl.MouseDoubleClick += new MouseEventHandler(this.EditingControls_MouseDoubleClick);
            this.editingControl.MouseDown += new MouseEventHandler(this.EditingControls_MouseDown);
            this.editingControl.MouseEnter += new EventHandler(this.EditingControls_MouseEnter);
            this.editingControl.MouseLeave += new EventHandler(this.EditingControls_MouseLeave);
            this.editingControl.MouseMove += new MouseEventHandler(this.EditingControls_MouseMove);
            this.editingControl.MouseUp += new MouseEventHandler(this.EditingControls_MouseUp);
        }

        private void WireScrollBarsEvents()
        {
            if (this.horizScrollBar != null)
            {
                this.horizScrollBar.MouseEnter += new EventHandler(this.ScrollBar_MouseEnter);
                this.horizScrollBar.MouseLeave += new EventHandler(this.ScrollBar_MouseLeave);
            }
            if (this.vertScrollBar != null)
            {
                this.vertScrollBar.MouseEnter += new EventHandler(this.ScrollBar_MouseEnter);
                this.vertScrollBar.MouseLeave += new EventHandler(this.ScrollBar_MouseLeave);
            }
        }
        //override
        internal  void WmContextMenu(ref Message m)
        {
            ContextMenuStrip contextMenuStrip;
            Point point;
            int lParam = (short) ((int) m.LParam);
            int y = ((int) m.LParam) >> 0x10;
            bool isKeyboardActivated = false;
            if (((int) m.LParam) == -1)
            {
                isKeyboardActivated = true;
                point = new Point(base.Width / 2, base.Height / 2);
                contextMenuStrip = this.ContextMenuStrip;
            }
            else
            {
                point = base.PointToClientInternal(new Point(lParam, y));
                HitTestInfo info = this.HitTest(point.X, point.Y);
                GridCell headerCell = null;
                switch (info.Type)
                {
                    case GridHitTestType.Cell:
                        headerCell = this.Rows.SharedRow(info.row).Cells[info.col];
                        break;

                    case GridHitTestType.ColumnHeader:
                        headerCell = this.Columns[info.col].HeaderCell;
                        break;

                    case GridHitTestType.RowHeader:
                        headerCell = this.Rows.SharedRow(info.row).HeaderCell;
                        break;

                    case GridHitTestType.TopLeftHeader:
                        headerCell = this.TopLeftHeaderCell;
                        break;
                }
                if (headerCell != null)
                {
                    contextMenuStrip = headerCell.GetInheritedContextMenuStrip(info.row);
                }
                else
                {
                    contextMenuStrip = this.ContextMenuStrip;
                }
            }
            if ((contextMenuStrip != null) && base.ClientRectangle.Contains(point))
            {
                contextMenuStrip.ShowInternal(this, point, isKeyboardActivated);
            }
            else
            {
                this.DefWndProc(ref m);
            }
        }

        private void WmGetDlgCode(ref Message m)
        {
            m.Result = (IntPtr) ((((long) m.Result) | 1L) | 0x80L);
            Keys modifierKeys = Control.ModifierKeys;
            if (this.GetTabKeyEffective((modifierKeys & Keys.Shift) == Keys.Shift, (modifierKeys & Keys.Control) == Keys.Control))
            {
                m.Result = (IntPtr) (((long) m.Result) | 2L);
            }
        }

        private unsafe bool WmNotify(ref Message m)
        {
            if (m.LParam != IntPtr.Zero)
            {
                MControl.Util.NativeMethods.NMHDR* lParam = (MControl.Util.NativeMethods.NMHDR*) m.LParam;
                if ((lParam->code == MControl.Util.NativeMethods.TTN_GETDISPINFO) && !base.DesignMode)
                {
                    string toolTipPrivate = this.ToolTipPrivate;
                    if (!string.IsNullOrEmpty(toolTipPrivate))
                    {
                        System.Windows.Forms.UnsafeNativeMethods.SendMessage(new HandleRef(this, lParam->hwndFrom), 0x418, 0, SystemInformation.MaxWindowTrackSize.Width);
                        MControl.Util.NativeMethods.TOOLTIPTEXT structure = (MControl.Util.NativeMethods.TOOLTIPTEXT) m.GetLParam(typeof(MControl.Util.NativeMethods.TOOLTIPTEXT));
                        structure.lpszText = toolTipPrivate;
                        if (this.RightToLeft == RightToLeft.Yes)
                        {
                            structure.uFlags |= 4;
                        }
                        Marshal.StructureToPtr(structure, m.LParam, false);
                        return true;
                    }
                }
            }
            return false;
        }

        /// <summary>Processes window messages.</summary>
        /// <param name="m">A <see cref="T:System.Windows.Forms.Message"></see>, passed by reference, that represents the window message to process.</param>
        [SecurityPermission(SecurityAction.LinkDemand, Flags=SecurityPermissionFlag.UnmanagedCode)]
        protected override void WndProc(ref Message m)
        {
            switch (m.Msg)
            {
                case 0x4e:
                    if (this.WmNotify(ref m))
                    {
                        return;
                    }
                    break;

                case 0x87:
                    this.WmGetDlgCode(ref m);
                    return;

                case 0x10d:
                case 0x10f:
                    if (this.editingControl != null)
                    {
                        this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
                    }
                    break;

                case 0x201:
                case 0x203:
                    this.gridOper[0x2000] = true;
                    try
                    {
                        base.WndProc(ref m);
                    }
                    finally
                    {
                        this.gridOper[0x2000] = false;
                    }
                    return;
            }
            base.WndProc(ref m);
        }

        /// <summary>Gets the border style for the upper-left cell in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that represents the style of the border of the upper-left cell in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Advanced)]
        public virtual GridAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
        {
            get
            {
                GridAdvancedBorderStyle style;
                if (!this.ApplyVisualStylesToHeaderCells)
                {
                    switch (this.AdvancedColumnHeadersBorderStyle.All)
                    {
                        case GridAdvancedCellBorderStyle.InsetDouble:
                            style = new GridAdvancedBorderStyle();
                            style.LeftInternal = this.RightToLeftInternal ? GridAdvancedCellBorderStyle.Inset : GridAdvancedCellBorderStyle.InsetDouble;
                            style.RightInternal = this.RightToLeftInternal ? GridAdvancedCellBorderStyle.InsetDouble : GridAdvancedCellBorderStyle.Inset;
                            style.TopInternal = GridAdvancedCellBorderStyle.InsetDouble;
                            style.BottomInternal = GridAdvancedCellBorderStyle.Inset;
                            return style;

                        case GridAdvancedCellBorderStyle.Outset:
                            goto Label_02DB;

                        case GridAdvancedCellBorderStyle.OutsetDouble:
                        case GridAdvancedCellBorderStyle.OutsetPartial:
                            style = new GridAdvancedBorderStyle();
                            style.LeftInternal = this.RightToLeftInternal ? GridAdvancedCellBorderStyle.Outset : GridAdvancedCellBorderStyle.OutsetDouble;
                            style.RightInternal = this.RightToLeftInternal ? GridAdvancedCellBorderStyle.OutsetDouble : GridAdvancedCellBorderStyle.Outset;
                            style.TopInternal = GridAdvancedCellBorderStyle.OutsetDouble;
                            style.BottomInternal = GridAdvancedCellBorderStyle.Outset;
                            return style;

                        case GridAdvancedCellBorderStyle.NotSet:
                            if ((this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Left != GridAdvancedCellBorderStyle.None)) && (!this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Right != GridAdvancedCellBorderStyle.None)))
                            {
                                return this.AdvancedColumnHeadersBorderStyle;
                            }
                            style = new GridAdvancedBorderStyle();
                            if (this.RightToLeftInternal)
                            {
                                style.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
                                style.RightInternal = this.AdvancedRowHeadersBorderStyle.Right;
                            }
                            else
                            {
                                style.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
                                style.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
                            }
                            style.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
                            style.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
                            return style;
                    }
                }
                else
                {
                    switch (this.AdvancedColumnHeadersBorderStyle.All)
                    {
                        case GridAdvancedCellBorderStyle.InsetDouble:
                            style = new GridAdvancedBorderStyle();
                            if (!this.RightToLeftInternal)
                            {
                                style.LeftInternal = GridAdvancedCellBorderStyle.InsetDouble;
                            }
                            else
                            {
                                style.LeftInternal = GridAdvancedCellBorderStyle.Inset;
                            }
                            style.RightInternal = GridAdvancedCellBorderStyle.Inset;
                            style.TopInternal = GridAdvancedCellBorderStyle.InsetDouble;
                            style.BottomInternal = GridAdvancedCellBorderStyle.Inset;
                            return style;

                        case GridAdvancedCellBorderStyle.OutsetDouble:
                        case GridAdvancedCellBorderStyle.OutsetPartial:
                            style = new GridAdvancedBorderStyle();
                            if (!this.RightToLeftInternal)
                            {
                                style.LeftInternal = GridAdvancedCellBorderStyle.OutsetDouble;
                                break;
                            }
                            style.LeftInternal = GridAdvancedCellBorderStyle.Outset;
                            break;

                        case GridAdvancedCellBorderStyle.NotSet:
                            if ((this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Left != GridAdvancedCellBorderStyle.None)) && (!this.RightToLeftInternal || (this.AdvancedColumnHeadersBorderStyle.Right != GridAdvancedCellBorderStyle.None)))
                            {
                                return this.AdvancedColumnHeadersBorderStyle;
                            }
                            style = new GridAdvancedBorderStyle();
                            if (this.RightToLeftInternal)
                            {
                                style.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
                                style.RightInternal = (this.AdvancedRowHeadersBorderStyle.Right == GridAdvancedCellBorderStyle.OutsetDouble) ? GridAdvancedCellBorderStyle.Outset : this.AdvancedRowHeadersBorderStyle.Right;
                            }
                            else
                            {
                                style.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
                                style.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
                            }
                            style.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
                            style.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
                            return style;

                        default:
                            return this.AdvancedColumnHeadersBorderStyle;
                    }
                    style.RightInternal = GridAdvancedCellBorderStyle.Outset;
                    style.TopInternal = GridAdvancedCellBorderStyle.OutsetDouble;
                    style.BottomInternal = GridAdvancedCellBorderStyle.Outset;
                    return style;
                }
            Label_02DB:
                return this.AdvancedColumnHeadersBorderStyle;
            }
        }

        /// <summary>Gets the border style of the cells in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that represents the border style of the cells in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public GridAdvancedBorderStyle AdvancedCellBorderStyle
        {
            get
            {
                return this.advancedCellBorderStyle;
            }
        }

        /// <summary>Gets the border style of the column header cells in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that represents the border style of the <see cref="T:MControl.GridView.GridColumnHeaderCell"></see> objects in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public GridAdvancedBorderStyle AdvancedColumnHeadersBorderStyle
        {
            get
            {
                return this.advancedColumnHeadersBorderStyle;
            }
        }

        /// <summary>Gets the border style of the row header cells in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAdvancedBorderStyle"></see> that represents the border style of the <see cref="T:MControl.GridView.GridRowHeaderCell"></see> objects in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public GridAdvancedBorderStyle AdvancedRowHeadersBorderStyle
        {
            get
            {
                return this.advancedRowHeadersBorderStyle;
            }
        }

        /// <summary>Gets or sets a value indicating whether the option to add rows is displayed to the user.</summary>
        /// <returns>true if the add-row option is displayed to the user; otherwise false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(true), Description("Grid_AllowUserToAddRows"), Category("Behavior")]
        public bool AllowUserToAddRows
        {
            get
            {
                return this.gridState1[1];
            }
            set
            {
                if (this.AllowUserToAddRows != value)
                {
                    this.gridState1[1] = value;
                    if (this.DataSource != null)
                    {
                        this.dataConnection.ResetCachedAllowUserToAddRowsInternal();
                    }
                    this.OnAllowUserToAddRowsChanged(EventArgs.Empty);
                }
            }
        }

        internal bool AllowUserToAddRowsInternal
        {
            get
            {
                if (this.DataSource == null)
                {
                    return this.AllowUserToAddRows;
                }
                return (this.AllowUserToAddRows && this.dataConnection.AllowAdd);
            }
        }

        /// <summary>Gets or sets a value indicating whether the user is allowed to delete rows from the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>true if the user can delete rows; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        [Category("Behavior"), Description("Grid_AllowUserToDeleteRows"), DefaultValue(true)]
        public bool AllowUserToDeleteRows
        {
            get
            {
                return this.gridState1[2];
            }
            set
            {
                if (this.AllowUserToDeleteRows != value)
                {
                    this.gridState1[2] = value;
                    this.OnAllowUserToDeleteRowsChanged(EventArgs.Empty);
                }
            }
        }

        internal bool AllowUserToDeleteRowsInternal
        {
            get
            {
                if (this.DataSource == null)
                {
                    return this.AllowUserToDeleteRows;
                }
                return (this.AllowUserToDeleteRows && this.dataConnection.AllowRemove);
            }
        }

        /// <summary>Gets or sets a value indicating whether manual column repositioning is enabled.</summary>
        /// <returns>true if the user can change the column order; otherwise, false. The default is false.</returns>
        /// <filterpriority>1</filterpriority>
        [DefaultValue(false), Category("Behavior"), Description("Grid_AllowUserToOrderColumns")]
        public bool AllowUserToOrderColumns
        {
            get
            {
                return this.gridState1[4];
            }
            set
            {
                if (this.AllowUserToOrderColumns != value)
                {
                    this.gridState1[4] = value;
                    this.OnAllowUserToOrderColumnsChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether users can resize columns.</summary>
        /// <returns>true if users can resize columns; otherwise, false. The default is true.</returns>
        [Category("Behavior"), DefaultValue(true), Description("Grid_AllowUserToResizeColumns")]
        public bool AllowUserToResizeColumns
        {
            get
            {
                return this.gridState2[2];
            }
            set
            {
                if (this.AllowUserToResizeColumns != value)
                {
                    this.gridState2[2] = value;
                    this.OnAllowUserToResizeColumnsChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether users can resize rows.</summary>
        /// <returns>true if all the rows are resizable; otherwise, false. The default is true.</returns>
        [Description("Grid_AllowUserToResizeRows"), DefaultValue(true), Category("Behavior")]
        public bool AllowUserToResizeRows
        {
            get
            {
                return this.gridState2[4];
            }
            set
            {
                if (this.AllowUserToResizeRows != value)
                {
                    this.gridState2[4] = value;
                    this.OnAllowUserToResizeRowsChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets the default cell style applied to odd-numbered rows of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridCellStyle"></see> to apply to the odd-numbered rows.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), Description("Grid_AlternatingRowsDefaultCellStyle")]
        public GridCellStyle AlternatingRowsDefaultCellStyle
        {
            get
            {
                if (this.alternatingRowsDefaultCellStyle == null)
                {
                    this.alternatingRowsDefaultCellStyle = new GridCellStyle();
                    this.alternatingRowsDefaultCellStyle.AddScope(this, GridCellStyleScopes.AlternatingRows);
                }
                return this.alternatingRowsDefaultCellStyle;
            }
            set
            {
                GridCellStyle alternatingRowsDefaultCellStyle = this.AlternatingRowsDefaultCellStyle;
                alternatingRowsDefaultCellStyle.RemoveScope(GridCellStyleScopes.AlternatingRows);
                this.alternatingRowsDefaultCellStyle = value;
                if (value != null)
                {
                    this.alternatingRowsDefaultCellStyle.AddScope(this, GridCellStyleScopes.AlternatingRows);
                }
                GridCellStyleDifferences differencesFrom = alternatingRowsDefaultCellStyle.GetDifferencesFrom(this.AlternatingRowsDefaultCellStyle);
                if (differencesFrom != GridCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == GridCellStyleDifferences.AffectPreferredSize;
                    this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        internal bool ApplyVisualStylesToHeaderCells
        {
            get
            {
                return (Application.RenderWithVisualStyles && this.EnableHeadersVisualStyles);
            }
        }

        internal bool ApplyVisualStylesToInnerCells
        {
            get
            {
                return Application.RenderWithVisualStyles;
            }
        }

        /// <summary>Gets or sets a value indicating whether columns are created automatically when the <see cref="P:MControl.GridView.Grid.DataSource"></see> or <see cref="P:MControl.GridView.Grid.DataMember"></see> properties are set.</summary>
        /// <returns>true if the columns should be created automatically; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(true), EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public bool AutoGenerateColumns
        {
            get
            {
                return this.gridState1[0x800000];
            }
            set
            {
                if (this.gridState1[0x800000] != value)
                {
                    this.gridState1[0x800000] = value;
                    this.OnAutoGenerateColumnsChanged(EventArgs.Empty);
                }
            }
        }

        public override bool AutoSize
        {
            get
            {
                return this.gridState1[0x40000000];
            }
            set
            {
                base.AutoSize = value;
                this.gridState1[0x40000000] = value;
            }
        }

        /// <summary>Gets or sets a value indicating how column widths are determined.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> value. The default is <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.None"></see>. </returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridAutoSizeColumnsMode"></see> value. </exception>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.ColumnHeader"></see>, column headers are hidden, and at least one visible column has an <see cref="P:MControl.GridView.GridColumn.AutoSizeMode"></see> property value of <see cref="F:MControl.GridView.GridAutoSizeColumnMode.NotSet"></see>.-or-The specified value when setting this property is <see cref="F:MControl.GridView.GridAutoSizeColumnsMode.Fill"></see> and at least one visible column with an <see cref="P:MControl.GridView.GridColumn.AutoSizeMode"></see> property value of <see cref="F:MControl.GridView.GridAutoSizeColumnMode.NotSet"></see> is frozen.</exception>
        [Category("Layout"), DefaultValue(1), Description("Grid_AutoSizeColumnsMode")]
        public GridAutoSizeColumnsMode AutoSizeColumnsMode
        {
            get
            {
                return this.autoSizeColumnsMode;
            }
            set
            {
                switch (value)
                {
                    case GridAutoSizeColumnsMode.None:
                    case GridAutoSizeColumnsMode.ColumnHeader:
                    case GridAutoSizeColumnsMode.AllCellsExceptHeader:
                    case GridAutoSizeColumnsMode.AllCells:
                    case GridAutoSizeColumnsMode.DisplayedCellsExceptHeader:
                    case GridAutoSizeColumnsMode.DisplayedCells:
                    case GridAutoSizeColumnsMode.Fill:
                        if (this.autoSizeColumnsMode != value)
                        {
                            foreach (GridColumn column in this.Columns)
                            {
                                if ((column.AutoSizeMode != GridAutoSizeColumnMode.NotSet) || !column.Visible)
                                {
                                    continue;
                                }
                                if ((value == GridAutoSizeColumnsMode.ColumnHeader) && !this.ColumnHeadersVisible)
                                {
                                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeColumnsInvisibleColumnHeaders"));
                                }
                                if ((value == GridAutoSizeColumnsMode.Fill) && column.Frozen)
                                {
                                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoFillFrozenColumns"));
                                }
                            }
                            GridAutoSizeColumnMode[] previousModes = new GridAutoSizeColumnMode[this.Columns.Count];
                            foreach (GridColumn column2 in this.Columns)
                            {
                                previousModes[column2.Index] = column2.InheritedAutoSizeMode;
                            }
                            GridAutoSizeColumnsModeEventArgs e = new GridAutoSizeColumnsModeEventArgs(previousModes);
                            this.autoSizeColumnsMode = value;
                            this.OnAutoSizeColumnsModeChanged(e);
                        }
                        return;
                }
                throw new InvalidEnumArgumentException("value", (int) value, typeof(GridAutoSizeColumnsMode));
            }
        }

        /// <summary>Gets or sets a value indicating how row heights are determined. </summary>
        /// <returns>A <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> value indicating the sizing mode. The default is <see cref="F:MControl.GridView.GridAutoSizeRowsMode.None"></see>.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:MControl.GridView.GridAutoSizeRowsMode.AllHeaders"></see> or <see cref="F:MControl.GridView.GridAutoSizeRowsMode.DisplayedHeaders"></see> and row headers are hidden. </exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridAutoSizeRowsMode"></see> value. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Layout"), Description("Grid_AutoSizeRowsMode"), DefaultValue(0)]
        public GridAutoSizeRowsMode AutoSizeRowsMode
        {
            get
            {
                return this.autoSizeRowsMode;
            }
            set
            {
                switch (value)
                {
                    case GridAutoSizeRowsMode.None:
                    case GridAutoSizeRowsMode.AllHeaders:
                    case GridAutoSizeRowsMode.AllCellsExceptHeaders:
                    case GridAutoSizeRowsMode.AllCells:
                    case GridAutoSizeRowsMode.DisplayedHeaders:
                    case GridAutoSizeRowsMode.DisplayedCellsExceptHeaders:
                    case GridAutoSizeRowsMode.DisplayedCells:
                        if (((value == GridAutoSizeRowsMode.AllHeaders) || (value == GridAutoSizeRowsMode.DisplayedHeaders)) && !this.RowHeadersVisible)
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotAutoSizeRowsInvisibleRowHeader"));
                        }
                        if (this.autoSizeRowsMode != value)
                        {
                            GridAutoSizeModeEventArgs e = new GridAutoSizeModeEventArgs(this.autoSizeRowsMode != GridAutoSizeRowsMode.None);
                            this.autoSizeRowsMode = value;
                            this.OnAutoSizeRowsModeChanged(e);
                        }
                        return;
                }
                throw new InvalidEnumArgumentException("value", (int) value, typeof(GridAutoSizeRowsMode));
            }
        }

        /// <summary>Gets or sets the background color for the control.</summary>
        /// <returns>A <see cref="T:System.Drawing.Color"></see> that represents the background color of the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor"></see> property.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public override System.Drawing.Color BackColor
        {
            get
            {
                return base.BackColor;
            }
            set
            {
                base.BackColor = value;
            }
        }

        internal SolidBrush BackgroundBrush
        {
            get
            {
                return this.backgroundBrush;
            }
        }

        /// <summary>Gets or sets the background color of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:System.Drawing.Color"></see> that represents the background color of the <see cref="T:MControl.GridView.Grid"></see>. The default is <see cref="P:System.Drawing.SystemColors.AppWorkspace"></see>. </returns>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty"></see>. -or-The specified value when setting this property has a <see cref="P:System.Drawing.Color.A"></see> property value that is less that 255.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("GridBackgroundColor"), Category("Appearance")]
        public System.Drawing.Color BackgroundColor
        {
            get
            {
                return this.backgroundBrush.Color;
            }
            set
            {
                if (value.IsEmpty)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_EmptyColor", new object[] { "BackgroundColor" }));
                }
                if (value.A < 0xff)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_TransparentColor", new object[] { "BackgroundColor" }));
                }
                if (!value.Equals(this.backgroundBrush.Color))
                {
                    this.backgroundBrush = new SolidBrush(value);
                    this.OnBackgroundColorChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets the background image displayed in the control.</summary>
        /// <returns>An <see cref="T:System.Drawing.Image"></see> that represents the image to display in the background of the control.</returns>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public override Image BackgroundImage
        {
            get
            {
                return base.BackgroundImage;
            }
            set
            {
                base.BackgroundImage = value;
            }
        }

        /// <summary>Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout"></see> enumeration.</summary>
        /// <returns>An <see cref="T:System.Windows.Forms.ImageLayout"></see> value indicating the background image layout. The default is <see cref="F:System.Windows.Forms.ImageLayout.Tile"></see>.</returns>
        [EditorBrowsable(EditorBrowsableState.Never), Browsable(false)]
        public override ImageLayout BackgroundImageLayout
        {
            get
            {
                return base.BackgroundImageLayout;
            }
            set
            {
                base.BackgroundImageLayout = value;
            }
        }

        /// <summary>Gets or sets the border style for the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>One of the <see cref="T:System.Windows.Forms.BorderStyle"></see> values. The default is <see cref="F:System.Windows.Forms.BorderStyle.FixedSingle"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.BorderStyle"></see> value. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("Grid_BorderStyle"), DefaultValue(1), Category("Appearance")]
        public System.Windows.Forms.BorderStyle BorderStyle
        {
            get
            {
                return this.borderStyle;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 2))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(System.Windows.Forms.BorderStyle));
                }
                if (this.borderStyle != value)
                {
                    using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.BorderStyle))
                    {
                        this.borderStyle = value;
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        base.Invalidate();
                        this.OnBorderStyleChanged(EventArgs.Empty);
                    }
                }
            }
        }

        private int BorderWidth
        {
            get
            {
                if (this.BorderStyle == System.Windows.Forms.BorderStyle.Fixed3D)
                {
                    if (!Application.RenderWithVisualStyles)
                    {
                        return SystemInformation.Border3DSize.Width;
                    }
                    return 1;
                }
                if (this.BorderStyle == System.Windows.Forms.BorderStyle.FixedSingle)
                {
                    return 1;
                }
                return 0;
            }
        }

        internal Graphics CachedGraphics
        {
            get
            {
                if (this.cachedGraphics == null)
                {
                    this.cachedGraphics = WindowsFormsUtils.CreateMeasurementGraphics();
                }
                return this.cachedGraphics;
            }
        }

        protected override bool CanEnableIme
        {
            get
            {
                bool canEnableIme = false;
                if ((this.ptCurrentCell.X != -1) && this.ColumnEditable(this.ptCurrentCell.X))
                {
                    GridCell currentCellInternal = this.CurrentCellInternal;
                    if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y))
                    {
                        canEnableIme = base.CanEnableIme;
                    }
                }
                return canEnableIme;
            }
        }

        /// <summary>Gets the cell border style for the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridCellBorderStyle"></see> that represents the border style of the cells contained in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridCellBorderStyle"></see> value.</exception>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:MControl.GridView.GridCellBorderStyle.Custom"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(true), DefaultValue(1), Category("Appearance"), Description("Grid_CellBorderStyle")]
        public GridCellBorderStyle CellBorderStyle
        {
            get
            {
                switch (this.advancedCellBorderStyle.All)
                {
                    case GridAdvancedCellBorderStyle.NotSet:
                        if ((this.advancedCellBorderStyle.Top != GridAdvancedCellBorderStyle.None) || (this.advancedCellBorderStyle.Bottom != GridAdvancedCellBorderStyle.None))
                        {
                            goto Label_00D1;
                        }
                        if (!this.RightToLeftInternal)
                        {
                            if ((this.advancedCellBorderStyle.Left == GridAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Right == GridAdvancedCellBorderStyle.Single))
                            {
                                return GridCellBorderStyle.SingleVertical;
                            }
                            break;
                        }
                        if ((this.advancedCellBorderStyle.Right != GridAdvancedCellBorderStyle.None) || (this.advancedCellBorderStyle.Left != GridAdvancedCellBorderStyle.Single))
                        {
                            break;
                        }
                        return GridCellBorderStyle.SingleVertical;

                    case GridAdvancedCellBorderStyle.None:
                        return GridCellBorderStyle.None;

                    case GridAdvancedCellBorderStyle.Single:
                        return GridCellBorderStyle.Single;

                    case GridAdvancedCellBorderStyle.Inset:
                        return GridCellBorderStyle.Sunken;

                    case GridAdvancedCellBorderStyle.Outset:
                        return GridCellBorderStyle.Raised;

                    default:
                        return GridCellBorderStyle.Custom;
                }
                if ((this.advancedCellBorderStyle.Right == GridAdvancedCellBorderStyle.Outset) && (this.advancedCellBorderStyle.Left == GridAdvancedCellBorderStyle.Outset))
                {
                    return GridCellBorderStyle.RaisedVertical;
                }
                if ((this.advancedCellBorderStyle.Right == GridAdvancedCellBorderStyle.Inset) && (this.advancedCellBorderStyle.Left == GridAdvancedCellBorderStyle.Inset))
                {
                    return GridCellBorderStyle.SunkenVertical;
                }
            Label_00D1:
                if ((this.advancedCellBorderStyle.Left == GridAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Right == GridAdvancedCellBorderStyle.None))
                {
                    if ((this.advancedCellBorderStyle.Top == GridAdvancedCellBorderStyle.None) && (this.advancedCellBorderStyle.Bottom == GridAdvancedCellBorderStyle.Single))
                    {
                        return GridCellBorderStyle.SingleHorizontal;
                    }
                    if ((this.advancedCellBorderStyle.Top == GridAdvancedCellBorderStyle.Outset) && (this.advancedCellBorderStyle.Bottom == GridAdvancedCellBorderStyle.Outset))
                    {
                        return GridCellBorderStyle.RaisedHorizontal;
                    }
                    if ((this.advancedCellBorderStyle.Top == GridAdvancedCellBorderStyle.Inset) && (this.advancedCellBorderStyle.Bottom == GridAdvancedCellBorderStyle.Inset))
                    {
                        return GridCellBorderStyle.SunkenHorizontal;
                    }
                }
                return GridCellBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 10))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridCellBorderStyle));
                }
                if (value == this.CellBorderStyle)
                {
                    return;
                }
                if (value == GridCellBorderStyle.Custom)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CustomCellBorderStyleInvalid", new object[] { "CellBorderStyle" }));
                }
                this.gridOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case GridCellBorderStyle.Single:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case GridCellBorderStyle.Raised:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case GridCellBorderStyle.Sunken:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        case GridCellBorderStyle.None:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            goto Label_01DF;

                        case GridCellBorderStyle.SingleVertical:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            if (!this.RightToLeftInternal)
                            {
                                break;
                            }
                            this.advancedCellBorderStyle.LeftInternal = GridAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case GridCellBorderStyle.RaisedVertical:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.RightInternal = GridAdvancedCellBorderStyle.Outset;
                            this.advancedCellBorderStyle.LeftInternal = GridAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case GridCellBorderStyle.SunkenVertical:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.RightInternal = GridAdvancedCellBorderStyle.Inset;
                            this.advancedCellBorderStyle.LeftInternal = GridAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        case GridCellBorderStyle.SingleHorizontal:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.BottomInternal = GridAdvancedCellBorderStyle.Single;
                            goto Label_01DF;

                        case GridCellBorderStyle.RaisedHorizontal:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.TopInternal = GridAdvancedCellBorderStyle.Outset;
                            this.advancedCellBorderStyle.BottomInternal = GridAdvancedCellBorderStyle.Outset;
                            goto Label_01DF;

                        case GridCellBorderStyle.SunkenHorizontal:
                            this.advancedCellBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            this.advancedCellBorderStyle.TopInternal = GridAdvancedCellBorderStyle.Inset;
                            this.advancedCellBorderStyle.BottomInternal = GridAdvancedCellBorderStyle.Inset;
                            goto Label_01DF;

                        default:
                            goto Label_01DF;
                    }
                    this.advancedCellBorderStyle.RightInternal = GridAdvancedCellBorderStyle.Single;
                }
                finally
                {
                    this.gridOper[0x10000] = false;
                }
            Label_01DF:
                this.OnCellBorderStyleChanged(EventArgs.Empty);
            }
        }

        internal bool CellMouseDownInContentBounds
        {
            get
            {
                return this.gridState2[0x10000000];
            }
            set
            {
                this.gridState2[0x10000000] = value;
            }
        }

        internal GridCellPaintingEventArgs CellPaintingEventArgs
        {
            get
            {
                if (this.dgvcpe == null)
                {
                    this.dgvcpe = new GridCellPaintingEventArgs(this);
                }
                return this.dgvcpe;
            }
        }

        private GridCellStyleChangedEventArgs CellStyleChangedEventArgs
        {
            get
            {
                if (this.dgvcsce == null)
                {
                    this.dgvcsce = new GridCellStyleChangedEventArgs();
                }
                return this.dgvcsce;
            }
        }

        internal GridCellValueEventArgs CellValueEventArgs
        {
            get
            {
                if (this.dgvcve == null)
                {
                    this.dgvcve = new GridCellValueEventArgs();
                }
                return this.dgvcve;
            }
        }

        /// <summary>Gets or sets a value that indicates whether users can copy cell text values to the <see cref="T:System.Windows.Forms.Clipboard"></see> and whether row and column header text is included.</summary>
        /// <returns>One of the <see cref="T:MControl.GridView.GridClipboardCopyMode"></see> values. The default is <see cref="F:MControl.GridView.GridClipboardCopyMode.EnableWithAutoHeaderText"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridClipboardCopyMode"></see> value.</exception>
        /// <filterpriority>1</filterpriority>
        [Category("Behavior"), Description("Grid_ClipboardCopyMode"), Browsable(true), DefaultValue(1)]
        public GridClipboardCopyMode ClipboardCopyMode
        {
            get
            {
                return this.clipboardCopyMode;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 3))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridClipboardCopyMode));
                }
                this.clipboardCopyMode = value;
            }
        }

        /// <summary>Gets or sets the number of columns displayed in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>The number of columns displayed in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:MControl.GridView.Grid.DataSource"></see> property has been set. </exception>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Advanced), DefaultValue(0)]
        public int ColumnCount
        {
            get
            {
                return this.Columns.Count;
            }
            set
            {
                if (value < 0)
                {
                    object[] args = new object[] { "ColumnCount", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnCount", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (this.DataSource != null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotSetColumnCountOnDataBoundGrid"));
                }
                if (value != this.Columns.Count)
                {
                    if (value == 0)
                    {
                        this.Columns.Clear();
                    }
                    else if (value >= this.Columns.Count)
                    {
                        while (value > this.Columns.Count)
                        {
                            int count = this.Columns.Count;
                            this.Columns.Add(null, null);
                            if (this.Columns.Count <= count)
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        while (value < this.Columns.Count)
                        {
                            int num = this.Columns.Count;
                            this.Columns.RemoveAt(num - 1);
                            if (this.Columns.Count >= num)
                            {
                                return;
                            }
                        }
                    }
                }
            }
        }

        /// <summary>Gets the border style applied to the column headers.</summary>
        /// <returns>One of the <see cref="T:MControl.GridView.GridHeaderBorderStyle"></see> values.</returns>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:MControl.GridView.GridHeaderBorderStyle.Custom"></see>.</exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridHeaderBorderStyle"></see> value.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(2), Category("Appearance"), Description("Grid_ColumnHeadersBorderStyle"), Browsable(true)]
        public GridHeaderBorderStyle ColumnHeadersBorderStyle
        {
            get
            {
                switch (this.advancedColumnHeadersBorderStyle.All)
                {
                    case GridAdvancedCellBorderStyle.NotSet:
                        return GridHeaderBorderStyle.Custom;

                    case GridAdvancedCellBorderStyle.None:
                        return GridHeaderBorderStyle.None;

                    case GridAdvancedCellBorderStyle.Single:
                        return GridHeaderBorderStyle.Single;

                    case GridAdvancedCellBorderStyle.InsetDouble:
                        return GridHeaderBorderStyle.Sunken;

                    case GridAdvancedCellBorderStyle.OutsetPartial:
                        return GridHeaderBorderStyle.Raised;
                }
                return GridHeaderBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridHeaderBorderStyle));
                }
                if (value == this.ColumnHeadersBorderStyle)
                {
                    return;
                }
                if (value == GridHeaderBorderStyle.Custom)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CustomCellBorderStyleInvalid", new object[] { "ColumnHeadersBorderStyle" }));
                }
                this.gridOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case GridHeaderBorderStyle.Single:
                            this.advancedColumnHeadersBorderStyle.All = GridAdvancedCellBorderStyle.Single;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.Raised:
                            this.advancedColumnHeadersBorderStyle.All = GridAdvancedCellBorderStyle.OutsetPartial;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.Sunken:
                            this.advancedColumnHeadersBorderStyle.All = GridAdvancedCellBorderStyle.InsetDouble;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.None:
                            this.advancedColumnHeadersBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            goto Label_00CC;
                    }
                }
                finally
                {
                    this.gridOper[0x10000] = false;
                }
            Label_00CC:
                this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
            }
        }

        /// <summary>Gets or sets the default column header style.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridCellStyle"></see> that represents the default column header style.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), AmbientValue((string) null), Description("Grid_ColumnHeadersDefaultCellStyle")]
        public GridCellStyle ColumnHeadersDefaultCellStyle
        {
            get
            {
                if (this.columnHeadersDefaultCellStyle == null)
                {
                    this.columnHeadersDefaultCellStyle = this.DefaultColumnHeadersDefaultCellStyle;
                }
                return this.columnHeadersDefaultCellStyle;
            }
            set
            {
                GridCellStyle columnHeadersDefaultCellStyle = this.ColumnHeadersDefaultCellStyle;
                columnHeadersDefaultCellStyle.RemoveScope(GridCellStyleScopes.ColumnHeaders);
                this.columnHeadersDefaultCellStyle = value;
                if (value != null)
                {
                    this.columnHeadersDefaultCellStyle.AddScope(this, GridCellStyleScopes.ColumnHeaders);
                }
                GridCellStyleDifferences differencesFrom = columnHeadersDefaultCellStyle.GetDifferencesFrom(this.ColumnHeadersDefaultCellStyle);
                if (differencesFrom != GridCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == GridCellStyleDifferences.AffectPreferredSize;
                    this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        /// <summary>Gets or sets the height, in pixels, of the column headers row </summary>
        /// <returns>The height, in pixels, of the row that contains the column headers. The default is 23.</returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum height of 4 pixels or is greater than the maximum height of 32768 pixels.</exception>
        /// <filterpriority>1</filterpriority>
        [Localizable(true), Description("Grid_ColumnHeadersHeight"), Category("Appearance")]
        public int ColumnHeadersHeight
        {
            get
            {
                return this.columnHeadersHeight;
            }
            set
            {
                if (value < 4)
                {
                    object[] args = new object[] { "ColumnHeadersHeight", value.ToString(CultureInfo.CurrentCulture), 4.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnHeadersHeight", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (value > 0x8000)
                {
                    object[] objArray2 = new object[] { "ColumnHeadersHeight", value.ToString(CultureInfo.CurrentCulture), 0x8000.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("ColumnHeadersHeight", MControl.GridView.RM.GetString("InvalidHighBoundArgumentEx", objArray2));
                }
                if (this.ColumnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize)
                {
                    this.cachedColumnHeadersHeight = value;
                }
                else if (this.columnHeadersHeight != value)
                {
                    this.SetColumnHeadersHeightInternal(value, true);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether the height of the column headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers. </summary>
        /// <returns>A <see cref="T:MControl.GridView.GridColumnHeadersHeightSizeMode"></see> value indicating the mode by which the height of the column headers row can be adjusted. The default is <see cref="F:MControl.GridView.GridColumnHeadersHeightSizeMode.EnableResizing"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridColumnHeadersHeightSizeMode"></see> value.</exception>
        [Category("Behavior"), Description("Grid_ColumnHeadersHeightSizeMode"), DefaultValue(0), RefreshProperties(RefreshProperties.All)]
        public GridColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
        {
            get
            {
                return this.columnHeadersHeightSizeMode;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 2))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridColumnHeadersHeightSizeMode));
                }
                if (this.columnHeadersHeightSizeMode != value)
                {
                    GridAutoSizeModeEventArgs e = new GridAutoSizeModeEventArgs(this.columnHeadersHeightSizeMode == GridColumnHeadersHeightSizeMode.AutoSize);
                    this.columnHeadersHeightSizeMode = value;
                    this.OnColumnHeadersHeightSizeModeChanged(e);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether the column header row is displayed.</summary>
        /// <returns>true if the column headers are displayed; otherwise, false. The default is true.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is false and one or more columns have an <see cref="P:MControl.GridView.GridColumn.InheritedAutoSizeMode"></see> property value of <see cref="F:MControl.GridView.GridAutoSizeColumnMode.ColumnHeader"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(true), Category("Appearance"), Description("GridColumnHeadersVisible")]
        public bool ColumnHeadersVisible
        {
            get
            {
                return this.gridState1[8];
            }
            set
            {
                if (this.ColumnHeadersVisible != value)
                {
                    if (!value)
                    {
                        for (GridColumn column = this.Columns.GetFirstColumn(GridElementStates.Visible); column != null; column = this.Columns.GetNextColumn(column, GridElementStates.Visible, GridElementStates.None))
                        {
                            if (column.InheritedAutoSizeMode == GridAutoSizeColumnMode.ColumnHeader)
                            {
                                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_ColumnHeadersCannotBeInvisible"));
                            }
                        }
                    }
                    using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersVisible))
                    {
                        this.gridState1[8] = value;
                        this.layout.ColumnHeadersVisible = value;
                        this.displayedBandsInfo.EnsureDirtyState();
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        this.InvalidateInside();
                        this.OnColumnHeadersGlobalAutoSize();
                    }
                }
            }
        }

        /// <summary>Gets a collection that contains all the columns in the control.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridColumnCollection"></see> that contains all the columns in the <see cref="T:MControl.GridView.Grid"></see> control.</returns>
        /// <filterpriority>1</filterpriority>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Content), Editor("System.Windows.Forms.Design.GridColumnCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor)), MergableProperty(false)]
        public GridColumnCollection Columns
        {
            get
            {
                if (this.gridColumns == null)
                {
                    this.gridColumns = this.CreateColumnsInstance();
                }
                return this.gridColumns;
            }
        }

        /// <summary>Gets or sets the currently active cell.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCell"></see> that represents the current cell, or null if there is no current cell. The default is the first cell in the first column or null if there are no cells in the control.</returns>
        /// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not in the <see cref="T:MControl.GridView.Grid"></see>.</exception>
        /// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because changes to the current cell cannot be committed or canceled.-or-The specified cell when setting this property is in a hidden row or column. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GridCell CurrentCell
        {
            get
            {
                if ((this.ptCurrentCell.X == -1) && (this.ptCurrentCell.Y == -1))
                {
                    return null;
                }
                GridRow row = this.Rows[this.ptCurrentCell.Y];
                return row.Cells[this.ptCurrentCell.X];
            }
            set
            {
                if (((value != null) && ((value.RowIndex != this.ptCurrentCell.Y) || (value.ColumnIndex != this.ptCurrentCell.X))) || ((value == null) && (this.ptCurrentCell.X != -1)))
                {
                    if (value == null)
                    {
                        this.ClearSelection();
                        if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                    else
                    {
                        if (value.Grid != this)
                        {
                            throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CellDoesNotBelongToGrid"));
                        }
                        if (!this.Columns[value.ColumnIndex].Visible || ((this.Rows.GetRowState(value.RowIndex) & GridElementStates.Visible) == GridElementStates.None))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CurrentCellCannotBeInvisible"));
                        }
                        if (!this.ScrollIntoView(value.ColumnIndex, value.RowIndex, true))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                        }
                        if (!this.IsInnerCellOutOfBounds(value.ColumnIndex, value.RowIndex))
                        {
                            this.ClearSelection(value.ColumnIndex, value.RowIndex, true);
                            if (!this.SetCurrentCellAddressCore(value.ColumnIndex, value.RowIndex, true, false, false))
                            {
                                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                            }
                        }
                    }
                }
            }
        }

        /// <summary>Gets the row and column indexes of the currently active cell.</summary>
        /// <returns>A <see cref="T:System.Drawing.Point"></see> that represents the row and column indexes of the currently active cell.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public Point CurrentCellAddress
        {
            get
            {
                return this.ptCurrentCell;
            }
        }

        private GridCell CurrentCellInternal
        {
            get
            {
                return this.Rows.SharedRow(this.ptCurrentCell.Y).Cells[this.ptCurrentCell.X];
            }
        }

        private bool CurrentCellIsEditedAndOnlySelectedCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                return (((this.editingControl != null) && (this.GetCellCount(GridElementStates.Selected) == 1)) && this.CurrentCellInternal.Selected);
            }
        }

        private bool CurrentCellIsFirstVisibleCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                bool flag = null != this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                bool flag2 = -1 != this.Rows.GetPreviousRow(this.ptCurrentCell.Y, GridElementStates.Visible);
                return (!flag && !flag2);
            }
        }

        private bool CurrentCellIsLastVisibleCell
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return false;
                }
                bool flag = null != this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], GridElementStates.Visible, GridElementStates.None);
                bool flag2 = -1 != this.Rows.GetNextRow(this.ptCurrentCell.Y, GridElementStates.Visible);
                return (!flag && !flag2);
            }
        }

        /// <summary>Gets the row containing the current cell.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridRow"></see> that represents the row containing the current cell, or null if there is no current cell.</returns>
        [Browsable(false)]
        public GridRow CurrentRow
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return null;
                }
                return this.Rows[this.ptCurrentCell.Y];
            }
        }

        internal Cursor CursorInternal
        {
            set
            {
                this.gridState2[0x200000] = true;
                try
                {
                    this.Cursor = value;
                }
                finally
                {
                    this.gridState2[0x200000] = false;
                }
            }
        }

        internal GridDataConnection DataConnection
        {
            get
            {
                return this.dataConnection;
            }
        }

        /// <summary>Gets or sets the name of the list or table in the data source for which the <see cref="T:MControl.GridView.Grid"></see> is displaying data.</summary>
        /// <returns>The name of the table or list in the <see cref="P:MControl.GridView.Grid.DataSource"></see> for which the <see cref="T:MControl.GridView.Grid"></see> is displaying data. The default is <see cref="F:System.String.Empty"></see>.</returns>
        /// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor)), Description("GridDataMember"), DefaultValue(""), Category("Data")]
        public string DataMember
        {
            get
            {
                if (this.dataConnection == null)
                {
                    return string.Empty;
                }
                return this.dataConnection.DataMember;
            }
            set
            {
                if (value != this.DataMember)
                {
                    this.CurrentCell = null;
                    if (this.dataConnection == null)
                    {
                        this.dataConnection = new GridDataConnection(this);
                    }
                    this.dataConnection.SetDataConnection(this.DataSource, value);
                    this.OnDataMemberChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets the data source that the <see cref="T:MControl.GridView.Grid"></see> is displaying data for.</summary>
        /// <returns>The object that contains data for the <see cref="T:MControl.GridView.Grid"></see> to display.</returns>
        /// <exception cref="T:System.Exception">An error occurred in the data source and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("GridDataSource"), DefaultValue((string) null), AttributeProvider(typeof(IListSource)), RefreshProperties(RefreshProperties.Repaint), Category("Data")]
        public object DataSource
        {
            get
            {
                if (this.dataConnection == null)
                {
                    return null;
                }
                return this.dataConnection.DataSource;
            }
            set
            {
                if (value != this.DataSource)
                {
                    this.CurrentCell = null;
                    if (this.dataConnection == null)
                    {
                        this.dataConnection = new GridDataConnection(this);
                        this.dataConnection.SetDataConnection(value, this.DataMember);
                    }
                    else
                    {
                        if (this.dataConnection.ShouldChangeDataMember(value))
                        {
                            this.DataMember = "";
                        }
                        this.dataConnection.SetDataConnection(value, this.DataMember);
                        if (value == null)
                        {
                            this.dataConnection = null;
                        }
                    }
                    this.OnDataSourceChanged(EventArgs.Empty);
                }
            }
        }

        private static SolidBrush DefaultBackBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.Window;
            }
        }

        private static SolidBrush DefaultBackgroundBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.AppWorkspace;
            }
        }

        /// <summary>Gets or sets the default cell style to be applied to the cells in the <see cref="T:MControl.GridView.Grid"></see> if no other cell style properties are set.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCellStyle"></see> to be applied as the default style.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), AmbientValue((string) null), Description("Grid_DefaultCellStyle")]
        public GridCellStyle DefaultCellStyle
        {
            get
            {
                if (this.defaultCellStyle == null)
                {
                    this.defaultCellStyle = this.DefaultDefaultCellStyle;
                    return this.defaultCellStyle;
                }
                if (((!(this.defaultCellStyle.BackColor == System.Drawing.Color.Empty) && !(this.defaultCellStyle.ForeColor == System.Drawing.Color.Empty)) && (!(this.defaultCellStyle.SelectionBackColor == System.Drawing.Color.Empty) && !(this.defaultCellStyle.SelectionForeColor == System.Drawing.Color.Empty))) && (((this.defaultCellStyle.Font != null) && (this.defaultCellStyle.Alignment != GridContentAlignment.NotSet)) && (this.defaultCellStyle.WrapMode != GridTriState.NotSet)))
                {
                    return this.defaultCellStyle;
                }
                GridCellStyle style = new GridCellStyle(this.defaultCellStyle);
                style.Scope = GridCellStyleScopes.None;
                if (this.defaultCellStyle.BackColor == System.Drawing.Color.Empty)
                {
                    style.BackColor = DefaultBackBrush.Color;
                }
                if (this.defaultCellStyle.ForeColor == System.Drawing.Color.Empty)
                {
                    style.ForeColor = base.ForeColor;
                    this.gridState1[0x400] = true;
                }
                if (this.defaultCellStyle.SelectionBackColor == System.Drawing.Color.Empty)
                {
                    style.SelectionBackColor = DefaultSelectionBackBrush.Color;
                }
                if (this.defaultCellStyle.SelectionForeColor == System.Drawing.Color.Empty)
                {
                    style.SelectionForeColor = DefaultSelectionForeBrush.Color;
                }
                if (this.defaultCellStyle.Font == null)
                {
                    style.Font = base.Font;
                    this.gridState1[0x2000000] = true;
                }
                if (this.defaultCellStyle.Alignment == GridContentAlignment.NotSet)
                {
                    style.AlignmentInternal = GridContentAlignment.MiddleLeft;
                }
                if (this.defaultCellStyle.WrapMode == GridTriState.NotSet)
                {
                    style.WrapModeInternal = GridTriState.False;
                }
                style.AddScope(this, GridCellStyleScopes.Grid);
                return style;
            }
            set
            {
                GridCellStyle defaultCellStyle = this.DefaultCellStyle;
                defaultCellStyle.RemoveScope(GridCellStyleScopes.Grid);
                this.defaultCellStyle = value;
                if (value != null)
                {
                    this.defaultCellStyle.AddScope(this, GridCellStyleScopes.Grid);
                }
                GridCellStyleDifferences differencesFrom = defaultCellStyle.GetDifferencesFrom(this.DefaultCellStyle);
                if (differencesFrom != GridCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == GridCellStyleDifferences.AffectPreferredSize;
                    this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        private GridCellStyle DefaultColumnHeadersDefaultCellStyle
        {
            get
            {
                GridCellStyle style = new GridCellStyle();
                style.BackColor = DefaultHeadersBackBrush.Color;
                style.ForeColor = DefaultForeBrush.Color;
                style.SelectionBackColor = DefaultSelectionBackBrush.Color;
                style.SelectionForeColor = DefaultSelectionForeBrush.Color;
                style.Font = base.Font;
                style.AlignmentInternal = GridContentAlignment.MiddleLeft;
                style.WrapModeInternal = GridTriState.True;
                style.AddScope(this, GridCellStyleScopes.ColumnHeaders);
                this.gridState1[0x4000000] = true;
                return style;
            }
        }

        private GridCellStyle DefaultDefaultCellStyle
        {
            get
            {
                GridCellStyle style = new GridCellStyle();
                style.BackColor = DefaultBackBrush.Color;
                style.ForeColor = base.ForeColor;
                style.SelectionBackColor = DefaultSelectionBackBrush.Color;
                style.SelectionForeColor = DefaultSelectionForeBrush.Color;
                style.Font = base.Font;
                style.AlignmentInternal = GridContentAlignment.MiddleLeft;
                style.WrapModeInternal = GridTriState.False;
                style.AddScope(this, GridCellStyleScopes.Grid);
                this.gridState1[0x2000000] = true;
                this.gridState1[0x400] = true;
                return style;
            }
        }

        private static SolidBrush DefaultForeBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.WindowText;
            }
        }

        private static System.Drawing.Color DefaultGridColor
        {
            get
            {
                return SystemColors.ControlDark;
            }
        }

        private static SolidBrush DefaultHeadersBackBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.Control;
            }
        }

        private GridCellStyle DefaultRowHeadersDefaultCellStyle
        {
            get
            {
                GridCellStyle style = new GridCellStyle();
                style.BackColor = DefaultHeadersBackBrush.Color;
                style.ForeColor = DefaultForeBrush.Color;
                style.SelectionBackColor = DefaultSelectionBackBrush.Color;
                style.SelectionForeColor = DefaultSelectionForeBrush.Color;
                style.Font = base.Font;
                style.AlignmentInternal = GridContentAlignment.MiddleLeft;
                style.WrapModeInternal = GridTriState.True;
                style.AddScope(this, GridCellStyleScopes.RowHeaders);
                this.gridState1[0x8000000] = true;
                return style;
            }
        }

        private static SolidBrush DefaultSelectionBackBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.Highlight;
            }
        }

        private static SolidBrush DefaultSelectionForeBrush
        {
            get
            {
                return (SolidBrush) SystemBrushes.HighlightText;
            }
        }

        /// <summary>Gets the default initial size of the control.</summary>
        /// <returns>A <see cref="T:System.Drawing.Size"></see> representing the initial size of the control, which is 240 pixels wide by 150 pixels high.</returns>
        protected override Size DefaultSize
        {
            get
            {
                return new Size(240, 150);
            }
        }

        internal DisplayedBandsData DisplayedBandsInfo
        {
            get
            {
                return this.displayedBandsInfo;
            }
        }

        /// <summary>Gets the rectangle that represents the display area of the control.</summary>
        /// <returns>A <see cref="T:System.Drawing.Rectangle"></see> that represents the display area of the control.</returns>
        public override Rectangle DisplayRectangle
        {
            get
            {
                Rectangle clientRectangle = base.ClientRectangle;
                if ((this.horizScrollBar != null) && this.horizScrollBar.Visible)
                {
                    clientRectangle.Height -= this.horizScrollBar.Height;
                }
                if ((this.vertScrollBar != null) && this.vertScrollBar.Visible)
                {
                    clientRectangle.Width -= this.vertScrollBar.Width;
                    if (this.RightToLeftInternal)
                    {
                        clientRectangle.X = this.vertScrollBar.Width;
                    }
                }
                return clientRectangle;
            }
        }

        /// <summary>Gets the control hosted by the current cell, if a cell with an editing control is in edit mode.</summary>
        /// <returns>The <see cref="T:System.Windows.Forms.Control"></see> hosted by the current cell.</returns>
        /// <filterpriority>1</filterpriority>
        [EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public Control EditingControl
        {
            get
            {
                return this.editingControl;
            }
        }

        /// <summary>Gets the panel that contains the <see cref="P:MControl.GridView.Grid.EditingControl"></see>.</summary>
        /// <returns>The <see cref="T:System.Windows.Forms.Panel"></see> that contains the <see cref="P:MControl.GridView.Grid.EditingControl"></see>.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public Panel EditingPanel
        {
            get
            {
                if (this.editingPanel == null)
                {
                    this.editingPanel = new Panel();
                    this.editingPanel.AccessibleName = MControl.GridView.RM.GetString("Grid_AccEditingPanelAccName");
                }
                return this.editingPanel;
            }
        }

        /// <summary>Gets or sets a value indicating how to begin editing a cell.</summary>
        /// <returns>One of the <see cref="T:MControl.GridView.GridEditMode"></see> values. The default is <see cref="F:MControl.GridView.GridEditMode.EditOnKeystrokeOrF2"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridEditMode"></see> value.</exception>
        /// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("Grid_EditMode"), Category("Behavior"), DefaultValue(2)]
        public GridEditMode EditMode
        {
            get
            {
                return this.editMode;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridEditMode));
                }
                if (this.editMode != value)
                {
                    this.editMode = value;
                    this.OnEditModeChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether row and column headers use the visual styles of the user's current theme if visual styles are enabled for the application.</summary>
        /// <returns>true if visual styles are enabled for the headers; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(true), Description("Grid_EnableHeadersVisualStyles"), Category("Appearance")]
        public bool EnableHeadersVisualStyles
        {
            get
            {
                return this.gridState2[0x40];
            }
            set
            {
                if (this.gridState2[0x40] != value)
                {
                    this.gridState2[0x40] = value;
                    this.OnGlobalAutoSize();
                }
            }
        }

        /// <summary>Gets or sets the first cell currently displayed in the <see cref="T:MControl.GridView.Grid"></see>; typically, this cell is in the upper left corner.</summary>
        /// <returns>The first <see cref="T:MControl.GridView.GridCell"></see> currently displayed in the control.</returns>
        /// <exception cref="T:System.ArgumentException">The specified cell when setting this property is not is not in the <see cref="T:MControl.GridView.Grid"></see>. </exception>
        /// <exception cref="T:System.InvalidOperationException">The specified cell when setting this property has a <see cref="P:MControl.GridView.GridCell.RowIndex"></see> or <see cref="P:MControl.GridView.GridCell.ColumnIndex"></see> property value of -1, indicating that it is a header cell or a shared cell. -or-The specified cell when setting this property has a <see cref="P:MControl.GridView.GridCell.Visible"></see> property value of false.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public GridCell FirstDisplayedCell
        {
            get
            {
                Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
                if (firstDisplayedCellAddress.X >= 0)
                {
                    return this.Rows[firstDisplayedCellAddress.Y].Cells[firstDisplayedCellAddress.X];
                }
                return null;
            }
            set
            {
                if (value != null)
                {
                    GridCell cell = value;
                    if (cell.Grid != this)
                    {
                        throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CellDoesNotBelongToGrid"));
                    }
                    if ((cell.RowIndex == -1) || (cell.ColumnIndex == -1))
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedCellCannotBeAHeaderOrSharedCell"));
                    }
                    if (!cell.Visible)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedCellCannotBeInvisible"));
                    }
                    if (!cell.Frozen)
                    {
                        if (!this.Rows[cell.RowIndex].Frozen)
                        {
                            this.FirstDisplayedScrollingRowIndex = cell.RowIndex;
                        }
                        if (!this.Columns[cell.ColumnIndex].Frozen)
                        {
                            this.FirstDisplayedScrollingColumnIndex = cell.ColumnIndex;
                        }
                    }
                }
            }
        }

        private Point FirstDisplayedCellAddress
        {
            get
            {
                Point point = new Point(-1, -1);
                point.Y = this.Rows.GetFirstRow(GridElementStates.Visible | GridElementStates.Frozen);
                if ((point.Y == -1) && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
                {
                    point.Y = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                if (point.Y >= 0)
                {
                    point.X = this.FirstDisplayedColumnIndex;
                }
                return point;
            }
        }

        internal int FirstDisplayedColumnIndex
        {
            get
            {
                if (!base.IsHandleCreated)
                {
                    return -1;
                }
                int firstDisplayedScrollingCol = -1;
                GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                if (firstColumn != null)
                {
                    if (firstColumn.Frozen)
                    {
                        return firstColumn.Index;
                    }
                    if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
                    {
                        firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    }
                }
                return firstDisplayedScrollingCol;
            }
        }

        internal int FirstDisplayedRowIndex
        {
            get
            {
                if (!base.IsHandleCreated)
                {
                    return -1;
                }
                int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                if (((firstRow != -1) && ((this.Rows.GetRowState(firstRow) & GridElementStates.Frozen) == GridElementStates.None)) && (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0))
                {
                    firstRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
                }
                return firstRow;
            }
        }

        /// <summary>Gets the width of the portion of the column that is currently scrolled out of view..</summary>
        /// <returns>The width of the portion of the column that is scrolled out of view.</returns>
        /// <filterpriority>1</filterpriority>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public int FirstDisplayedScrollingColumnHiddenWidth
        {
            get
            {
                return this.negOffset;
            }
        }

        /// <summary>Gets or sets the index of the column that is the first column displayed on the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>The index of the column that is the first column displayed on the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of columns in the control minus 1.</exception>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a column with a <see cref="P:MControl.GridView.GridColumn.Visible"></see> property value of false.-or-The specified value when setting this property indicates a column with a <see cref="P:MControl.GridView.GridColumn.Frozen"></see> property value of true.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int FirstDisplayedScrollingColumnIndex
        {
            get
            {
                return this.displayedBandsInfo.FirstDisplayedScrollingCol;
            }
            set
            {
                if ((value < 0) || (value >= this.Columns.Count))
                {
                    throw new ArgumentOutOfRangeException("value");
                }
                if (!this.Columns[value].Visible)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedScrollingColumnCannotBeInvisible"));
                }
                if (this.Columns[value].Frozen)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedScrollingColumnCannotBeFrozen"));
                }
                if (!base.IsHandleCreated)
                {
                    this.CreateHandle();
                }
                int width = this.layout.Data.Width;
                if (width <= 0)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_NoRoomForDisplayedColumns"));
                }
                if (this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen) >= width)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FrozenColumnsPreventFirstDisplayedScrollingColumn"));
                }
                if (((value != this.displayedBandsInfo.FirstDisplayedScrollingCol) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, false, false))) && !this.IsColumnOutOfBounds(value))
                {
                    this.ScrollColumnIntoView(value, -1, true, false);
                    int num3 = this.Columns.GetColumnsWidth(GridElementStates.Visible) - width;
                    while ((this.displayedBandsInfo.FirstDisplayedScrollingCol != value) && (this.HorizontalOffset < num3))
                    {
                        this.ScrollColumns(1);
                    }
                }
            }
        }

        /// <summary>Gets or sets the index of the row that is the first row displayed on the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>The index of the row that is the first row displayed on the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0 or greater than the number of rows in the control minus 1.</exception>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property indicates a row with a <see cref="P:MControl.GridView.GridRow.Visible"></see> property value of false.-or-The specified value when setting this property indicates a column with a <see cref="P:MControl.GridView.GridRow.Frozen"></see> property value of true.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public int FirstDisplayedScrollingRowIndex
        {
            get
            {
                return this.displayedBandsInfo.FirstDisplayedScrollingRow;
            }
            set
            {
                if ((value < 0) || (value >= this.Rows.Count))
                {
                    throw new ArgumentOutOfRangeException("value");
                }
                if ((this.Rows.GetRowState(value) & GridElementStates.Visible) == GridElementStates.None)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedScrollingRowCannotBeInvisible"));
                }
                if ((this.Rows.GetRowState(value) & GridElementStates.Frozen) != GridElementStates.None)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FirstDisplayedScrollingRowCannotBeFrozen"));
                }
                if (!base.IsHandleCreated)
                {
                    this.CreateHandle();
                }
                int height = this.layout.Data.Height;
                if (height <= 0)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_NoRoomForDisplayedRows"));
                }
                if (this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen) >= height)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_FrozenRowsPreventFirstDisplayedScrollingRow"));
                }
                if (((value != this.displayedBandsInfo.FirstDisplayedScrollingRow) && ((this.ptCurrentCell.X < 0) || this.CommitEdit(GridDataErrorContexts.Scroll | GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, false, false))) && !this.IsRowOutOfBounds(value))
                {
                    if (value > this.displayedBandsInfo.FirstDisplayedScrollingRow)
                    {
                        int rows = this.Rows.GetRowCount(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, value);
                        this.ScrollRowsByCount(rows, (rows > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
                    }
                    else
                    {
                        this.ScrollRowIntoView(-1, value, true, false);
                    }
                }
            }
        }

        /// <summary>Gets or sets the font of the text displayed by the <see cref="T:MControl.GridView.Grid"></see>. </summary>
        /// <returns>The <see cref="T:System.Drawing.Font"></see> to apply to the text displayed by the control. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont"></see> property.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public override System.Drawing.Font Font
        {
            get
            {
                return base.Font;
            }
            set
            {
                base.Font = value;
            }
        }

        /// <summary>Gets or sets the foreground color of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:System.Drawing.Color"></see> that represents the foreground color of the <see cref="T:MControl.GridView.Grid"></see>. The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor"></see> property.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public override System.Drawing.Color ForeColor
        {
            get
            {
                return base.ForeColor;
            }
            set
            {
                base.ForeColor = value;
            }
        }

        /// <summary>Gets or sets the color of the grid lines separating the cells of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>A <see cref="T:System.Drawing.Color"></see> or <see cref="T:System.Drawing.SystemColors"></see> that represents the color of the grid lines. The default is <see cref="F:System.Drawing.KnownColor.ControlDarkDark"></see>.</returns>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:System.Drawing.Color.Empty"></see>. -or-The specified value when setting this property has a <see cref="P:System.Drawing.Color.A"></see> property value that is less that 255.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), Description("GridGridColor")]
        public System.Drawing.Color GridColor
        {
            get
            {
                return this.gridPen.Color;
            }
            set
            {
                if (value.IsEmpty)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_EmptyColor", new object[] { "GridColor" }));
                }
                if (value.A < 0xff)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_TransparentColor", new object[] { "GridColor" }));
                }
                if (!value.Equals(this.gridPen.Color))
                {
                    this.gridPen = new Pen(value);
                    this.OnGridColorChanged(EventArgs.Empty);
                }
            }
        }

        internal Pen GridPen
        {
            get
            {
                return this.gridPen;
            }
        }

        internal int HorizontalOffset
        {
            get
            {
                return this.horizontalOffset;
            }
            set
            {
                if (value < 0)
                {
                    value = 0;
                }
                int num = this.Columns.GetColumnsWidth(GridElementStates.Visible) - this.layout.Data.Width;
                if ((value > num) && (num > 0))
                {
                    value = num;
                }
                if (value != this.horizontalOffset)
                {
                    ScrollEventType type;
                    int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
                    int change = this.horizontalOffset - value;
                    if (this.horizScrollBar.Enabled)
                    {
                        this.horizScrollBar.Value = value;
                    }
                    this.horizontalOffset = value;
                    int columnsWidth = this.Columns.GetColumnsWidth(GridElementStates.Visible | GridElementStates.Frozen);
                    Rectangle data = this.layout.Data;
                    if (this.layout.ColumnHeadersVisible)
                    {
                        data = Rectangle.Union(data, this.layout.ColumnHeaders);
                    }
                    else if (this.SingleVerticalBorderAdded)
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X--;
                        }
                        data.Width++;
                    }
                    if (this.SingleVerticalBorderAdded && (columnsWidth > 0))
                    {
                        if (!this.RightToLeftInternal)
                        {
                            data.X++;
                        }
                        data.Width--;
                    }
                    if (!this.RightToLeftInternal)
                    {
                        data.X += columnsWidth;
                    }
                    data.Width -= columnsWidth;
                    this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
                    this.ComputeVisibleColumns();
                    if (((this.editingControl != null) && !this.Columns[this.ptCurrentCell.X].Frozen) && (this.displayedBandsInfo.FirstDisplayedScrollingCol > -1))
                    {
                        this.PositionEditingControl(true, false, false);
                    }
                    this.UpdateMouseEnteredCell(null, null);
                    if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
                    {
                        type = (change > 0) ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement;
                    }
                    else if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol))
                    {
                        type = (this.Columns.GetColumnCount(GridElementStates.Visible, firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement;
                    }
                    else
                    {
                        type = (this.Columns.GetColumnCount(GridElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement;
                    }
                    MControl.Util.NativeMethods.RECT[] rects = this.CreateScrollableRegion(data);
                    if (this.RightToLeftInternal)
                    {
                        change = -change;
                    }
                    this.ScrollRectangles(rects, change);
                    if (!this.gridState2[0x8000])
                    {
                        this.OnScroll(type, this.horizontalOffset + change, this.horizontalOffset, ScrollOrientation.HorizontalScroll);
                    }
                    this.FlushDisplayedChanged();
                }
            }
        }

        /// <summary>Gets the horizontal scroll bar of the control.</summary>
        /// <returns>A <see cref="T:System.Windows.Forms.ScrollBar"></see> representing the horizontal scroll bar.</returns>
        protected System.Windows.Forms.ScrollBar HorizontalScrollBar
        {
            get
            {
                return this.horizScrollBar;
            }
        }

        /// <summary>Gets or sets the number of pixels by which the control is scrolled horizontally. </summary>
        /// <returns>The number of pixels by which the control is scrolled horizontally.</returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than 0.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int HorizontalScrollingOffset
        {
            get
            {
                return this.horizontalOffset;
            }
            set
            {
                if (value < 0)
                {
                    object[] args = new object[] { "HorizontalScrollingOffset", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("HorizontalScrollingOffset", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (((value <= 0) || ((this.Columns.GetColumnsWidth(GridElementStates.Visible) - this.layout.Data.Width) > 0)) && (value != this.horizontalOffset))
                {
                    this.HorizontalOffset = value;
                }
            }
        }

        private Timer HorizScrollTimer
        {
            get
            {
                if (this.horizScrollTimer == null)
                {
                    this.horizScrollTimer = new Timer();
                    this.horizScrollTimer.Tick += new EventHandler(this.HorizScrollTimer_Tick);
                }
                return this.horizScrollTimer;
            }
        }

        private bool InAdjustFillingColumns
        {
            get
            {
                if (!this.gridOper[0x80000])
                {
                    return this.gridOper[0x40000];
                }
                return true;
            }
        }

        internal bool InBeginEdit
        {
            get
            {
                return this.gridOper[0x200000];
            }
        }

        internal bool InDisplayIndexAdjustments
        {
            get
            {
                return this.gridOper[0x800];
            }
            set
            {
                this.gridOper[0x800] = value;
            }
        }

        internal bool InEndEdit
        {
            get
            {
                return this.gridOper[0x400000];
            }
        }

        private GridCellStyle InheritedEditingCellStyle
        {
            get
            {
                if (this.ptCurrentCell.X == -1)
                {
                    return null;
                }
                return this.CurrentCellInternal.GetInheritedStyleInternal(this.ptCurrentCell.Y);
            }
        }

        internal bool InInitialization
        {
            get
            {
                return this.gridState2[0x80000];
            }
        }

        internal bool InSortOperation
        {
            get
            {
                return this.gridOper[0x40];
            }
        }

        /// <summary>Gets a value indicating whether the current cell has uncommitted changes.</summary>
        /// <returns>true if the current cell has uncommitted changes; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public bool IsCurrentCellDirty
        {
            get
            {
                return this.gridState1[0x20000];
            }
        }

        private bool IsCurrentCellDirtyInternal
        {
            set
            {
                if (value != this.gridState1[0x20000])
                {
                    this.gridState1[0x20000] = value;
                    this.OnCurrentCellDirtyStateChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets a value indicating whether the currently active cell is being edited.</summary>
        /// <returns>true if the current cell is being edited; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public bool IsCurrentCellInEditMode
        {
            get
            {
                if (this.editingControl == null)
                {
                    return this.gridState1[0x8000];
                }
                return true;
            }
        }

        /// <summary>Gets a value indicating whether the current row has uncommitted changes.</summary>
        /// <returns>true if the current row has uncommitted changes; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public bool IsCurrentRowDirty
        {
            get
            {
                if (!this.VirtualMode)
                {
                    if (!this.gridState1[0x40000])
                    {
                        return this.IsCurrentCellDirty;
                    }
                    return true;
                }
                QuestionEventArgs e = new QuestionEventArgs(this.gridState1[0x40000] || this.IsCurrentCellDirty);
                this.OnRowDirtyStateNeeded(e);
                return e.Response;
            }
        }

        internal bool IsCurrentRowDirtyInternal
        {
            set
            {
                if (value != this.gridState1[0x40000])
                {
                    this.gridState1[0x40000] = value;
                    if ((this.RowHeadersVisible && this.ShowEditingIcon) && (this.ptCurrentCell.Y >= 0))
                    {
                        this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                    }
                }
            }
        }

        private bool IsEscapeKeyEffective
        {
            get
            {
                return (((((this.gridOper[1] || this.gridOper[2]) || (this.gridOper[0x80] || this.gridOper[0x100])) || (this.gridOper[0x20] || this.IsCurrentCellDirty)) || ((this.VirtualMode || (this.DataSource != null)) && this.IsCurrentRowDirty)) || (((this.EditMode != GridEditMode.EditOnEnter) && (this.editingControl != null)) || this.gridState1[0x80000]));
            }
        }

        private bool IsMinimized
        {
            get
            {
                Form topLevelControlInternal = base.TopLevelControlInternal as Form;
                return ((topLevelControlInternal != null) && (topLevelControlInternal.WindowState == FormWindowState.Minimized));
            }
        }

        internal bool IsRestricted
        {
            get
            {
                if (!this.gridState1[0x10000000])
                {
                    this.gridState1[0x20000000] = false;
                    try
                    {
                        System.Windows.Forms.IntSecurity.AllWindows.Demand();
                    }
                    catch (SecurityException)
                    {
                        this.gridState1[0x20000000] = true;
                    }
                    catch
                    {
                        this.gridState1[0x20000000] = true;
                        this.gridState1[0x10000000] = true;
                        throw;
                    }
                    this.gridState1[0x10000000] = true;
                }
                return this.gridState1[0x20000000];
            }
        }

        /// <summary>Gets or sets the cell located at the intersection of the row and column with the specified indexes. </summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCell"></see> at the specified location.</returns>
        /// <param name="columnIndex">The index of the column containing the cell.</param>
        /// <param name="rowIndex">The index of the row containing the cell.</param>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GridCell this[int columnIndex, int rowIndex]
        {
            get
            {
                GridRow row = this.Rows[rowIndex];
                return row.Cells[columnIndex];
            }
            set
            {
                GridRow row = this.Rows[rowIndex];
                row.Cells[columnIndex] = value;
            }
        }

        /// <summary>Gets or sets the cell located at the intersection of the row with the specified index and the column with the specified name. </summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCell"></see> at the specified location.</returns>
        /// <param name="columnName">The name of the column containing the cell.</param>
        /// <param name="rowIndex">The index of the row containing the cell.</param>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public GridCell this[string columnName, int rowIndex]
        {
            get
            {
                GridRow row = this.Rows[rowIndex];
                return row.Cells[columnName];
            }
            set
            {
                GridRow row = this.Rows[rowIndex];
                row.Cells[columnName] = value;
            }
        }

        internal LayoutData LayoutInfo
        {
            get
            {
                if (this.layout.dirty && base.IsHandleCreated)
                {
                    this.PerformLayoutPrivate(false, true, false, false);
                }
                return this.layout;
            }
        }

        internal Point MouseDownCellAddress
        {
            get
            {
                return this.ptMouseDownCell;
            }
        }

        internal Point MouseEnteredCellAddress
        {
            get
            {
                return this.ptMouseEnteredCell;
            }
        }

        private bool MouseOverEditingControl
        {
            get
            {
                if (this.editingControl != null)
                {
                    Point pt = base.PointToClient(Control.MousePosition);
                    return this.editingControl.Bounds.Contains(pt);
                }
                return false;
            }
        }

        private bool MouseOverEditingPanel
        {
            get
            {
                if (this.editingPanel != null)
                {
                    Point pt = base.PointToClient(Control.MousePosition);
                    return this.editingPanel.Bounds.Contains(pt);
                }
                return false;
            }
        }

        private bool MouseOverScrollBar
        {
            get
            {
                Point pt = base.PointToClient(Control.MousePosition);
                return ((((this.vertScrollBar != null) && this.vertScrollBar.Visible) && this.vertScrollBar.Bounds.Contains(pt)) || (((this.horizScrollBar != null) && this.horizScrollBar.Visible) && this.horizScrollBar.Bounds.Contains(pt)));
            }
        }

        /// <summary>Gets or sets a value indicating whether the user is allowed to select more than one cell, row, or column of the <see cref="T:MControl.GridView.Grid"></see> at a time.</summary>
        /// <returns>true if the user can select more than one cell, row, or column at a time; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("Grid_MultiSelect"), Category("Behavior"), DefaultValue(true)]
        public bool MultiSelect
        {
            get
            {
                return this.gridState1[0x80];
            }
            set
            {
                if (this.MultiSelect != value)
                {
                    this.ClearSelection();
                    this.gridState1[0x80] = value;
                    this.OnMultiSelectChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets the index of the row for new records.</summary>
        /// <returns>The index of the row for new records, or -1 if <see cref="P:MControl.GridView.Grid.AllowUserToAddRows"></see> is false.</returns>
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int NewRowIndex
        {
            get
            {
                return this.newRowIndex;
            }
        }

        internal bool NoDimensionChangeAllowed
        {
            get
            {
                return (this.noDimensionChangeCount > 0);
            }
        }

        private int NoSelectionChangeCount
        {
            get
            {
                return this.noSelectionChangeCount;
            }
            set
            {
                this.noSelectionChangeCount = value;
                if (value == 0)
                {
                    this.FlushSelectionChanged();
                }
            }
        }

        /// <summary>This property is not relevant for this control.</summary>
        /// <returns>A <see cref="T:System.Windows.Forms.Padding"></see> instance.</returns>
        [EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public System.Windows.Forms.Padding Padding
        {
            get
            {
                return base.Padding;
            }
            set
            {
                base.Padding = value;
            }
        }

        internal GridCellStyle PlaceholderCellStyle
        {
            get
            {
                if (this.placeholderCellStyle == null)
                {
                    this.placeholderCellStyle = new GridCellStyle();
                }
                return this.placeholderCellStyle;
            }
        }

        /// <summary>Gets a value indicating whether the user can edit the cells of the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <returns>true if the user cannot edit the cells of the <see cref="T:MControl.GridView.Grid"></see> control; otherwise, false. The default is false.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is true, the current cell is in edit mode, and the current cell contains changes that cannot be committed. </exception>
        /// <exception cref="T:System.Exception">The specified value when setting this property would cause the control to enter edit mode, but initialization of the editing cell value failed and either there is no handler for the <see cref="E:MControl.GridView.Grid.DataError"></see> event or the handler has set the <see cref="P:MControl.GridView.GridDataErrorEventArgs.ThrowException"></see> property to true. The exception object can typically be cast to type <see cref="T:System.FormatException"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Behavior"), Description("Grid_ReadOnly"), DefaultValue(false), Browsable(true)]
        public bool ReadOnly
        {
            get
            {
                return this.gridState1[0x100000];
            }
            set
            {
                if (value != this.gridState1[0x100000])
                {
                    if ((value && (this.ptCurrentCell.X != -1)) && (this.IsCurrentCellInEditMode && !this.EndEdit(GridDataErrorContexts.Commit | GridDataErrorContexts.Parsing, GridValidateCellInternal.Always, false, false, false, false, false, true, false, false)))
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CommitFailedCannotCompleteOperation"));
                    }
                    this.gridState1[0x100000] = value;
                    if (value)
                    {
                        try
                        {
                            this.gridOper[0x4000] = true;
                            for (int i = 0; i < this.Columns.Count; i++)
                            {
                                this.SetReadOnlyColumnCore(i, false);
                            }
                            int count = this.Rows.Count;
                            for (int j = 0; j < count; j++)
                            {
                                this.SetReadOnlyRowCore(j, false);
                            }
                        }
                        finally
                        {
                            this.gridOper[0x4000] = false;
                        }
                    }
                    this.OnReadOnlyChanged(EventArgs.Empty);
                }
            }
        }

        internal bool ResizingOperationAboutToStart
        {
            get
            {
                return this.gridOper[0x800000];
            }
        }

        internal bool RightToLeftInternal
        {
            get
            {
                if (!this.gridState2[0x1000])
                {
                    this.gridState2[0x800] = this.RightToLeft == RightToLeft.Yes;
                    this.gridState2[0x1000] = true;
                }
                return this.gridState2[0x800];
            }
        }

        /// <summary>Gets or sets the number of rows displayed in the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>The number of rows to display in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is less than 0.-or-The specified value is less than 1 and <see cref="P:MControl.GridView.Grid.AllowUserToAddRows"></see> is set to true. </exception>
        /// <exception cref="T:System.InvalidOperationException">When setting this property, the <see cref="P:MControl.GridView.Grid.DataSource"></see> property is set. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(0), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), EditorBrowsable(EditorBrowsableState.Advanced), Browsable(false)]
        public int RowCount
        {
            get
            {
                return this.Rows.Count;
            }
            set
            {
                if (this.AllowUserToAddRowsInternal)
                {
                    if (value < 1)
                    {
                        object[] args = new object[] { "RowCount", value.ToString(CultureInfo.CurrentCulture), 1.ToString(CultureInfo.CurrentCulture) };
                        throw new ArgumentOutOfRangeException("RowCount", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", args));
                    }
                }
                else if (value < 0)
                {
                    object[] objArray2 = new object[] { "RowCount", value.ToString(CultureInfo.CurrentCulture), 0.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowCount", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", objArray2));
                }
                if (this.DataSource != null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CannotSetRowCountOnDataBoundGrid"));
                }
                if (value != this.Rows.Count)
                {
                    if (value == 0)
                    {
                        this.Rows.Clear();
                    }
                    else if (value < this.Rows.Count)
                    {
                        while (value < this.Rows.Count)
                        {
                            int count = this.Rows.Count;
                            this.Rows.RemoveAt(count - (this.AllowUserToAddRowsInternal ? 2 : 1));
                            if (this.Rows.Count >= count)
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        if (this.Columns.Count == 0)
                        {
                            GridTextBoxColumn gridColumn = new GridTextBoxColumn();
                            this.Columns.Add(gridColumn);
                        }
                        int num2 = value - this.Rows.Count;
                        if (num2 > 0)
                        {
                            this.Rows.Add(num2);
                        }
                    }
                }
            }
        }

        /// <summary>Gets or sets the border style of the row header cells.</summary>
        /// <returns>One of the <see cref="T:MControl.GridView.GridHeaderBorderStyle"></see> values.</returns>
        /// <exception cref="T:System.ArgumentException">The specified value when setting this property is <see cref="F:MControl.GridView.GridHeaderBorderStyle.Custom"></see>.</exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridHeaderBorderStyle"></see> value.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), DefaultValue(2), Browsable(true), Description("Grid_RowHeadersBorderStyle")]
        public GridHeaderBorderStyle RowHeadersBorderStyle
        {
            get
            {
                switch (this.advancedRowHeadersBorderStyle.All)
                {
                    case GridAdvancedCellBorderStyle.NotSet:
                        return GridHeaderBorderStyle.Custom;

                    case GridAdvancedCellBorderStyle.None:
                        return GridHeaderBorderStyle.None;

                    case GridAdvancedCellBorderStyle.Single:
                        return GridHeaderBorderStyle.Single;

                    case GridAdvancedCellBorderStyle.InsetDouble:
                        return GridHeaderBorderStyle.Sunken;

                    case GridAdvancedCellBorderStyle.OutsetPartial:
                        return GridHeaderBorderStyle.Raised;
                }
                return GridHeaderBorderStyle.Custom;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridHeaderBorderStyle));
                }
                if (value == this.RowHeadersBorderStyle)
                {
                    return;
                }
                if (value == GridHeaderBorderStyle.Custom)
                {
                    throw new ArgumentException(MControl.GridView.RM.GetString("Grid_CustomCellBorderStyleInvalid", new object[] { "RowHeadersBorderStyle" }));
                }
                this.gridOper[0x10000] = true;
                try
                {
                    switch (value)
                    {
                        case GridHeaderBorderStyle.Single:
                            this.advancedRowHeadersBorderStyle.All = GridAdvancedCellBorderStyle.Single;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.Raised:
                            this.advancedRowHeadersBorderStyle.All = GridAdvancedCellBorderStyle.OutsetPartial;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.Sunken:
                            this.advancedRowHeadersBorderStyle.All = GridAdvancedCellBorderStyle.InsetDouble;
                            goto Label_00CC;

                        case GridHeaderBorderStyle.None:
                            this.advancedRowHeadersBorderStyle.All = GridAdvancedCellBorderStyle.None;
                            goto Label_00CC;
                    }
                }
                finally
                {
                    this.gridOper[0x10000] = false;
                }
            Label_00CC:
                this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
            }
        }

        /// <summary>Gets or sets the default style applied to the row header cells.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCellStyle"></see> that represents the default style applied to the row header cells.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), Description("Grid_RowHeadersDefaultCellStyle"), AmbientValue((string) null)]
        public GridCellStyle RowHeadersDefaultCellStyle
        {
            get
            {
                if (this.rowHeadersDefaultCellStyle == null)
                {
                    this.rowHeadersDefaultCellStyle = this.DefaultRowHeadersDefaultCellStyle;
                }
                return this.rowHeadersDefaultCellStyle;
            }
            set
            {
                GridCellStyle rowHeadersDefaultCellStyle = this.RowHeadersDefaultCellStyle;
                rowHeadersDefaultCellStyle.RemoveScope(GridCellStyleScopes.RowHeaders);
                this.rowHeadersDefaultCellStyle = value;
                if (value != null)
                {
                    this.rowHeadersDefaultCellStyle.AddScope(this, GridCellStyleScopes.RowHeaders);
                }
                GridCellStyleDifferences differencesFrom = rowHeadersDefaultCellStyle.GetDifferencesFrom(this.RowHeadersDefaultCellStyle);
                if (differencesFrom != GridCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == GridCellStyleDifferences.AffectPreferredSize;
                    this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether the column that contains row headers is displayed.</summary>
        /// <returns>true if the column that contains row headers is displayed; otherwise, false. The default is true.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is false and the <see cref="P:MControl.GridView.Grid.AutoSizeRowsMode"></see> property is set to <see cref="F:MControl.GridView.GridAutoSizeRowsMode.AllHeaders"></see> or <see cref="F:MControl.GridView.GridAutoSizeRowsMode.DisplayedHeaders"></see>.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), Description("GridRowHeadersVisible"), DefaultValue(true)]
        public bool RowHeadersVisible
        {
            get
            {
                return this.gridState1[0x10];
            }
            set
            {
                if (this.RowHeadersVisible != value)
                {
                    if (!value && ((this.autoSizeRowsMode == GridAutoSizeRowsMode.AllHeaders) || (this.autoSizeRowsMode == GridAutoSizeRowsMode.DisplayedHeaders)))
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_RowHeadersCannotBeInvisible"));
                    }
                    using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersVisible))
                    {
                        this.gridState1[0x10] = value;
                        this.layout.RowHeadersVisible = value;
                        this.displayedBandsInfo.EnsureDirtyState();
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        this.InvalidateInside();
                        this.OnRowHeadersGlobalAutoSize(value);
                    }
                }
            }
        }

        /// <summary>Gets or sets the width, in pixels, of the column that contains the row headers.</summary>
        /// <returns>The width, in pixels, of the column that contains row headers. The default is 43.</returns>
        /// <exception cref="T:System.ArgumentOutOfRangeException">The specified value when setting this property is less than the minimum width of 4 pixels or is greater than the maximum width of 32768 pixels.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Localizable(true), Description("Grid_RowHeadersWidth"), Category("Layout")]
        public int RowHeadersWidth
        {
            get
            {
                return this.rowHeadersWidth;
            }
            set
            {
                if (value < 4)
                {
                    object[] args = new object[] { "RowHeadersWidth", value.ToString(CultureInfo.CurrentCulture), 4.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowHeadersWidth", MControl.GridView.RM.GetString("InvalidLowBoundArgumentEx", args));
                }
                if (value > 0x8000)
                {
                    object[] objArray2 = new object[] { "RowHeadersWidth", value.ToString(CultureInfo.CurrentCulture), 0x8000.ToString(CultureInfo.CurrentCulture) };
                    throw new ArgumentOutOfRangeException("RowHeadersWidth", MControl.GridView.RM.GetString("InvalidHighBoundArgumentEx", objArray2));
                }
                if ((this.RowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.RowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing))
                {
                    this.cachedRowHeadersWidth = value;
                }
                else if (this.rowHeadersWidth != value)
                {
                    this.RowHeadersWidthInternal = value;
                }
            }
        }

        private int RowHeadersWidthInternal
        {
            set
            {
                using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersWidth))
                {
                    this.rowHeadersWidth = value;
                    if (this.AutoSize)
                    {
                        this.InvalidateInside();
                    }
                    else if (this.layout.RowHeadersVisible)
                    {
                        this.PerformLayoutPrivate(false, false, true, true);
                        this.InvalidateInside();
                    }
                    this.OnRowHeadersWidthChanged(EventArgs.Empty);
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether the width of the row headers is adjustable and whether it can be adjusted by the user or is automatically adjusted to fit the contents of the headers. </summary>
        /// <returns>A <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value indicating the mode by which the width of the row headers can be adjusted. The default is <see cref="F:MControl.GridView.GridRowHeadersWidthSizeMode.EnableResizing"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridRowHeadersWidthSizeMode"></see> value.</exception>
        [DefaultValue(0), Description("Grid_RowHeadersWidthSizeMode"), RefreshProperties(RefreshProperties.All), Category("Behavior")]
        public GridRowHeadersWidthSizeMode RowHeadersWidthSizeMode
        {
            get
            {
                return this.rowHeadersWidthSizeMode;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridRowHeadersWidthSizeMode));
                }
                if (this.rowHeadersWidthSizeMode != value)
                {
                    GridAutoSizeModeEventArgs e = new GridAutoSizeModeEventArgs((this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.EnableResizing) && (this.rowHeadersWidthSizeMode != GridRowHeadersWidthSizeMode.DisableResizing));
                    this.rowHeadersWidthSizeMode = value;
                    this.OnRowHeadersWidthSizeModeChanged(e);
                }
            }
        }

        internal GridRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs
        {
            get
            {
                if (this.dgvrhine == null)
                {
                    this.dgvrhine = new GridRowHeightInfoNeededEventArgs();
                }
                return this.dgvrhine;
            }
        }

        internal GridRowPostPaintEventArgs RowPostPaintEventArgs
        {
            get
            {
                if (this.dgvrpope == null)
                {
                    this.dgvrpope = new GridRowPostPaintEventArgs(this);
                }
                return this.dgvrpope;
            }
        }

        internal GridRowPrePaintEventArgs RowPrePaintEventArgs
        {
            get
            {
                if (this.dgvrprpe == null)
                {
                    this.dgvrprpe = new GridRowPrePaintEventArgs(this);
                }
                return this.dgvrprpe;
            }
        }

        /// <summary>Gets a collection that contains all the rows in the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridRowCollection"></see> that contains all the rows in the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false)]
        public GridRowCollection Rows
        {
            get
            {
                if (this.gridRows == null)
                {
                    this.gridRows = this.CreateRowsInstance();
                }
                return this.gridRows;
            }
        }

        /// <summary>Gets or sets the default style applied to the row cells of the <see cref="T:MControl.GridView.Grid"></see>.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridCellStyle"></see> to apply to the row cells of the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("Grid_RowsDefaultCellStyle"), Category("Appearance")]
        public GridCellStyle RowsDefaultCellStyle
        {
            get
            {
                if (this.rowsDefaultCellStyle == null)
                {
                    this.rowsDefaultCellStyle = new GridCellStyle();
                    this.rowsDefaultCellStyle.AddScope(this, GridCellStyleScopes.Rows);
                }
                return this.rowsDefaultCellStyle;
            }
            set
            {
                GridCellStyle rowsDefaultCellStyle = this.RowsDefaultCellStyle;
                rowsDefaultCellStyle.RemoveScope(GridCellStyleScopes.Rows);
                this.rowsDefaultCellStyle = value;
                if (value != null)
                {
                    this.rowsDefaultCellStyle.AddScope(this, GridCellStyleScopes.Rows);
                }
                GridCellStyleDifferences differencesFrom = rowsDefaultCellStyle.GetDifferencesFrom(this.RowsDefaultCellStyle);
                if (differencesFrom != GridCellStyleDifferences.None)
                {
                    this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == GridCellStyleDifferences.AffectPreferredSize;
                    this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
                }
            }
        }

        /// <summary>Gets or sets the row that represents the template for all the rows in the control.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridRow"></see> representing the row template.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified row when setting this property has its <see cref="P:MControl.GridView.GridElement.Grid"></see> property set.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), Browsable(true), Description("Grid_RowTemplate"), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
        public GridRow RowTemplate
        {
            get
            {
                if (this.rowTemplate == null)
                {
                    this.rowTemplate = new GridRow();
                }
                return this.rowTemplate;
            }
            set
            {
                GridRow row = value;
                if ((row != null) && (row.Grid != null))
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_RowAlreadyBelongsToGrid"));
                }
                this.rowTemplate = row;
            }
        }

        internal GridRow RowTemplateClone
        {
            get
            {
                GridRow gridRow = (GridRow) this.RowTemplate.Clone();
                this.CompleteCellsCollection(gridRow);
                return gridRow;
            }
        }

        /// <summary>Gets or sets the type of scroll bars to display for the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <returns>One of the <see cref="T:System.Windows.Forms.ScrollBars"></see> values. The default is <see cref="F:System.Windows.Forms.ScrollBars.Both"></see>.</returns>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:System.Windows.Forms.ScrollBars"></see> value. </exception>
        /// <exception cref="T:System.InvalidOperationException">The value of this property cannot be set because the <see cref="T:MControl.GridView.Grid"></see> is unable to scroll due to a cell change that cannot be committed or canceled. </exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(3), Localizable(true), Category("Layout"), Description("Grid_ScrollBars")]
        public System.Windows.Forms.ScrollBars ScrollBars
        {
            get
            {
                return this.scrollBars;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 3))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(System.Windows.Forms.ScrollBars));
                }
                if (this.scrollBars != value)
                {
                    using (IDisposable disposable = LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ScrollBars))
                    {
                        GridColumn firstColumn = this.Columns.GetFirstColumn(GridElementStates.Visible);
                        int firstRow = this.Rows.GetFirstRow(GridElementStates.Visible);
                        if (((firstColumn != null) && (firstRow != -1)) && !this.ScrollIntoView(firstColumn.Index, firstRow, false))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                        }
                        this.scrollBars = value;
                        if (!this.AutoSize)
                        {
                            this.PerformLayoutPrivate(false, false, true, true);
                        }
                        base.Invalidate();
                    }
                }
            }
        }

        /// <summary>Gets the collection of cells selected by the user.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridSelectedCellCollection"></see> that represents the cells selected by the user.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false)]
        public GridSelectedCellCollection SelectedCells
        {
            get
            {
                GridSelectedCellCollection cells = new GridSelectedCellCollection();
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                        cells.AddCellLinkedList(this.individualSelectedCells);
                        return cells;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        foreach (int num2 in (IEnumerable) this.selectedBandIndexes)
                        {
                            GridRow row2 = this.Rows[num2];
                            foreach (GridCell cell in row2.Cells)
                            {
                                cells.Add(cell);
                            }
                        }
                        if (this.SelectionMode == GridSelectionMode.RowHeaderSelect)
                        {
                            cells.AddCellLinkedList(this.individualSelectedCells);
                        }
                        return cells;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            foreach (GridRow row in (IEnumerable) this.Rows)
                            {
                                cells.Add(row.Cells[num]);
                            }
                        }
                        if (this.SelectionMode == GridSelectionMode.ColumnHeaderSelect)
                        {
                            cells.AddCellLinkedList(this.individualSelectedCells);
                        }
                        return cells;
                }
                return cells;
            }
        }

        /// <summary>Gets the collection of columns selected by the user.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridSelectedColumnCollection"></see> that represents the columns selected by the user.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public GridSelectedColumnCollection SelectedColumns
        {
            get
            {
                GridSelectedColumnCollection columns = new GridSelectedColumnCollection();
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        return columns;

                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            columns.Add(this.Columns[num]);
                        }
                        return columns;
                }
                return columns;
            }
        }

        /// <summary>Gets the collection of rows selected by the user.</summary>
        /// <returns>A <see cref="T:MControl.GridView.GridSelectedRowCollection"></see> that contains the rows selected by the user.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(false)]
        public GridSelectedRowCollection SelectedRows
        {
            get
            {
                GridSelectedRowCollection rows = new GridSelectedRowCollection();
                switch (this.SelectionMode)
                {
                    case GridSelectionMode.CellSelect:
                    case GridSelectionMode.FullColumnSelect:
                    case GridSelectionMode.ColumnHeaderSelect:
                        return rows;

                    case GridSelectionMode.FullRowSelect:
                    case GridSelectionMode.RowHeaderSelect:
                        foreach (int num in (IEnumerable) this.selectedBandIndexes)
                        {
                            rows.Add(this.Rows[num]);
                        }
                        return rows;
                }
                return rows;
            }
        }

        /// <summary>Gets or sets a value indicating how the cells of the <see cref="T:MControl.GridView.Grid"></see> can be selected.</summary>
        /// <returns>One of the <see cref="T:MControl.GridView.GridSelectionMode"></see> values. The default is <see cref="F:MControl.GridView.GridSelectionMode.RowHeaderSelect"></see>.</returns>
        /// <exception cref="T:System.InvalidOperationException">The specified value when setting this property is <see cref="F:MControl.GridView.GridSelectionMode.FullColumnSelect"></see> or <see cref="F:MControl.GridView.GridSelectionMode.ColumnHeaderSelect"></see> and the <see cref="P:MControl.GridView.GridColumn.SortMode"></see> property of one or more columns is set to <see cref="F:MControl.GridView.GridColumnSortMode.Automatic"></see>.</exception>
        /// <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The specified value when setting this property is not a valid <see cref="T:MControl.GridView.GridSelectionMode"></see> value.</exception>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Browsable(true), DefaultValue(3), Description("Grid_SelectionMode"), Category("Behavior")]
        public GridSelectionMode SelectionMode
        {
            get
            {
                return this.selectionMode;
            }
            set
            {
                if (!System.Windows.Forms.ClientUtils.IsEnumValid(value, (int) value, 0, 4))
                {
                    throw new InvalidEnumArgumentException("value", (int) value, typeof(GridSelectionMode));
                }
                if (this.SelectionMode != value)
                {
                    if (!this.gridState2[0x80000] && ((value == GridSelectionMode.FullColumnSelect) || (value == GridSelectionMode.ColumnHeaderSelect)))
                    {
                        foreach (GridColumn column in this.Columns)
                        {
                            if (column.SortMode == GridColumnSortMode.Automatic)
                            {
                                throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_SelectionModeAndSortModeClash", new object[] { value.ToString() }));
                            }
                        }
                    }
                    this.ClearSelection();
                    this.selectionMode = value;
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether to show cell errors.</summary>
        /// <returns>true if a red glyph will appear in a cell that fails validation; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Description("Grid_ShowCellErrors"), DefaultValue(true), Category("Appearance")]
        public bool ShowCellErrors
        {
            get
            {
                return this.gridState2[0x80];
            }
            set
            {
                if (this.ShowCellErrors != value)
                {
                    this.gridState2[0x80] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowRowErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowRowErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowRowErrors || this.ShowCellToolTips))
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        this.OnGlobalAutoSize();
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(Rectangle.Union(this.layout.Data, this.layout.ColumnHeaders));
                        base.Invalidate(this.layout.TopLeftHeader);
                    }
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether or not ToolTips will show when the mouse pointer pauses on a cell.</summary>
        /// <returns>true if cell ToolTips are enabled; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [Category("Appearance"), DefaultValue(true), Description("Grid_ShowCellToolTips")]
        public bool ShowCellToolTips
        {
            get
            {
                return this.gridState2[0x100];
            }
            set
            {
                if (this.ShowCellToolTips != value)
                {
                    this.gridState2[0x100] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowRowErrors) && !this.ShowCellErrors)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowRowErrors) && !this.ShowCellErrors)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowRowErrors || this.ShowCellErrors))
                        {
                            bool activate = !string.IsNullOrEmpty(this.toolTipCaption);
                            Point mousePosition = Control.MousePosition;
                            activate &= base.ClientRectangle.Contains(base.PointToClient(mousePosition));
                            this.toolTipControl.Activate(activate);
                        }
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(this.layout.Data);
                    }
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether or not the editing glyph is visible in the row header of the cell being edited.</summary>
        /// <returns>true if the editing glyph is visible; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        [DefaultValue(true), Description("Grid_ShowEditingIcon"), Category("Appearance")]
        public bool ShowEditingIcon
        {
            get
            {
                return this.gridState2[1];
            }
            set
            {
                if (this.ShowEditingIcon != value)
                {
                    this.gridState2[1] = value;
                    if (this.RowHeadersVisible)
                    {
                        if (this.VirtualMode || (this.DataSource != null))
                        {
                            if (this.IsCurrentRowDirty)
                            {
                                this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                            }
                        }
                        else if (this.IsCurrentCellDirty)
                        {
                            this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
                        }
                    }
                }
            }
        }

        /// <summary>Gets or sets a value indicating whether row headers will display error glyphs for each row that contains a data entry error. </summary>
        /// <returns>true if the <see cref="T:MControl.GridView.GridRow"></see> indicates there is an error; otherwise, false. The default is true.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(true), Category("Appearance"), Description("Grid_ShowRowErrors")]
        public bool ShowRowErrors
        {
            get
            {
                return this.gridState2[0x200];
            }
            set
            {
                if (this.ShowRowErrors != value)
                {
                    this.gridState2[0x200] = value;
                    if (base.IsHandleCreated && !base.DesignMode)
                    {
                        if ((value && !this.ShowCellErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                        if ((!value && !this.ShowCellErrors) && !this.ShowCellToolTips)
                        {
                            this.toolTipCaption = string.Empty;
                            this.toolTipControl.Activate(false);
                        }
                        if (!value && (this.ShowCellErrors || this.ShowCellToolTips))
                        {
                            this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
                        }
                    }
                    if (!this.layout.dirty && !base.DesignMode)
                    {
                        base.Invalidate(this.layout.RowHeaders);
                    }
                }
            }
        }

        internal bool SingleHorizontalBorderAdded
        {
            get
            {
                if (this.layout.ColumnHeadersVisible)
                {
                    return false;
                }
                if (this.AdvancedCellBorderStyle.All != GridAdvancedCellBorderStyle.Single)
                {
                    return (this.CellBorderStyle == GridCellBorderStyle.SingleHorizontal);
                }
                return true;
            }
        }

        internal bool SingleVerticalBorderAdded
        {
            get
            {
                if (this.layout.RowHeadersVisible)
                {
                    return false;
                }
                if (this.AdvancedCellBorderStyle.All != GridAdvancedCellBorderStyle.Single)
                {
                    return (this.CellBorderStyle == GridCellBorderStyle.SingleVertical);
                }
                return true;
            }
        }

        /// <summary>Gets the column by which the <see cref="T:MControl.GridView.Grid"></see> contents are currently sorted.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridColumn"></see> by which the <see cref="T:MControl.GridView.Grid"></see> contents are currently sorted.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public GridColumn SortedColumn
        {
            get
            {
                return this.sortedColumn;
            }
        }

        /// <summary>Gets a value indicating whether the items in the <see cref="T:MControl.GridView.Grid"></see> control are sorted in ascending or descending order, or are not sorted.</summary>
        /// <returns>One of the <see cref="T:System.Windows.Forms.SortOrder"></see> values.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false)]
        public System.Windows.Forms.SortOrder SortOrder
        {
            get
            {
                return this.sortOrder;
            }
        }

        /// <summary>Gets or sets a value indicating whether the TAB key moves the focus to the next control in the tab order rather than moving focus to the next cell in the control.</summary>
        /// <returns>true if the TAB key moves the focus to the next control in the tab order; otherwise, false.</returns>
        /// <filterpriority>1</filterpriority>
        [Category("Behavior"), DefaultValue(false), EditorBrowsable(EditorBrowsableState.Advanced), Description("Grid_StandardTab")]
        public bool StandardTab
        {
            get
            {
                return this.gridState1[0x2000];
            }
            set
            {
                if (this.gridState1[0x2000] != value)
                {
                    this.gridState1[0x2000] = value;
                }
            }
        }

        /// <summary>Gets or sets the text associated with the control.</summary>
        /// <returns>The text associated with the control.</returns>
        /// <filterpriority>1</filterpriority>
        [Browsable(false), Bindable(false), EditorBrowsable(EditorBrowsableState.Never)]
        public override string Text
        {
            get
            {
                return base.Text;
            }
            set
            {
                base.Text = value;
            }
        }

        private string ToolTipPrivate
        {
            get
            {
                return this.toolTipCaption;
            }
        }

        /// <summary>Gets or sets the header cell located in the upper left corner of the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
        /// <returns>The <see cref="T:MControl.GridView.GridHeaderCell"></see> located at the upper left corner of the <see cref="T:MControl.GridView.Grid"></see>.</returns>
        /// <filterpriority>1</filterpriority>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public GridHeaderCell TopLeftHeaderCell
        {
            get
            {
                if (this.topLeftHeaderCell == null)
                {
                    this.TopLeftHeaderCell = new GridTopLeftHeaderCell();
                }
                return this.topLeftHeaderCell;
            }
            set
            {
                if (this.topLeftHeaderCell != value)
                {
                    if (this.topLeftHeaderCell != null)
                    {
                        this.topLeftHeaderCell.GridInternal = null;
                    }
                    this.topLeftHeaderCell = value;
                    if (value != null)
                    {
                        this.topLeftHeaderCell.GridInternal = this;
                    }
                    if (this.ColumnHeadersVisible && this.RowHeadersVisible)
                    {
                        this.OnColumnHeadersGlobalAutoSize();
                        base.Invalidate(new Rectangle(this.layout.Inside.X, this.layout.Inside.Y, this.RowHeadersWidth, this.ColumnHeadersHeight));
                    }
                }
            }
        }

        /// <summary>Gets the default or user-specified value of the <see cref="P:System.Windows.Forms.Control.Cursor"></see> property. </summary>
        /// <returns>A <see cref="T:System.Windows.Forms.Cursor"></see> representing the normal value of the <see cref="P:System.Windows.Forms.Control.Cursor"></see> property.</returns>
        [Browsable(false), EditorBrowsable(EditorBrowsableState.Advanced)]
        public Cursor UserSetCursor
        {
            get
            {
                if (this.gridState1[0x1000000])
                {
                    return this.oldCursor;
                }
                return this.Cursor;
            }
        }

        internal int VerticalOffset
        {
            get
            {
                return this.verticalOffset;
            }
            set
            {
                if (value < 0)
                {
                    value = 0;
                }
                int rowsHeight = this.Rows.GetRowsHeight(GridElementStates.Visible | GridElementStates.Frozen);
                int num2 = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
                if (value > (this.vertScrollBar.Maximum - num2))
                {
                    value = this.vertScrollBar.Maximum - num2;
                }
                if (value != this.verticalOffset)
                {
                    int height = value - this.verticalOffset;
                    if (this.vertScrollBar.Enabled)
                    {
                        this.vertScrollBar.Value = value;
                    }
                    this.ScrollRowsByHeight(height);
                }
            }
        }

        /// <summary>Gets the vertical scroll bar of the control.</summary>
        /// <returns>A <see cref="T:System.Windows.Forms.ScrollBar"></see> representing the vertical scroll bar.</returns>
        protected System.Windows.Forms.ScrollBar VerticalScrollBar
        {
            get
            {
                return this.vertScrollBar;
            }
        }

        /// <summary>Gets the number of pixels by which the control is scrolled vertically.</summary>
        /// <returns>The number of pixels by which the control is scrolled vertically.</returns>
        /// <filterpriority>1</filterpriority>
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden), Browsable(false)]
        public int VerticalScrollingOffset
        {
            get
            {
                return this.verticalOffset;
            }
        }

        private Timer VertScrollTimer
        {
            get
            {
                if (this.vertScrollTimer == null)
                {
                    this.vertScrollTimer = new Timer();
                    this.vertScrollTimer.Tick += new EventHandler(this.VertScrollTimer_Tick);
                }
                return this.vertScrollTimer;
            }
        }

        /// <summary>Gets or sets a value indicating whether you have provided your own data-management operations for the <see cref="T:MControl.GridView.Grid"></see> control. </summary>
        /// <returns>true if the <see cref="T:MControl.GridView.Grid"></see> uses data-management operations that you provide; otherwise, false. The default is false.</returns>
        /// <filterpriority>1</filterpriority>
        /// <PermissionSet><IPermission class="System.Security.Permissions.EnvironmentPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence" /><IPermission class="System.Diagnostics.PerformanceCounterPermission, System, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        [DefaultValue(false), Description("GridVirtualMode"), EditorBrowsable(EditorBrowsableState.Advanced), Category("Behavior")]
        public bool VirtualMode
        {
            get
            {
                return this.gridState1[0x10000];
            }
            set
            {
                if (this.gridState1[0x10000] != value)
                {
                    this.gridState1[0x10000] = value;
                    this.InvalidateRowHeights();
                }
            }
        }

        private bool VisibleCellExists
        {
            get
            {
                if (this.Columns.GetFirstColumn(GridElementStates.Visible) == null)
                {
                    return false;
                }
                return (-1 != this.Rows.GetFirstRow(GridElementStates.Visible));
            }
        }

        /// <summary>Provides information about the <see cref="T:MControl.GridView.Grid"></see> control to accessibility client applications.</summary>
        [ComVisible(true)]
        protected class GridAccessibleObject : Control.ControlAccessibleObject
        {
            private Grid owner;
            private Grid.GridSelectedCellsAccessibleObject selectedCellsAccessibilityObject;
            private Grid.GridTopRowAccessibleObject topRowAccessibilityObject;

            /// <summary>Initializes a new instance of the <see cref="T:MControl.GridView.Grid.GridAccessibleObject"></see> class. </summary>
            /// <param name="owner">The <see cref="T:MControl.GridView.Grid"></see> that owns the <see cref="T:MControl.GridView.Grid.GridAccessibleObject"></see>.</param>
            public GridAccessibleObject(Grid owner) : base(owner)
            {
                this.owner = owner;
            }

            /// <summary>Returns the child accessible object corresponding to the specified index.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the child accessible object corresponding to the specified index.</returns>
            /// <param name="index">The zero-based index of the child accessible object.</param>
            public override AccessibleObject GetChild(int index)
            {
                if (this.owner.Columns.Count != 0)
                {
                    if ((index < 1) && this.owner.ColumnHeadersVisible)
                    {
                        return this.TopRowAccessibilityObject;
                    }
                    if (this.owner.ColumnHeadersVisible)
                    {
                        index--;
                    }
                    if (index < this.owner.Rows.GetRowCount(GridElementStates.Visible))
                    {
                        int num = this.owner.Rows.DisplayIndexToRowIndex(index);
                        return this.owner.Rows[num].AccessibilityObject;
                    }
                    index -= this.owner.Rows.GetRowCount(GridElementStates.Visible);
                    if (this.owner.horizScrollBar.Visible)
                    {
                        if (index == 0)
                        {
                            return this.owner.horizScrollBar.AccessibilityObject;
                        }
                        index--;
                    }
                    if (this.owner.vertScrollBar.Visible && (index == 0))
                    {
                        return this.owner.vertScrollBar.AccessibilityObject;
                    }
                }
                return null;
            }

            /// <summary>Returns the number of child objects belonging to an accessible object.</summary>
            /// <returns>The number of child objects belonging to the accessible object.</returns>
            public override int GetChildCount()
            {
                if (this.owner.Columns.Count == 0)
                {
                    return 0;
                }
                int rowCount = this.owner.Rows.GetRowCount(GridElementStates.Visible);
                if (this.owner.ColumnHeadersVisible)
                {
                    rowCount++;
                }
                if (this.owner.horizScrollBar.Visible)
                {
                    rowCount++;
                }
                if (this.owner.vertScrollBar.Visible)
                {
                    rowCount++;
                }
                return rowCount;
            }

            /// <summary>Returns the accessible object of the <see cref="T:MControl.GridView.GridCell"></see> that has the keyboard focus.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that specifies the <see cref="T:MControl.GridView.GridCell"></see> that has the current focus, or null if the <see cref="T:MControl.GridView.Grid"></see> does not have focus.</returns>
            public override AccessibleObject GetFocused()
            {
                if (this.owner.Focused && (this.owner.CurrentCell != null))
                {
                    return this.owner.CurrentCell.AccessibilityObject;
                }
                return null;
            }

            /// <summary>Returns an <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the selected cells in the <see cref="T:MControl.GridView.Grid"></see> control.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the currently selected cells, or null if no cells are selected or if the object itself does not have focus.</returns>
            public override AccessibleObject GetSelected()
            {
                return this.SelectedCellsAccessibilityObject;
            }

            /// <summary>Retrieves the child object at the specified screen coordinates.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents an object at the given screen coordinates, or null if no object is at the specified location.</returns>
            /// <param name="y">The vertical screen coordinate.</param>
            /// <param name="x">The horizontal screen coordinate.</param>
            public override AccessibleObject HitTest(int x, int y)
            {
                Point point = this.owner.PointToClient(new Point(x, y));
                Grid.HitTestInfo info = this.owner.HitTest(point.X, point.Y);
                switch (info.Type)
                {
                    case GridHitTestType.Cell:
                        return this.owner.Rows[info.RowIndex].Cells[info.ColumnIndex].AccessibilityObject;

                    case GridHitTestType.ColumnHeader:
                    {
                        int index = this.owner.Columns.ColumnIndexToActualDisplayIndex(info.ColumnIndex, GridElementStates.Visible);
                        if (this.owner.RowHeadersVisible)
                        {
                            return this.TopRowAccessibilityObject.GetChild(index + 1);
                        }
                        return this.TopRowAccessibilityObject.GetChild(index);
                    }
                    case GridHitTestType.RowHeader:
                        return this.owner.Rows[info.RowIndex].AccessibilityObject;

                    case GridHitTestType.TopLeftHeader:
                        return this.owner.TopLeftHeaderCell.AccessibilityObject;

                    case GridHitTestType.HorizontalScrollBar:
                        return this.owner.HorizontalScrollBar.AccessibilityObject;

                    case GridHitTestType.VerticalScrollBar:
                        return this.owner.VerticalScrollBar.AccessibilityObject;
                }
                return null;
            }

            /// <summary>Navigates to another accessible object.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the object positioned at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation"></see> value.</returns>
            /// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation"></see> values.</param>
            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                switch (navigationDirection)
                {
                    case AccessibleNavigation.FirstChild:
                        return this.GetChild(0);

                    case AccessibleNavigation.LastChild:
                        return this.GetChild(this.GetChildCount() - 1);
                }
                return null;
            }

            public override string Name
            {
                get
                {
                    string accessibleName = base.Owner.AccessibleName;
                    if (!string.IsNullOrEmpty(accessibleName))
                    {
                        return accessibleName;
                    }
                    return "Grid";
                }
            }

            /// <summary>Gets the role of the <see cref="T:MControl.GridView.Grid.GridAccessibleObject"></see>.</summary>
            /// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Table"></see> value.</returns>
            public override AccessibleRole Role
            {
                get
                {
                    AccessibleRole accessibleRole = this.owner.AccessibleRole;
                    if (accessibleRole != AccessibleRole.Default)
                    {
                        return accessibleRole;
                    }
                    return AccessibleRole.Table;
                }
            }

            private AccessibleObject SelectedCellsAccessibilityObject
            {
                get
                {
                    if (this.selectedCellsAccessibilityObject == null)
                    {
                        this.selectedCellsAccessibilityObject = new Grid.GridSelectedCellsAccessibleObject(this.owner);
                    }
                    return this.selectedCellsAccessibilityObject;
                }
            }

            private AccessibleObject TopRowAccessibilityObject
            {
                get
                {
                    if (this.topRowAccessibilityObject == null)
                    {
                        this.topRowAccessibilityObject = new Grid.GridTopRowAccessibleObject(this.owner);
                    }
                    return this.topRowAccessibilityObject;
                }
            }
        }

        /// <summary>Represents a collection of controls contained on a <see cref="T:MControl.GridView.Grid"></see>.</summary>
        [ComVisible(false)]
        public class GridControlCollection : Control.ControlCollection
        {
            private Grid owner;

            /// <summary>Initializes a new instance of the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see> class. </summary>
            /// <param name="owner">The <see cref="T:MControl.GridView.Grid"></see> that owns the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</param>
            public GridControlCollection(Grid owner) : base(owner)
            {
                this.owner = owner;
            }

            /// <summary>Removes all controls from the <see cref="T:MControl.GridView.Grid"></see>.</summary>
            public override void Clear()
            {
                for (int i = 0; i < this.Count; i++)
                {
                    if (((this[i] != this.owner.horizScrollBar) && (this[i] != this.owner.vertScrollBar)) && (this[i] != this.owner.editingPanel))
                    {
                        this.Remove(this[i]);
                    }
                }
            }

            /// <summary>Copies the contents of the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see> into a <see cref="T:System.Windows.Forms.Control"></see> array, starting at the specified index of the target array.</summary>
            /// <param name="array">The one-dimensional <see cref="T:System.Windows.Forms.Control"></see> array that is the destination of the elements copied from the current collection. The array must have zero-based indexing.</param>
            /// <param name="index">The zero-based index in array at which copying begins.</param>
            /// <exception cref="T:System.InvalidCastException">The type of the source element cannot be cast automatically to the type of array.</exception>
            /// <exception cref="T:System.ArgumentException">One of the following conditions has occurred:array is multidimensional.index is equal to or greater than the length of array.The number of elements in the source collection is greater than the available space from index to the end of array.</exception>
            /// <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero.</exception>
            /// <exception cref="T:System.ArgumentNullException">array is null.</exception>
            public void CopyTo(Control[] array, int index)
            {
                base.CopyTo(array, index);
            }

            /// <summary>Inserts the specified <see cref="T:System.Windows.Forms.Control"></see> into the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see> at the specified index.</summary>
            /// <param name="value">The <see cref="T:System.Windows.Forms.Control"></see> to insert into the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</param>
            /// <param name="index">The zero-based index at which to insert value.</param>
            /// <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to the current number of controls in the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</exception>
            public void Insert(int index, Control value)
            {
                ((IList) this).Insert(index, value);
            }

            /// <summary>Removes the specified control from the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</summary>
            /// <param name="value">The <see cref="T:System.Windows.Forms.Control"></see> to remove from the <see cref="T:MControl.GridView.Grid.GridControlCollection"></see>.</param>
            public override void Remove(Control value)
            {
                if (((value != this.owner.horizScrollBar) && (value != this.owner.vertScrollBar)) && (value != this.owner.editingPanel))
                {
                    base.Remove(value);
                }
            }

            internal void RemoveInternal(Control value)
            {
                base.Remove(value);
            }
        }

        internal class GridDataConnection
        {
            private System.Windows.Forms.CurrencyManager currencyManager;
            private BitVector32 dataConnectionState;
            private const int DATACONNECTIONSTATE_cachedAllowUserToAddRowsInternal = 0x10000;
            private const int DATACONNECTIONSTATE_cancellingRowEdit = 0x40;
            private const int DATACONNECTIONSTATE_dataConnection_inSetDataConnection = 1;
            private const int DATACONNECTIONSTATE_dataSourceInitializedHookedUp = 0x40000;
            private const int DATACONNECTIONSTATE_didNotDeleteRowFromGrid = 0x2000;
            private const int DATACONNECTIONSTATE_doNotChangePositionInTheCurrencyManager = 0x10;
            private const int DATACONNECTIONSTATE_doNotChangePositionInTheGridControl = 8;
            private const int DATACONNECTIONSTATE_finishedAddNew = 4;
            private const int DATACONNECTIONSTATE_inAddNew = 0x200;
            private const int DATACONNECTIONSTATE_inDeleteOperation = 0x1000;
            private const int DATACONNECTIONSTATE_inEndCurrentEdit = 0x8000;
            private const int DATACONNECTIONSTATE_interestedInRowEvents = 0x20;
            private const int DATACONNECTIONSTATE_itemAddedInDeleteOperation = 0x4000;
            private const int DATACONNECTIONSTATE_listWasReset = 0x400;
            private const int DATACONNECTIONSTATE_positionChangingInCurrencyManager = 0x800;
            private const int DATACONNECTIONSTATE_processingListChangedEvent = 0x20000;
            private const int DATACONNECTIONSTATE_processingMetaDataChanges = 2;
            private const int DATACONNECTIONSTATE_restoreRow = 0x80;
            private const int DATACONNECTIONSTATE_rowValidatingInAddNew = 0x100;
            private string dataMember = string.Empty;
            private object dataSource;
            private int lastListCount = -1;
            private Grid owner;
            private PropertyDescriptorCollection props;

            public GridDataConnection(Grid owner)
            {
                this.owner = owner;
                this.dataConnectionState = new BitVector32(4);
            }

            public void AddNew()
            {
                if ((this.currencyManager != null) && this.currencyManager.ShouldBind)
                {
                    this.dataConnectionState[4] = false;
                    this.dataConnectionState[0x8000] = true;
                    try
                    {
                        this.currencyManager.EndCurrentEdit();
                    }
                    finally
                    {
                        this.dataConnectionState[0x8000] = false;
                    }
                    this.dataConnectionState[0x200] = true;
                    try
                    {
                        this.currencyManager.AddNew();
                    }
                    finally
                    {
                        this.dataConnectionState[0x200] = false;
                    }
                }
            }

            public void ApplySortingInformationFromBackEnd()
            {
                if (this.currencyManager != null)
                {
                    SortOrder order;
                    PropertyDescriptor sortProperty = null;
                    this.GetSortingInformationFromBackend(out sortProperty, out order);
                    if (sortProperty == null)
                    {
                        for (int i = 0; i < this.owner.Columns.Count; i++)
                        {
                            if (this.owner.Columns[i].IsDataBound)
                            {
                                this.owner.Columns[i].HeaderCell.SortGlyphDirection = SortOrder.None;
                            }
                        }
                        this.owner.sortedColumn = null;
                        this.owner.sortOrder = SortOrder.None;
                    }
                    else
                    {
                        bool flag = false;
                        for (int j = 0; j < this.owner.Columns.Count; j++)
                        {
                            GridColumn column = this.owner.Columns[j];
                            if (column.IsDataBound && (column.SortMode != GridColumnSortMode.NotSortable))
                            {
                                if (string.Equals(column.DataPropertyName, sortProperty.Name, StringComparison.OrdinalIgnoreCase))
                                {
                                    if (!flag && !this.owner.InSortOperation)
                                    {
                                        this.owner.sortedColumn = column;
                                        this.owner.sortOrder = order;
                                        flag = true;
                                    }
                                    column.HeaderCell.SortGlyphDirection = order;
                                }
                                else
                                {
                                    column.HeaderCell.SortGlyphDirection = SortOrder.None;
                                }
                            }
                        }
                    }
                }
            }

            public TypeConverter BoundColumnConverter(int boundColumnIndex)
            {
                return this.props[boundColumnIndex].Converter;
            }

            public int BoundColumnIndex(string dataPropertyName)
            {
                if (this.props == null)
                {
                    return -1;
                }
                for (int i = 0; i < this.props.Count; i++)
                {
                    if (string.Compare(this.props[i].Name, dataPropertyName, true, CultureInfo.InvariantCulture) == 0)
                    {
                        return i;
                    }
                }
                return -1;
            }

            public SortOrder BoundColumnSortOrder(int boundColumnIndex)
            {
                IBindingList list = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
                if (((list != null) && list.SupportsSorting) && list.IsSorted)
                {
                    PropertyDescriptor descriptor;
                    SortOrder order;
                    this.GetSortingInformationFromBackend(out descriptor, out order);
                    if ((order != SortOrder.None) && (string.Compare(this.props[boundColumnIndex].Name, descriptor.Name, true, CultureInfo.InvariantCulture) == 0))
                    {
                        return order;
                    }
                }
                return SortOrder.None;
            }

            public System.Type BoundColumnValueType(int boundColumnIndex)
            {
                return this.props[boundColumnIndex].PropertyType;
            }

            public void CancelRowEdit(bool restoreRow, bool addNewFinished)
            {
                this.dataConnectionState[0x40] = true;
                this.dataConnectionState[0x80] = restoreRow;
                try
                {
                    object current = null;
                    if ((this.currencyManager.Position >= 0) && (this.currencyManager.Position < this.currencyManager.List.Count))
                    {
                        current = this.currencyManager.Current;
                    }
                    this.currencyManager.CancelCurrentEdit();
                    IEditableObject obj3 = null;
                    if ((this.currencyManager.Position >= 0) && (this.currencyManager.Position < this.currencyManager.List.Count))
                    {
                        obj3 = this.currencyManager.Current as IEditableObject;
                    }
                    if ((obj3 != null) && (current == obj3))
                    {
                        obj3.BeginEdit();
                    }
                }
                finally
                {
                    this.dataConnectionState[0x40] = false;
                }
                if (addNewFinished)
                {
                    this.dataConnectionState[4] = true;
                }
            }

            private void currencyManager_ListChanged(object sender, ListChangedEventArgs e)
            {
                this.dataConnectionState[0x20000] = true;
                try
                {
                    this.ProcessListChanged(e);
                }
                finally
                {
                    this.dataConnectionState[0x20000] = false;
                }
                this.owner.OnDataBindingComplete(e.ListChangedType);
                this.lastListCount = this.currencyManager.Count;
            }

            private void currencyManager_PositionChanged(object sender, EventArgs e)
            {
                if ((((this.owner.Columns.Count != 0) && (this.owner.Rows.Count != (this.owner.AllowUserToAddRowsInternal ? 1 : 0))) && !this.dataConnectionState[8]) && (((!this.owner.AllowUserToAddRowsInternal || !this.dataConnectionState[4]) || (this.dataConnectionState[0x200] || (this.currencyManager.Position <= -1))) || (((this.currencyManager.Position != this.owner.NewRowIndex) || (this.owner.CurrentCellAddress.Y == this.owner.NewRowIndex)) || (this.currencyManager.Count != (this.DataBoundRowsCount() + 1)))))
                {
                    this.dataConnectionState[0x800] = true;
                    try
                    {
                        if (!this.owner.InSortOperation)
                        {
                            bool scrollIntoView = true;
                            if (this.dataConnectionState[0x100])
                            {
                                IBindingList list = this.currencyManager.List as IBindingList;
                                if (((list != null) && list.SupportsSorting) && list.IsSorted)
                                {
                                    scrollIntoView = false;
                                }
                            }
                            bool clearSelection = this.dataConnectionState[0x40] && !this.dataConnectionState[4];
                            clearSelection |= (this.lastListCount == -1) || (this.lastListCount == this.currencyManager.Count);
                            this.MatchCurrencyManagerPosition(scrollIntoView, clearSelection);
                        }
                    }
                    finally
                    {
                        this.dataConnectionState[0x800] = false;
                    }
                }
            }

            private int DataBoundRowsCount()
            {
                int count = this.owner.Rows.Count;
                if ((this.owner.AllowUserToAddRowsInternal && (this.owner.Rows.Count > 0)) && ((this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex) || this.owner.IsCurrentRowDirty))
                {
                    count--;
                }
                return count;
            }

            public bool DataFieldIsReadOnly(int boundColumnIndex)
            {
                if (this.props == null)
                {
                    return false;
                }
                return this.props[boundColumnIndex].IsReadOnly;
            }

            private void DataSource_Initialized(object sender, EventArgs e)
            {
                ISupportInitializeNotification dataSource = this.dataSource as ISupportInitializeNotification;
                if (dataSource != null)
                {
                    dataSource.Initialized -= new EventHandler(this.DataSource_Initialized);
                }
                this.dataConnectionState[0x40000] = false;
                this.SetDataConnection(this.dataSource, this.dataMember);
                this.owner.RefreshColumnsAndRows();
                this.owner.OnDataBindingComplete(ListChangedType.Reset);
            }

            private void DataSourceMetaDataChanged()
            {
                this.props = this.currencyManager.GetItemProperties();
                this.owner.RefreshColumnsAndRows();
            }

            public void DeleteRow(int rowIndex)
            {
                this.dataConnectionState[8] = true;
                try
                {
                    if (!this.dataConnectionState[4])
                    {
                        bool flag = false;
                        if (this.owner.newRowIndex == this.currencyManager.List.Count)
                        {
                            flag = rowIndex == (this.owner.newRowIndex - 1);
                        }
                        else
                        {
                            flag = rowIndex == this.owner.newRowIndex;
                        }
                        if (flag)
                        {
                            this.CancelRowEdit(false, true);
                            return;
                        }
                        this.dataConnectionState[0x1000] = true;
                        this.dataConnectionState[0x2000] = true;
                        try
                        {
                            this.currencyManager.RemoveAt(rowIndex);
                            return;
                        }
                        finally
                        {
                            this.dataConnectionState[0x1000] = false;
                            this.dataConnectionState[0x2000] = false;
                        }
                    }
                    this.dataConnectionState[0x1000] = true;
                    this.dataConnectionState[0x2000] = true;
                    try
                    {
                        this.currencyManager.RemoveAt(rowIndex);
                    }
                    finally
                    {
                        this.dataConnectionState[0x1000] = false;
                        this.dataConnectionState[0x2000] = false;
                    }
                }
                finally
                {
                    this.dataConnectionState[8] = false;
                }
            }

            public void Dispose()
            {
                this.UnWireEvents();
                this.currencyManager = null;
            }

            public GridColumn[] GetCollectionOfBoundGridColumns()
            {
                if (this.props == null)
                {
                    return null;
                }
                ArrayList list = new ArrayList();
                for (int i = 0; i < this.props.Count; i++)
                {
                    if (!typeof(IList).IsAssignableFrom(this.props[i].PropertyType) || TypeDescriptor.GetConverter(typeof(Image)).CanConvertFrom(this.props[i].PropertyType))
                    {
                        GridColumn gridColumnFromType = GetGridColumnFromType(this.props[i].PropertyType);
                        gridColumnFromType.IsDataBoundInternal = true;
                        gridColumnFromType.BoundColumnIndex = i;
                        gridColumnFromType.DataPropertyName = this.props[i].Name;
                        gridColumnFromType.Name = this.props[i].Name;
                        gridColumnFromType.BoundColumnConverter = this.props[i].Converter;
                        gridColumnFromType.HeaderText = !string.IsNullOrEmpty(this.props[i].DisplayName) ? this.props[i].DisplayName : this.props[i].Name;
                        gridColumnFromType.ValueType = this.props[i].PropertyType;
                        gridColumnFromType.IsBrowsableInternal = this.props[i].IsBrowsable;
                        gridColumnFromType.ReadOnly = this.props[i].IsReadOnly;
                        list.Add(gridColumnFromType);
                    }
                }
                GridColumn[] array = new GridColumn[list.Count];
                list.CopyTo(array);
                return array;
            }

            private static GridColumn GetGridColumnFromType(System.Type type)
            {
                TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
                if (type.Equals(typeof(bool)) || type.Equals(typeof(CheckState)))
                {
                    return new GridCheckBoxColumn(type.Equals(typeof(CheckState)));
                }
                if (typeof(Image).IsAssignableFrom(type) || converter.CanConvertFrom(type))
                {
                    return new GridImageColumn();
                }
                return new GridTextBoxColumn();
            }

            public string GetError(int rowIndex)
            {
                IDataErrorInfo info = null;
                try
                {
                    info = this.currencyManager[rowIndex] as IDataErrorInfo;
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    GridDataErrorEventArgs e = new GridDataErrorEventArgs(exception, -1, rowIndex, GridDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                if (info != null)
                {
                    return info.Error;
                }
                return string.Empty;
            }

            public string GetError(int boundColumnIndex, int columnIndex, int rowIndex)
            {
                IDataErrorInfo info = null;
                try
                {
                    info = this.currencyManager[rowIndex] as IDataErrorInfo;
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    GridDataErrorEventArgs e = new GridDataErrorEventArgs(exception, columnIndex, rowIndex, GridDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                if (info != null)
                {
                    return info[this.props[boundColumnIndex].Name];
                }
                return string.Empty;
            }

            private void GetSortingInformationFromBackend(out PropertyDescriptor sortProperty, out SortOrder sortOrder)
            {
                IBindingList list = (this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null;
                IBindingListView view = (list != null) ? (list as IBindingListView) : null;
                if (((list == null) || !list.SupportsSorting) || !list.IsSorted)
                {
                    sortOrder = SortOrder.None;
                    sortProperty = null;
                }
                else if (list.SortProperty != null)
                {
                    sortProperty = list.SortProperty;
                    sortOrder = (list.SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending;
                }
                else if (view != null)
                {
                    ListSortDescriptionCollection sortDescriptions = view.SortDescriptions;
                    if (((sortDescriptions != null) && (sortDescriptions.Count > 0)) && (sortDescriptions[0].PropertyDescriptor != null))
                    {
                        sortProperty = sortDescriptions[0].PropertyDescriptor;
                        sortOrder = (sortDescriptions[0].SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending;
                    }
                    else
                    {
                        sortProperty = null;
                        sortOrder = SortOrder.None;
                    }
                }
                else
                {
                    sortProperty = null;
                    sortOrder = SortOrder.None;
                }
            }

            public object GetValue(int boundColumnIndex, int columnIndex, int rowIndex)
            {
                object obj2 = null;
                try
                {
                    obj2 = this.props[boundColumnIndex].GetValue(this.currencyManager[rowIndex]);
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception) && !(exception is IndexOutOfRangeException))
                    {
                        throw;
                    }
                    GridDataErrorEventArgs e = new GridDataErrorEventArgs(exception, columnIndex, rowIndex, GridDataErrorContexts.Display);
                    this.owner.OnDataErrorInternal(e);
                    if (e.ThrowException)
                    {
                        throw e.Exception;
                    }
                }
                return obj2;
            }

            public void MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection)
            {
                if (this.owner.Columns.Count != 0)
                {
                    int columnIndex = (this.owner.CurrentCellAddress.X == -1) ? this.owner.FirstDisplayedColumnIndex : this.owner.CurrentCellAddress.X;
                    if (columnIndex == -1)
                    {
                        GridColumn firstColumn = this.owner.Columns.GetFirstColumn(GridElementStates.None);
                        firstColumn.Visible = true;
                        columnIndex = firstColumn.Index;
                    }
                    int position = this.currencyManager.Position;
                    if (position == -1)
                    {
                        if (!this.owner.SetCurrentCellAddressCore(-1, -1, false, false, false))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                    else if (position < this.owner.Rows.Count)
                    {
                        if ((this.owner.Rows.GetRowState(position) & GridElementStates.Visible) == GridElementStates.None)
                        {
                            this.owner.Rows[position].Visible = true;
                        }
                        if (((position != this.owner.CurrentCellAddress.Y) || (columnIndex != this.owner.CurrentCellAddress.X)) && ((scrollIntoView && !this.owner.ScrollIntoView(columnIndex, position, true)) || (((columnIndex < this.owner.Columns.Count) && (position < this.owner.Rows.Count)) && !this.owner.SetAndSelectCurrentCellAddress(columnIndex, position, true, false, false, clearSelection, false))))
                        {
                            throw new InvalidOperationException(MControl.GridView.RM.GetString("Grid_CellChangeCannotBeCommittedOrAborted"));
                        }
                    }
                }
            }

            internal void OnNewRowNeeded()
            {
                this.dataConnectionState[8] = true;
                try
                {
                    this.AddNew();
                }
                finally
                {
                    this.dataConnectionState[8] = false;
                }
            }

            internal void OnRowEnter(GridCellEventArgs e)
            {
                if (!this.dataConnectionState[2] && this.currencyManager.ShouldBind)
                {
                    this.dataConnectionState[8] = true;
                    try
                    {
                        if (((e.RowIndex != this.owner.NewRowIndex) && !this.dataConnectionState[0x10]) && (this.currencyManager.Position != e.RowIndex))
                        {
                            try
                            {
                                this.currencyManager.Position = e.RowIndex;
                            }
                            catch (Exception exception)
                            {
                                if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                                {
                                    throw;
                                }
                                GridCellCancelEventArgs args = new GridCellCancelEventArgs(e.ColumnIndex, e.RowIndex);
                                this.ProcessException(exception, args, false);
                            }
                            IEditableObject current = this.currencyManager.Current as IEditableObject;
                            if (current != null)
                            {
                                current.BeginEdit();
                            }
                        }
                    }
                    finally
                    {
                        this.dataConnectionState[8] = false;
                    }
                }
            }

            internal void OnRowValidating(GridCellCancelEventArgs e)
            {
                if (this.currencyManager.ShouldBind)
                {
                    if (!this.dataConnectionState[4] && !this.owner.IsCurrentRowDirty)
                    {
                        if (!this.dataConnectionState[0x40])
                        {
                            this.dataConnectionState[8] = true;
                            try
                            {
                                this.CancelRowEdit(false, false);
                            }
                            finally
                            {
                                this.dataConnectionState[8] = false;
                            }
                        }
                    }
                    else if (this.owner.IsCurrentRowDirty)
                    {
                        this.dataConnectionState[0x100] = true;
                        try
                        {
                            this.currencyManager.EndCurrentEdit();
                        }
                        catch (Exception exception)
                        {
                            if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                            {
                                throw;
                            }
                            this.ProcessException(exception, e, true);
                        }
                        finally
                        {
                            this.dataConnectionState[0x100] = false;
                        }
                    }
                    this.dataConnectionState[4] = true;
                }
            }

            public void ProcessException(Exception exception, GridCellCancelEventArgs e, bool beginEdit)
            {
                GridDataErrorEventArgs args = new GridDataErrorEventArgs(exception, e.ColumnIndex, e.RowIndex, GridDataErrorContexts.Commit);
                this.owner.OnDataErrorInternal(args);
                if (args.ThrowException)
                {
                    throw args.Exception;
                }
                if (args.Cancel)
                {
                    e.Cancel = true;
                    if (beginEdit)
                    {
                        IEditableObject current = this.currencyManager.Current as IEditableObject;
                        if (current != null)
                        {
                            current.BeginEdit();
                        }
                    }
                }
                else
                {
                    this.CancelRowEdit(false, false);
                }
            }

            private void ProcessListChanged(ListChangedEventArgs e)
            {
                if (((e.ListChangedType == ListChangedType.PropertyDescriptorAdded) || (e.ListChangedType == ListChangedType.PropertyDescriptorDeleted)) || (e.ListChangedType == ListChangedType.PropertyDescriptorChanged))
                {
                    this.dataConnectionState[2] = true;
                    try
                    {
                        this.DataSourceMetaDataChanged();
                    }
                    finally
                    {
                        this.dataConnectionState[2] = false;
                    }
                }
                else if (this.dataConnectionState[0x10000] != this.owner.AllowUserToAddRowsInternal)
                {
                    this.dataConnectionState[0x400] = true;
                    try
                    {
                        this.owner.RefreshRows(!this.owner.InSortOperation);
                        this.owner.PushAllowUserToAddRows();
                    }
                    finally
                    {
                        this.ResetDataConnectionState();
                    }
                }
                else if (this.dataConnectionState[4] || (this.owner.newRowIndex != e.NewIndex))
                {
                    if ((e.ListChangedType == ListChangedType.ItemAdded) && (this.currencyManager.List.Count == (this.owner.AllowUserToAddRowsInternal ? (this.owner.Rows.Count - 1) : this.owner.Rows.Count)))
                    {
                        if (this.dataConnectionState[0x1000] && this.dataConnectionState[0x2000])
                        {
                            this.dataConnectionState[0x4000] = true;
                        }
                    }
                    else
                    {
                        if (e.ListChangedType == ListChangedType.ItemDeleted)
                        {
                            if ((this.dataConnectionState[0x1000] && this.dataConnectionState[0x4000]) && this.dataConnectionState[0x2000])
                            {
                                this.dataConnectionState[0x4000] = false;
                            }
                            else
                            {
                                if (!this.dataConnectionState[4] && this.dataConnectionState[0x8000])
                                {
                                    this.dataConnectionState[0x400] = true;
                                    try
                                    {
                                        this.owner.RefreshRows(!this.owner.InSortOperation);
                                        this.owner.PushAllowUserToAddRows();
                                    }
                                    finally
                                    {
                                        this.dataConnectionState[0x400] = false;
                                    }
                                    return;
                                }
                                if (this.currencyManager.List.Count == this.DataBoundRowsCount())
                                {
                                    return;
                                }
                            }
                        }
                        this.dataConnectionState[0x10] = true;
                        try
                        {
                            switch (e.ListChangedType)
                            {
                                case ListChangedType.Reset:
                                {
                                    this.dataConnectionState[0x400] = true;
                                    bool visible = this.owner.Visible;
                                    if (visible)
                                    {
                                        this.owner.BeginUpdateInternal();
                                    }
                                    try
                                    {
                                        this.owner.RefreshRows(!this.owner.InSortOperation);
                                        this.owner.PushAllowUserToAddRows();
                                        this.ApplySortingInformationFromBackEnd();
                                        goto Label_05A2;
                                    }
                                    finally
                                    {
                                        this.ResetDataConnectionState();
                                        if (visible)
                                        {
                                            this.owner.EndUpdateInternal(false);
                                            this.owner.Invalidate(true);
                                        }
                                    }
                                    break;
                                }
                                case ListChangedType.ItemAdded:
                                    break;

                                case ListChangedType.ItemDeleted:
                                    this.owner.Rows.RemoveAtInternal(e.NewIndex, true);
                                    this.dataConnectionState[0x2000] = false;
                                    goto Label_05A2;

                                case ListChangedType.ItemMoved:
                                {
                                    int lo = Math.Min(e.OldIndex, e.NewIndex);
                                    int hi = Math.Max(e.OldIndex, e.NewIndex);
                                    this.owner.InvalidateRows(lo, hi);
                                    goto Label_05A2;
                                }
                                case ListChangedType.ItemChanged:
                                {
                                    string name = null;
                                    if (e.PropertyDescriptor != null)
                                    {
                                        name = e.PropertyDescriptor.Name;
                                    }
                                    for (int i = 0; i < this.owner.Columns.Count; i++)
                                    {
                                        GridColumn column = this.owner.Columns[i];
                                        if (column.Visible && column.IsDataBound)
                                        {
                                            if (!string.IsNullOrEmpty(name))
                                            {
                                                if (string.Compare(column.DataPropertyName, name, true, CultureInfo.InvariantCulture) == 0)
                                                {
                                                    this.owner.OnCellCommonChange(i, e.NewIndex);
                                                }
                                            }
                                            else
                                            {
                                                this.owner.OnCellCommonChange(i, e.NewIndex);
                                            }
                                        }
                                    }
                                    if ((this.owner.CurrentCellAddress.Y == e.NewIndex) && this.owner.IsCurrentCellInEditMode)
                                    {
                                        this.owner.RefreshEdit();
                                    }
                                    goto Label_05A2;
                                }
                                default:
                                    goto Label_05A2;
                            }
                            if ((this.owner.NewRowIndex != -1) && (e.NewIndex == this.owner.Rows.Count))
                            {
                                throw new InvalidOperationException();
                            }
                            this.owner.Rows.InsertInternal(e.NewIndex, this.owner.RowTemplateClone, true);
                        Label_05A2:
                            if (((this.owner.Rows.Count > 0) && !this.dataConnectionState[8]) && !this.owner.InSortOperation)
                            {
                                this.MatchCurrencyManagerPosition(false, e.ListChangedType == ListChangedType.Reset);
                            }
                        }
                        finally
                        {
                            this.dataConnectionState[0x10] = false;
                        }
                    }
                }
                else if (e.ListChangedType == ListChangedType.ItemAdded)
                {
                    if (!this.dataConnectionState[0x200] && !this.dataConnectionState[0x100])
                    {
                        if (this.owner.Columns.Count > 0)
                        {
                            do
                            {
                                this.owner.newRowIndex = -1;
                                this.owner.AddNewRow(false);
                            }
                            while (this.DataBoundRowsCount() < this.currencyManager.Count);
                        }
                        this.dataConnectionState[4] = true;
                        this.MatchCurrencyManagerPosition(true, true);
                    }
                }
                else if (e.ListChangedType == ListChangedType.ItemDeleted)
                {
                    if (this.dataConnectionState[0x40])
                    {
                        this.owner.PopulateNewRowWithDefaultValues();
                    }
                    else
                    {
                        if (this.dataConnectionState[0x8000] || this.dataConnectionState[0x200])
                        {
                            this.dataConnectionState[0x400] = true;
                            try
                            {
                                this.owner.RefreshRows(!this.owner.InSortOperation);
                                this.owner.PushAllowUserToAddRows();
                                return;
                            }
                            finally
                            {
                                this.dataConnectionState[0x400] = false;
                            }
                        }
                        if (this.dataConnectionState[0x1000] && (this.currencyManager.List.Count == 0))
                        {
                            this.AddNew();
                        }
                    }
                }
            }

            public bool PushValue(int boundColumnIndex, int columnIndex, int rowIndex, object value)
            {
                try
                {
                    if (value != null)
                    {
                        System.Type c = value.GetType();
                        System.Type valueType = this.owner.Columns[columnIndex].ValueType;
                        if (!valueType.IsAssignableFrom(c))
                        {
                            TypeConverter converter = this.BoundColumnConverter(boundColumnIndex);
                            if ((converter != null) && converter.CanConvertFrom(c))
                            {
                                value = converter.ConvertFrom(value);
                            }
                            else
                            {
                                TypeConverter cachedTypeConverter = this.owner.GetCachedTypeConverter(c);
                                if ((cachedTypeConverter != null) && cachedTypeConverter.CanConvertTo(valueType))
                                {
                                    value = cachedTypeConverter.ConvertTo(value, valueType);
                                }
                            }
                        }
                    }
                    this.props[boundColumnIndex].SetValue(this.currencyManager[rowIndex], value);
                }
                catch (Exception exception)
                {
                    if (System.Windows.Forms.ClientUtils.IsCriticalException(exception))
                    {
                        throw;
                    }
                    GridCellCancelEventArgs e = new GridCellCancelEventArgs(columnIndex, rowIndex);
                    this.ProcessException(exception, e, false);
                    return !e.Cancel;
                }
                return true;
            }

            public void ResetCachedAllowUserToAddRowsInternal()
            {
                this.dataConnectionState[0x10000] = this.owner.AllowUserToAddRowsInternal;
            }

            private void ResetDataConnectionState()
            {
                this.dataConnectionState = new BitVector32(4);
                if (this.currencyManager != null)
                {
                    this.dataConnectionState[0x20] = true;
                }
                this.ResetCachedAllowUserToAddRowsInternal();
            }

            public void SetDataConnection(object dataSource, string dataMember)
            {
                if (!this.dataConnectionState[1])
                {
                    this.ResetDataConnectionState();
                    if (dataMember == null)
                    {
                        dataMember = string.Empty;
                    }
                    ISupportInitializeNotification notification = this.dataSource as ISupportInitializeNotification;
                    if ((notification != null) && this.dataConnectionState[0x40000])
                    {
                        notification.Initialized -= new EventHandler(this.DataSource_Initialized);
                        this.dataConnectionState[0x40000] = false;
                    }
                    this.dataSource = dataSource;
                    this.dataMember = dataMember;
                    if (this.owner.BindingContext != null)
                    {
                        this.dataConnectionState[1] = true;
                        try
                        {
                            this.UnWireEvents();
                            if (((this.dataSource != null) && (this.owner.BindingContext != null)) && (this.dataSource != Convert.DBNull))
                            {
                                notification = this.dataSource as ISupportInitializeNotification;
                                if ((notification != null) && !notification.IsInitialized)
                                {
                                    if (!this.dataConnectionState[0x40000])
                                    {
                                        notification.Initialized += new EventHandler(this.DataSource_Initialized);
                                        this.dataConnectionState[0x40000] = true;
                                    }
                                    this.currencyManager = null;
                                }
                                else
                                {
                                    this.currencyManager = this.owner.BindingContext[this.dataSource, this.dataMember] as System.Windows.Forms.CurrencyManager;
                                }
                            }
                            else
                            {
                                this.currencyManager = null;
                            }
                            this.WireEvents();
                            if (this.currencyManager != null)
                            {
                                this.props = this.currencyManager.GetItemProperties();
                            }
                            else
                            {
                                this.props = null;
                            }
                        }
                        finally
                        {
                            this.dataConnectionState[1] = false;
                        }
                        this.ResetCachedAllowUserToAddRowsInternal();
                        if (this.currencyManager != null)
                        {
                            this.lastListCount = this.currencyManager.Count;
                        }
                        else
                        {
                            this.lastListCount = -1;
                        }
                    }
                }
            }

            public bool ShouldChangeDataMember(object newDataSource)
            {
                if (!this.owner.Created)
                {
                    return false;
                }
                if (this.owner.BindingContext == null)
                {
                    return false;
                }
                if (newDataSource != null)
                {
                    System.Windows.Forms.CurrencyManager manager = this.owner.BindingContext[newDataSource] as System.Windows.Forms.CurrencyManager;
                    if (manager == null)
                    {
                        return false;
                    }
                    PropertyDescriptorCollection itemProperties = manager.GetItemProperties();
                    if ((this.dataMember.Length != 0) && (itemProperties[this.dataMember] != null))
                    {
                        return false;
                    }
                }
                return true;
            }

            public void Sort(GridColumn gridColumn, ListSortDirection direction)
            {
                ((IBindingList) this.List).ApplySort(this.props[gridColumn.BoundColumnIndex], direction);
            }

            private void UnWireEvents()
            {
                if (this.currencyManager != null)
                {
                    this.currencyManager.PositionChanged -= new EventHandler(this.currencyManager_PositionChanged);
                    this.currencyManager.ListChanged -= new ListChangedEventHandler(this.currencyManager_ListChanged);
                    this.dataConnectionState[0x20] = false;
                }
            }

            private void WireEvents()
            {
                if (this.currencyManager != null)
                {
                    this.currencyManager.PositionChanged += new EventHandler(this.currencyManager_PositionChanged);
                    this.currencyManager.ListChanged += new ListChangedEventHandler(this.currencyManager_ListChanged);
                    this.dataConnectionState[0x20] = true;
                }
            }

            public bool AllowAdd
            {
                get
                {
                    if (this.currencyManager == null)
                    {
                        return false;
                    }
                    return (((this.currencyManager.List is IBindingList) && this.currencyManager.AllowAdd) && ((IBindingList) this.currencyManager.List).SupportsChangeNotification);
                }
            }

            public bool AllowEdit
            {
                get
                {
                    return ((this.currencyManager != null) && this.currencyManager.AllowEdit);
                }
            }

            public bool AllowRemove
            {
                get
                {
                    if (this.currencyManager == null)
                    {
                        return false;
                    }
                    return (((this.currencyManager.List is IBindingList) && this.currencyManager.AllowRemove) && ((IBindingList) this.currencyManager.List).SupportsChangeNotification);
                }
            }

            public bool CancellingRowEdit
            {
                get
                {
                    return this.dataConnectionState[0x40];
                }
            }

            public System.Windows.Forms.CurrencyManager CurrencyManager
            {
                get
                {
                    return this.currencyManager;
                }
            }

            public string DataMember
            {
                get
                {
                    return this.dataMember;
                }
            }

            public object DataSource
            {
                get
                {
                    return this.dataSource;
                }
            }

            public bool DoNotChangePositionInTheCurrencyManager
            {
                get
                {
                    return this.dataConnectionState[0x10];
                }
                set
                {
                    this.dataConnectionState[0x10] = value;
                }
            }

            public bool InterestedInRowEvents
            {
                get
                {
                    return this.dataConnectionState[0x20];
                }
            }

            public IList List
            {
                get
                {
                    if (this.currencyManager != null)
                    {
                        return this.currencyManager.List;
                    }
                    return null;
                }
            }

            public bool ListWasReset
            {
                get
                {
                    return this.dataConnectionState[0x400];
                }
            }

            public bool PositionChangingOutsideGrid
            {
                get
                {
                    return (!this.dataConnectionState[8] && this.dataConnectionState[0x800]);
                }
            }

            public bool ProcessingListChangedEvent
            {
                get
                {
                    return this.dataConnectionState[0x20000];
                }
            }

            public bool ProcessingMetaDataChanges
            {
                get
                {
                    return this.dataConnectionState[2];
                }
            }

            public bool RestoreRow
            {
                get
                {
                    return this.dataConnectionState[0x80];
                }
            }
        }

        internal enum GridHitTestTypeInternal
        {
            None,
            Cell,
            ColumnHeader,
            RowHeader,
            ColumnResizeLeft,
            ColumnResizeRight,
            RowResizeTop,
            RowResizeBottom,
            FirstColumnHeaderLeft,
            TopLeftHeader,
            TopLeftHeaderResizeLeft,
            TopLeftHeaderResizeRight,
            TopLeftHeaderResizeTop,
            TopLeftHeaderResizeBottom,
            ColumnHeadersResizeBottom,
            ColumnHeadersResizeTop,
            RowHeadersResizeRight,
            RowHeadersResizeLeft,
            ColumnHeaderLeft,
            ColumnHeaderRight
        }

        private enum GridMouseEvent
        {
            Click,
            DoubleClick,
            MouseClick,
            MouseDoubleClick,
            MouseDown,
            MouseUp,
            MouseMove
        }

        private class GridSelectedCellsAccessibleObject : AccessibleObject
        {
            private Grid owner;

            public GridSelectedCellsAccessibleObject(Grid owner)
            {
                this.owner = owner;
            }

            public override AccessibleObject GetChild(int index)
            {
                if ((index >= 0) && (index < this.owner.GetCellCount(GridElementStates.Selected)))
                {
                    return this.owner.SelectedCell(index).AccessibilityObject;
                }
                return null;
            }

            public override int GetChildCount()
            {
                return this.owner.GetCellCount(GridElementStates.Selected);
            }

            public override AccessibleObject GetFocused()
            {
                if ((this.owner.CurrentCell != null) && this.owner.CurrentCell.Selected)
                {
                    return this.owner.CurrentCell.AccessibilityObject;
                }
                return null;
            }

            public override AccessibleObject GetSelected()
            {
                return this;
            }

            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                switch (navigationDirection)
                {
                    case AccessibleNavigation.FirstChild:
                        if (this.owner.GetCellCount(GridElementStates.Selected) <= 0)
                        {
                            return null;
                        }
                        return this.owner.SelectedCell(0).AccessibilityObject;

                    case AccessibleNavigation.LastChild:
                        if (this.owner.GetCellCount(GridElementStates.Selected) <= 0)
                        {
                            return null;
                        }
                        return this.owner.SelectedCell(this.owner.GetCellCount(GridElementStates.Selected) - 1).AccessibilityObject;
                }
                return null;
            }

            public override string Name
            {
                get
                {
                    return MControl.GridView.RM.GetString("Grid_AccSelectedCellsName");
                }
            }

            public override AccessibleObject Parent
            {
                [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
                get
                {
                    return this.owner.AccessibilityObject;
                }
            }

            public override AccessibleRole Role
            {
                get
                {
                    return AccessibleRole.Grouping;
                }
            }

            public override AccessibleStates State
            {
                get
                {
                    return (AccessibleStates.Selectable | AccessibleStates.Selected);
                }
            }

            public override string Value
            {
                [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
                get
                {
                    return this.Name;
                }
            }
        }

        private class GridToolTip
        {
            private Grid grid;
            private System.Windows.Forms.ToolTip toolTip;
            private bool toolTipActivated;

            public GridToolTip(Grid grid)
            {
                this.grid = grid;
            }

            public void Activate(bool activate)
            {
                if (!this.grid.DesignMode)
                {
                    if (activate && (this.toolTip == null))
                    {
                        this.toolTip = new System.Windows.Forms.ToolTip();
                        this.toolTip.ShowAlways = true;
                        this.toolTip.InitialDelay = 0;
                        this.toolTip.UseFading = false;
                        this.toolTip.UseAnimation = false;
                        this.toolTip.AutoPopDelay = 0;
                    }
                    if (this.grid.IsRestricted)
                    {
                        System.Windows.Forms.IntSecurity.AllWindows.Assert();
                    }
                    try
                    {
                        if (activate)
                        {
                            this.toolTip.Active = true;
                            this.toolTip.Show(this.grid.ToolTipPrivate, this.grid);
                        }
                        else if (this.toolTip != null)
                        {
                            this.toolTip.Hide(this.grid);
                            this.toolTip.Active = false;
                        }
                    }
                    finally
                    {
                        if (this.grid.IsRestricted)
                        {
                            CodeAccessPermission.RevertAssert();
                        }
                    }
                    this.toolTipActivated = activate;
                }
            }

            public bool Activated
            {
                get
                {
                    return this.toolTipActivated;
                }
            }

            public System.Windows.Forms.ToolTip ToolTip
            {
                get
                {
                    return this.toolTip;
                }
            }
        }

        /// <summary>Provides information about a row of <see cref="T:MControl.GridView.GridColumnHeaderCell"></see> objects to accessibility client applications.</summary>
        [ComVisible(true)]
        protected class GridTopRowAccessibleObject : AccessibleObject
        {
            private Grid owner;

            /// <summary>Initializes a new instance of the <see cref="T:MControl.GridView.Grid.GridTopRowAccessibleObject"></see> class without setting the <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property. </summary>
            public GridTopRowAccessibleObject()
            {
            }

            /// <summary>Initializes a new instance of the <see cref="T:MControl.GridView.Grid.GridTopRowAccessibleObject"></see> class, setting the <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property to the specified value.</summary>
            /// <param name="owner">The <see cref="T:MControl.GridView.Grid"></see> that owns the <see cref="T:MControl.GridView.Grid.GridTopRowAccessibleObject"></see></param>
            public GridTopRowAccessibleObject(Grid owner)
            {
                this.owner = owner;
            }

            /// <summary>Returns the child accessible object corresponding to the specified index.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the column header at the specified index.</returns>
            /// <param name="index">The zero-based index of the accessible child.</param>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property is not set.</exception>
            /// <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0.</exception>
            public override AccessibleObject GetChild(int index)
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerNotSet"));
                }
                if (index < 0)
                {
                    throw new ArgumentOutOfRangeException("index");
                }
                if ((index == 0) && this.owner.RowHeadersVisible)
                {
                    return this.owner.TopLeftHeaderCell.AccessibilityObject;
                }
                if (this.owner.RowHeadersVisible)
                {
                    index--;
                }
                if (index < this.owner.Columns.GetColumnCount(GridElementStates.Visible))
                {
                    int num = this.owner.Columns.ActualDisplayIndexToColumnIndex(index, GridElementStates.Visible);
                    return this.owner.Columns[num].HeaderCell.AccessibilityObject;
                }
                return null;
            }

            /// <summary>Returns the number of children belonging to the accessible object.</summary>
            /// <returns>The number of child accessible objects belonging to the accessible object.</returns>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property is not set.</exception>
            public override int GetChildCount()
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerNotSet"));
                }
                int columnCount = this.owner.Columns.GetColumnCount(GridElementStates.Visible);
                if (this.owner.RowHeadersVisible)
                {
                    columnCount++;
                }
                return columnCount;
            }

            /// <summary>Navigates to another accessible object.</summary>
            /// <returns>An <see cref="T:System.Windows.Forms.AccessibleObject"></see> that represents the object at the specified <see cref="T:System.Windows.Forms.AccessibleNavigation"></see> value.</returns>
            /// <param name="navigationDirection">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation"></see> values.</param>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property is not set.</exception>
            [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
            public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
            {
                if (this.owner == null)
                {
                    throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerNotSet"));
                }
                switch (navigationDirection)
                {
                    case AccessibleNavigation.Down:
                    case AccessibleNavigation.Next:
                        if (this.owner.AccessibilityObject.GetChildCount() <= 1)
                        {
                            return null;
                        }
                        return this.owner.AccessibilityObject.GetChild(1);

                    case AccessibleNavigation.FirstChild:
                        return this.GetChild(0);

                    case AccessibleNavigation.LastChild:
                        return this.GetChild(this.GetChildCount() - 1);
                }
                return null;
            }

            /// <summary>Gets the location and size of the accessible object. </summary>
            /// <returns>A <see cref="T:System.Drawing.Rectangle"></see> that represents the bounds of the accessible object.</returns>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property is not set.</exception>
            public override Rectangle Bounds
            {
                get
                {
                    if (this.owner == null)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerNotSet"));
                    }
                    if (this.owner.ColumnHeadersVisible)
                    {
                        Rectangle r = Rectangle.Union(this.owner.layout.ColumnHeaders, this.owner.layout.TopLeftHeader);
                        return this.owner.RectangleToScreen(r);
                    }
                    return Rectangle.Empty;
                }
            }

            /// <summary>Gets the name of the accessible object.</summary>
            /// <returns>The string "Top Row".</returns>
            public override string Name
            {
                get
                {
                    return MControl.GridView.RM.GetString("Grid_AccTopRow");
                }
            }

            /// <summary>Gets the <see cref="T:MControl.GridView.Grid"></see> that contains the row of column headers.</summary>
            /// <returns>The <see cref="T:MControl.GridView.Grid"></see> that contains the row of column headers.</returns>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property has already been set.</exception>
            public Grid Owner
            {
                get
                {
                    return this.owner;
                }
                set
                {
                    if (this.owner != null)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerAlreadySet"));
                    }
                    this.owner = value;
                }
            }

            /// <summary>Gets the parent of the <see cref="T:MControl.GridView.Grid.GridTopRowAccessibleObject"></see>.</summary>
            /// <returns>An <see cref="T:MControl.GridView.Grid.GridAccessibleObject"></see> that represents the <see cref="T:MControl.GridView.Grid"></see>.</returns>
            /// <exception cref="T:System.InvalidOperationException">The <see cref="P:MControl.GridView.Grid.GridTopRowAccessibleObject.Owner"></see> property is not set.</exception>
            public override AccessibleObject Parent
            {
                [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
                get
                {
                    if (this.owner == null)
                    {
                        throw new InvalidOperationException(MControl.GridView.RM.GetString("GridTopRowAccessibleObject_OwnerNotSet"));
                    }
                    return this.owner.AccessibilityObject;
                }
            }

            /// <summary>Gets the role of the accessible object.</summary>
            /// <returns>The <see cref="F:System.Windows.Forms.AccessibleRole.Row"></see> value.</returns>
            public override AccessibleRole Role
            {
                get
                {
                    return AccessibleRole.Row;
                }
            }

            /// <summary>Gets the value of an accessible object.</summary>
            /// <returns>The string "Top Row".</returns>
            public override string Value
            {
                [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.UnmanagedCode)]
                get
                {
                    return this.Name;
                }
            }
        }

        internal enum GridValidateCellInternal
        {
            Never,
            Always,
            WhenChanged
        }

        internal class DisplayedBandsData
        {
            private bool columnInsertionOccurred;
            private bool dirty;
            private int firstDisplayedFrozenCol = -1;
            private int firstDisplayedFrozenRow = -1;
            private int firstDisplayedScrollingCol = -1;
            private int firstDisplayedScrollingRow = -1;
            private int lastDisplayedFrozenCol = -1;
            private int lastDisplayedFrozenRow = -1;
            private int lastDisplayedScrollingRow = -1;
            private int lastTotallyDisplayedScrollingCol = -1;
            private int numDisplayedFrozenCols;
            private int numDisplayedFrozenRows;
            private int numDisplayedScrollingCols;
            private int numDisplayedScrollingRows;
            private int numTotallyDisplayedFrozenRows;
            private int numTotallyDisplayedScrollingRows;
            private int oldFirstDisplayedScrollingCol = -1;
            private int oldFirstDisplayedScrollingRow = -1;
            private int oldNumDisplayedFrozenRows;
            private int oldNumDisplayedScrollingRows;
            private bool rowInsertionOccurred;

            public void CorrectColumnIndexAfterInsertion(int columnIndex, int insertionCount)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingCol != -1) && (columnIndex <= this.oldFirstDisplayedScrollingCol))
                {
                    this.oldFirstDisplayedScrollingCol += insertionCount;
                }
                this.columnInsertionOccurred = true;
            }

            public void CorrectRowIndexAfterDeletion(int rowIndex)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingRow != -1) && (rowIndex <= this.oldFirstDisplayedScrollingRow))
                {
                    this.oldFirstDisplayedScrollingRow--;
                }
            }

            public void CorrectRowIndexAfterInsertion(int rowIndex, int insertionCount)
            {
                this.EnsureDirtyState();
                if ((this.oldFirstDisplayedScrollingRow != -1) && (rowIndex <= this.oldFirstDisplayedScrollingRow))
                {
                    this.oldFirstDisplayedScrollingRow += insertionCount;
                }
                this.rowInsertionOccurred = true;
                this.oldNumDisplayedScrollingRows += insertionCount;
                this.oldNumDisplayedFrozenRows += insertionCount;
            }

            public void EnsureDirtyState()
            {
                if (!this.dirty)
                {
                    this.dirty = true;
                    this.rowInsertionOccurred = false;
                    this.columnInsertionOccurred = false;
                    this.SetOldValues();
                }
            }

            private void SetOldValues()
            {
                this.oldFirstDisplayedScrollingRow = this.firstDisplayedScrollingRow;
                this.oldFirstDisplayedScrollingCol = this.firstDisplayedScrollingCol;
                this.oldNumDisplayedFrozenRows = this.numDisplayedFrozenRows;
                this.oldNumDisplayedScrollingRows = this.numDisplayedScrollingRows;
            }

            public bool ColumnInsertionOccurred
            {
                get
                {
                    return this.columnInsertionOccurred;
                }
            }

            public bool Dirty
            {
                get
                {
                    return this.dirty;
                }
                set
                {
                    this.dirty = value;
                }
            }

            public int FirstDisplayedFrozenCol
            {
                set
                {
                    if (value != this.firstDisplayedFrozenCol)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedFrozenCol = value;
                    }
                }
            }

            public int FirstDisplayedFrozenRow
            {
                set
                {
                    if (value != this.firstDisplayedFrozenRow)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedFrozenRow = value;
                    }
                }
            }

            public int FirstDisplayedScrollingCol
            {
                get
                {
                    return this.firstDisplayedScrollingCol;
                }
                set
                {
                    if (value != this.firstDisplayedScrollingCol)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedScrollingCol = value;
                    }
                }
            }

            public int FirstDisplayedScrollingRow
            {
                get
                {
                    return this.firstDisplayedScrollingRow;
                }
                set
                {
                    if (value != this.firstDisplayedScrollingRow)
                    {
                        this.EnsureDirtyState();
                        this.firstDisplayedScrollingRow = value;
                    }
                }
            }

            public int LastDisplayedFrozenCol
            {
                set
                {
                    if (value != this.lastDisplayedFrozenCol)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedFrozenCol = value;
                    }
                }
            }

            public int LastDisplayedFrozenRow
            {
                set
                {
                    if (value != this.lastDisplayedFrozenRow)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedFrozenRow = value;
                    }
                }
            }

            public int LastDisplayedScrollingRow
            {
                set
                {
                    if (value != this.lastDisplayedScrollingRow)
                    {
                        this.EnsureDirtyState();
                        this.lastDisplayedScrollingRow = value;
                    }
                }
            }

            public int LastTotallyDisplayedScrollingCol
            {
                get
                {
                    return this.lastTotallyDisplayedScrollingCol;
                }
                set
                {
                    if (value != this.lastTotallyDisplayedScrollingCol)
                    {
                        this.EnsureDirtyState();
                        this.lastTotallyDisplayedScrollingCol = value;
                    }
                }
            }

            public int NumDisplayedFrozenCols
            {
                get
                {
                    return this.numDisplayedFrozenCols;
                }
                set
                {
                    if (value != this.numDisplayedFrozenCols)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedFrozenCols = value;
                    }
                }
            }

            public int NumDisplayedFrozenRows
            {
                get
                {
                    return this.numDisplayedFrozenRows;
                }
                set
                {
                    if (value != this.numDisplayedFrozenRows)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedFrozenRows = value;
                    }
                }
            }

            public int NumDisplayedScrollingCols
            {
                get
                {
                    return this.numDisplayedScrollingCols;
                }
                set
                {
                    if (value != this.numDisplayedScrollingCols)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedScrollingCols = value;
                    }
                }
            }

            public int NumDisplayedScrollingRows
            {
                get
                {
                    return this.numDisplayedScrollingRows;
                }
                set
                {
                    if (value != this.numDisplayedScrollingRows)
                    {
                        this.EnsureDirtyState();
                        this.numDisplayedScrollingRows = value;
                    }
                }
            }

            public int NumTotallyDisplayedFrozenRows
            {
                get
                {
                    return this.numTotallyDisplayedFrozenRows;
                }
                set
                {
                    if (value != this.numTotallyDisplayedFrozenRows)
                    {
                        this.EnsureDirtyState();
                        this.numTotallyDisplayedFrozenRows = value;
                    }
                }
            }

            public int NumTotallyDisplayedScrollingRows
            {
                get
                {
                    return this.numTotallyDisplayedScrollingRows;
                }
                set
                {
                    if (value != this.numTotallyDisplayedScrollingRows)
                    {
                        this.EnsureDirtyState();
                        this.numTotallyDisplayedScrollingRows = value;
                    }
                }
            }

            public int OldFirstDisplayedScrollingCol
            {
                get
                {
                    return this.oldFirstDisplayedScrollingCol;
                }
            }

            public int OldFirstDisplayedScrollingRow
            {
                get
                {
                    return this.oldFirstDisplayedScrollingRow;
                }
            }

            public int OldNumDisplayedFrozenRows
            {
                get
                {
                    return this.oldNumDisplayedFrozenRows;
                }
            }

            public int OldNumDisplayedScrollingRows
            {
                get
                {
                    return this.oldNumDisplayedScrollingRows;
                }
            }

            public bool RowInsertionOccurred
            {
                get
                {
                    return this.rowInsertionOccurred;
                }
            }
        }

        /// <summary>Contains information, such as the row and column indexes, about a specific coordinate pair in the <see cref="T:MControl.GridView.Grid"></see> control. This class cannot be inherited. </summary>
        public sealed class HitTestInfo
        {
            internal int adjacentCol;
            internal int adjacentRow;
            internal int col;
            internal int colStart;
            internal int mouseBarOffset;
            /// <summary>Specifies that the point is not on a cell or cell header. This field is read-only.</summary>
            public static readonly Grid.HitTestInfo Nowhere = new Grid.HitTestInfo();
            internal int row;
            internal int rowStart;
            internal GridHitTestType type = GridHitTestType.None;
            internal Grid.GridHitTestTypeInternal typeInternal = Grid.GridHitTestTypeInternal.None;

            internal HitTestInfo()
            {
                this.row = this.col = -1;
                this.rowStart = this.colStart = -1;
                this.adjacentRow = this.adjacentCol = -1;
            }

            /// <summary>Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>. </summary>
            /// <returns>true if value is a <see cref="T:MControl.GridView.Grid.HitTestInfo"></see> in which the values of the <see cref="P:MControl.GridView.Grid.HitTestInfo.Type"></see>, <see cref="P:MControl.GridView.Grid.HitTestInfo.RowIndex"></see>, and <see cref="P:MControl.GridView.Grid.HitTestInfo.ColumnIndex"></see> properties are the same as the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            /// <param name="value">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</param>
            public override bool Equals(object value)
            {
                Grid.HitTestInfo info = value as Grid.HitTestInfo;
                if (info == null)
                {
                    return false;
                }
                return (((this.type == info.type) && (this.row == info.row)) && (this.col == info.col));
            }

            public override int GetHashCode()
            {
                return WindowsFormsUtils.GetCombinedHashCodes(new int[] { this.type, this.row, this.col });
            }

            /// <summary>Returns a string that represents a <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</summary>
            /// <returns>A string that represents a <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public override string ToString()
            {
                return ("{ Type:" + this.type.ToString() + ", Column:" + this.col.ToString(CultureInfo.CurrentCulture) + ", Row:" + this.row.ToString(CultureInfo.CurrentCulture) + " }");
            }

            /// <summary>Gets the index of the column that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</summary>
            /// <returns>The index of the column in the <see cref="T:MControl.GridView.Grid"></see> that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public int ColumnIndex
            {
                get
                {
                    return this.col;
                }
            }

            /// <summary>Gets the x-coordinate of the beginning of the column that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</summary>
            /// <returns>The x-coordinate of the column in the <see cref="T:MControl.GridView.Grid"></see> that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public int ColumnX
            {
                get
                {
                    return this.colStart;
                }
            }

            /// <summary>Gets the index of the row that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</summary>
            /// <returns>The index of the row in the <see cref="T:MControl.GridView.Grid"></see> that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public int RowIndex
            {
                get
                {
                    return this.row;
                }
            }

            /// <summary>Gets the y-coordinate of the top of the row that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</summary>
            /// <returns>The y-coordinate of the row in the <see cref="T:MControl.GridView.Grid"></see> that contains the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public int RowY
            {
                get
                {
                    return this.rowStart;
                }
            }

            /// <summary>Gets the <see cref="T:MControl.GridView.GridHitTestType"></see> that indicates which part of the <see cref="T:MControl.GridView.Grid"></see> the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see> belong to.</summary>
            /// <returns>A <see cref="T:MControl.GridView.GridHitTestType"></see> value that indicates the control part at the coordinates described by the current <see cref="T:MControl.GridView.Grid.HitTestInfo"></see>.</returns>
            public GridHitTestType Type
            {
                get
                {
                    return this.type;
                }
            }
        }

        internal class LayoutData
        {
            public Rectangle ClientRectangle;
            public Rectangle ColumnHeaders;
            public bool ColumnHeadersVisible;
            public Rectangle Data;
            internal bool dirty;
            public Rectangle Inside;
            public Rectangle ResizeBoxRect;
            public Rectangle RowHeaders;
            public bool RowHeadersVisible;
            public Rectangle TopLeftHeader;

            public LayoutData()
            {
                this.dirty = true;
                this.ClientRectangle = Rectangle.Empty;
                this.Inside = Rectangle.Empty;
                this.RowHeaders = Rectangle.Empty;
                this.ColumnHeaders = Rectangle.Empty;
                this.TopLeftHeader = Rectangle.Empty;
                this.Data = Rectangle.Empty;
                this.ResizeBoxRect = Rectangle.Empty;
            }

            public LayoutData(Grid.LayoutData src)
            {
                this.dirty = true;
                this.ClientRectangle = Rectangle.Empty;
                this.Inside = Rectangle.Empty;
                this.RowHeaders = Rectangle.Empty;
                this.ColumnHeaders = Rectangle.Empty;
                this.TopLeftHeader = Rectangle.Empty;
                this.Data = Rectangle.Empty;
                this.ResizeBoxRect = Rectangle.Empty;
                this.ClientRectangle = src.ClientRectangle;
                this.TopLeftHeader = src.TopLeftHeader;
                this.ColumnHeaders = src.ColumnHeaders;
                this.RowHeaders = src.RowHeaders;
                this.Inside = src.Inside;
                this.Data = src.Data;
                this.ResizeBoxRect = src.ResizeBoxRect;
                this.ColumnHeadersVisible = src.ColumnHeadersVisible;
                this.RowHeadersVisible = src.RowHeadersVisible;
            }

            public override string ToString()
            {
                StringBuilder builder = new StringBuilder(100);
                builder.Append(base.ToString());
                builder.Append(" { \n");
                builder.Append("ClientRectangle = ");
                builder.Append(this.ClientRectangle.ToString());
                builder.Append('\n');
                builder.Append("Inside = ");
                builder.Append(this.Inside.ToString());
                builder.Append('\n');
                builder.Append("TopLeftHeader = ");
                builder.Append(this.TopLeftHeader.ToString());
                builder.Append('\n');
                builder.Append("ColumnHeaders = ");
                builder.Append(this.ColumnHeaders.ToString());
                builder.Append('\n');
                builder.Append("RowHeaders = ");
                builder.Append(this.RowHeaders.ToString());
                builder.Append('\n');
                builder.Append("Data = ");
                builder.Append(this.Data.ToString());
                builder.Append('\n');
                builder.Append("ResizeBoxRect = ");
                builder.Append(this.ResizeBoxRect.ToString());
                builder.Append('\n');
                builder.Append("ColumnHeadersVisible = ");
                builder.Append(this.ColumnHeadersVisible.ToString());
                builder.Append('\n');
                builder.Append("RowHeadersVisible = ");
                builder.Append(this.RowHeadersVisible.ToString());
                builder.Append(" }");
                return builder.ToString();
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MouseClickInfo
        {
            public MouseButtons button;
            public long timeStamp;
            public int x;
            public int y;
            public int col;
            public int row;
        }
    }
}

